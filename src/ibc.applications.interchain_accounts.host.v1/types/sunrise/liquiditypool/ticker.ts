// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/ticker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "sunrise.liquiditypool";

export interface TickInfo {
  poolId: number;
  tickIndex: number;
  liquidityGross: string;
  liquidityNet: string;
  feeGrowth: DecCoin[];
}

function createBaseTickInfo(): TickInfo {
  return { poolId: 0, tickIndex: 0, liquidityGross: "", liquidityNet: "", feeGrowth: [] };
}

export const TickInfo: MessageFns<TickInfo> = {
  encode(message: TickInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.tickIndex !== 0) {
      writer.uint32(16).int64(message.tickIndex);
    }
    if (message.liquidityGross !== "") {
      writer.uint32(26).string(message.liquidityGross);
    }
    if (message.liquidityNet !== "") {
      writer.uint32(34).string(message.liquidityNet);
    }
    for (const v of message.feeGrowth) {
      DecCoin.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tickIndex = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.liquidityGross = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.liquidityNet = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.feeGrowth.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickInfo {
    return {
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      tickIndex: isSet(object.tickIndex) ? globalThis.Number(object.tickIndex) : 0,
      liquidityGross: isSet(object.liquidityGross) ? globalThis.String(object.liquidityGross) : "",
      liquidityNet: isSet(object.liquidityNet) ? globalThis.String(object.liquidityNet) : "",
      feeGrowth: globalThis.Array.isArray(object?.feeGrowth)
        ? object.feeGrowth.map((e: any) => DecCoin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TickInfo): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.tickIndex !== 0) {
      obj.tickIndex = Math.round(message.tickIndex);
    }
    if (message.liquidityGross !== "") {
      obj.liquidityGross = message.liquidityGross;
    }
    if (message.liquidityNet !== "") {
      obj.liquidityNet = message.liquidityNet;
    }
    if (message.feeGrowth?.length) {
      obj.feeGrowth = message.feeGrowth.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickInfo>, I>>(base?: I): TickInfo {
    return TickInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickInfo>, I>>(object: I): TickInfo {
    const message = createBaseTickInfo();
    message.poolId = object.poolId ?? 0;
    message.tickIndex = object.tickIndex ?? 0;
    message.liquidityGross = object.liquidityGross ?? "";
    message.liquidityNet = object.liquidityNet ?? "";
    message.feeGrowth = object.feeGrowth?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
