// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/da/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { PublishedData } from "./published_data";

export const protobufPackage = "sunrise.da";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/**
 * QueryPublishedDataRequest is request type for the Query/PublishedData RPC
 * method.
 */
export interface QueryPublishedDataRequest {
  metadataUri: string;
}

/**
 * QueryPublishedDataResponse is response type for the Query/PublishedData RPC
 * method.
 */
export interface QueryPublishedDataResponse {
  data: PublishedData | undefined;
}

/**
 * QueryAllPublishedDataRequest is request type for the
 * Query/AllPublishedData RPC method.
 */
export interface QueryAllPublishedDataRequest {
}

/**
 * QueryAllPublishedDataResponse is response type for the
 * Query/AllPublishedData RPC method.
 */
export interface QueryAllPublishedDataResponse {
  data: PublishedData[];
}

/**
 * QueryZkpProofThresholdRequest is request type for the
 * Query/ZkpProofThreshold RPC method.
 */
export interface QueryZkpProofThresholdRequest {
  shardCount: number;
}

/**
 * QueryZkpProofThresholdResponse is response type for the
 * Query/ZkpProofThreshold RPC method.
 */
export interface QueryZkpProofThresholdResponse {
  threshold: number;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryPublishedDataRequest(): QueryPublishedDataRequest {
  return { metadataUri: "" };
}

export const QueryPublishedDataRequest: MessageFns<QueryPublishedDataRequest> = {
  encode(message: QueryPublishedDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataUri !== "") {
      writer.uint32(10).string(message.metadataUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPublishedDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPublishedDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPublishedDataRequest {
    return { metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "" };
  },

  toJSON(message: QueryPublishedDataRequest): unknown {
    const obj: any = {};
    if (message.metadataUri !== "") {
      obj.metadataUri = message.metadataUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPublishedDataRequest>, I>>(base?: I): QueryPublishedDataRequest {
    return QueryPublishedDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPublishedDataRequest>, I>>(object: I): QueryPublishedDataRequest {
    const message = createBaseQueryPublishedDataRequest();
    message.metadataUri = object.metadataUri ?? "";
    return message;
  },
};

function createBaseQueryPublishedDataResponse(): QueryPublishedDataResponse {
  return { data: undefined };
}

export const QueryPublishedDataResponse: MessageFns<QueryPublishedDataResponse> = {
  encode(message: QueryPublishedDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      PublishedData.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPublishedDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPublishedDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = PublishedData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPublishedDataResponse {
    return { data: isSet(object.data) ? PublishedData.fromJSON(object.data) : undefined };
  },

  toJSON(message: QueryPublishedDataResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = PublishedData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryPublishedDataResponse>, I>>(base?: I): QueryPublishedDataResponse {
    return QueryPublishedDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryPublishedDataResponse>, I>>(object: I): QueryPublishedDataResponse {
    const message = createBaseQueryPublishedDataResponse();
    message.data = (object.data !== undefined && object.data !== null)
      ? PublishedData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseQueryAllPublishedDataRequest(): QueryAllPublishedDataRequest {
  return {};
}

export const QueryAllPublishedDataRequest: MessageFns<QueryAllPublishedDataRequest> = {
  encode(_: QueryAllPublishedDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPublishedDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPublishedDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllPublishedDataRequest {
    return {};
  },

  toJSON(_: QueryAllPublishedDataRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPublishedDataRequest>, I>>(base?: I): QueryAllPublishedDataRequest {
    return QueryAllPublishedDataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPublishedDataRequest>, I>>(_: I): QueryAllPublishedDataRequest {
    const message = createBaseQueryAllPublishedDataRequest();
    return message;
  },
};

function createBaseQueryAllPublishedDataResponse(): QueryAllPublishedDataResponse {
  return { data: [] };
}

export const QueryAllPublishedDataResponse: MessageFns<QueryAllPublishedDataResponse> = {
  encode(message: QueryAllPublishedDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      PublishedData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllPublishedDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllPublishedDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(PublishedData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllPublishedDataResponse {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => PublishedData.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryAllPublishedDataResponse): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => PublishedData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllPublishedDataResponse>, I>>(base?: I): QueryAllPublishedDataResponse {
    return QueryAllPublishedDataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllPublishedDataResponse>, I>>(
    object: I,
  ): QueryAllPublishedDataResponse {
    const message = createBaseQueryAllPublishedDataResponse();
    message.data = object.data?.map((e) => PublishedData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryZkpProofThresholdRequest(): QueryZkpProofThresholdRequest {
  return { shardCount: 0 };
}

export const QueryZkpProofThresholdRequest: MessageFns<QueryZkpProofThresholdRequest> = {
  encode(message: QueryZkpProofThresholdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shardCount !== 0) {
      writer.uint32(8).uint64(message.shardCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryZkpProofThresholdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryZkpProofThresholdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shardCount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryZkpProofThresholdRequest {
    return { shardCount: isSet(object.shardCount) ? globalThis.Number(object.shardCount) : 0 };
  },

  toJSON(message: QueryZkpProofThresholdRequest): unknown {
    const obj: any = {};
    if (message.shardCount !== 0) {
      obj.shardCount = Math.round(message.shardCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryZkpProofThresholdRequest>, I>>(base?: I): QueryZkpProofThresholdRequest {
    return QueryZkpProofThresholdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryZkpProofThresholdRequest>, I>>(
    object: I,
  ): QueryZkpProofThresholdRequest {
    const message = createBaseQueryZkpProofThresholdRequest();
    message.shardCount = object.shardCount ?? 0;
    return message;
  },
};

function createBaseQueryZkpProofThresholdResponse(): QueryZkpProofThresholdResponse {
  return { threshold: 0 };
}

export const QueryZkpProofThresholdResponse: MessageFns<QueryZkpProofThresholdResponse> = {
  encode(message: QueryZkpProofThresholdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threshold !== 0) {
      writer.uint32(16).uint64(message.threshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryZkpProofThresholdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryZkpProofThresholdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.threshold = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryZkpProofThresholdResponse {
    return { threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : 0 };
  },

  toJSON(message: QueryZkpProofThresholdResponse): unknown {
    const obj: any = {};
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryZkpProofThresholdResponse>, I>>(base?: I): QueryZkpProofThresholdResponse {
    return QueryZkpProofThresholdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryZkpProofThresholdResponse>, I>>(
    object: I,
  ): QueryZkpProofThresholdResponse {
    const message = createBaseQueryZkpProofThresholdResponse();
    message.threshold = object.threshold ?? 0;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Params queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** PublishedData queries published data */
  PublishedData(request: QueryPublishedDataRequest): Promise<QueryPublishedDataResponse>;
  /** AllPublishedData queries published data */
  AllPublishedData(request: QueryAllPublishedDataRequest): Promise<QueryAllPublishedDataResponse>;
  ZkpProofThreshold(request: QueryZkpProofThresholdRequest): Promise<QueryZkpProofThresholdResponse>;
}

export const QueryServiceName = "sunrise.da.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.PublishedData = this.PublishedData.bind(this);
    this.AllPublishedData = this.AllPublishedData.bind(this);
    this.ZkpProofThreshold = this.ZkpProofThreshold.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  PublishedData(request: QueryPublishedDataRequest): Promise<QueryPublishedDataResponse> {
    const data = QueryPublishedDataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PublishedData", data);
    return promise.then((data) => QueryPublishedDataResponse.decode(new BinaryReader(data)));
  }

  AllPublishedData(request: QueryAllPublishedDataRequest): Promise<QueryAllPublishedDataResponse> {
    const data = QueryAllPublishedDataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllPublishedData", data);
    return promise.then((data) => QueryAllPublishedDataResponse.decode(new BinaryReader(data)));
  }

  ZkpProofThreshold(request: QueryZkpProofThresholdRequest): Promise<QueryZkpProofThresholdResponse> {
    const data = QueryZkpProofThresholdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ZkpProofThreshold", data);
    return promise.then((data) => QueryZkpProofThresholdResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
