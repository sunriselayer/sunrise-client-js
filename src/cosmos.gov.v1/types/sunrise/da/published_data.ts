// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/da/published_data.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "sunrise.da";

export interface PublishedData {
  metadataUri: string;
  parityShardCount: number;
  shardDoubleHashes: Uint8Array[];
  timestamp:
    | Date
    | undefined;
  /** TODO: to be replaced with enum */
  status: string;
  publisher: string;
  challenger: string;
  collateral: Coin[];
  challengeTimestamp: Date | undefined;
  dataSourceInfo: string;
}

export interface Proof {
  metadataUri: string;
  sender: string;
  indices: number[];
  proofs: Uint8Array[];
  isValidData: boolean;
}

function createBasePublishedData(): PublishedData {
  return {
    metadataUri: "",
    parityShardCount: 0,
    shardDoubleHashes: [],
    timestamp: undefined,
    status: "",
    publisher: "",
    challenger: "",
    collateral: [],
    challengeTimestamp: undefined,
    dataSourceInfo: "",
  };
}

export const PublishedData: MessageFns<PublishedData> = {
  encode(message: PublishedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataUri !== "") {
      writer.uint32(10).string(message.metadataUri);
    }
    if (message.parityShardCount !== 0) {
      writer.uint32(16).uint64(message.parityShardCount);
    }
    for (const v of message.shardDoubleHashes) {
      writer.uint32(26).bytes(v!);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(34).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.publisher !== "") {
      writer.uint32(50).string(message.publisher);
    }
    if (message.challenger !== "") {
      writer.uint32(58).string(message.challenger);
    }
    for (const v of message.collateral) {
      Coin.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.challengeTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.challengeTimestamp), writer.uint32(74).fork()).join();
    }
    if (message.dataSourceInfo !== "") {
      writer.uint32(82).string(message.dataSourceInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PublishedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.parityShardCount = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shardDoubleHashes.push(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.publisher = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.challenger = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.collateral.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.challengeTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.dataSourceInfo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedData {
    return {
      metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "",
      parityShardCount: isSet(object.parityShardCount) ? globalThis.Number(object.parityShardCount) : 0,
      shardDoubleHashes: globalThis.Array.isArray(object?.shardDoubleHashes)
        ? object.shardDoubleHashes.map((e: any) => bytesFromBase64(e))
        : [],
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      publisher: isSet(object.publisher) ? globalThis.String(object.publisher) : "",
      challenger: isSet(object.challenger) ? globalThis.String(object.challenger) : "",
      collateral: globalThis.Array.isArray(object?.collateral)
        ? object.collateral.map((e: any) => Coin.fromJSON(e))
        : [],
      challengeTimestamp: isSet(object.challengeTimestamp) ? fromJsonTimestamp(object.challengeTimestamp) : undefined,
      dataSourceInfo: isSet(object.dataSourceInfo) ? globalThis.String(object.dataSourceInfo) : "",
    };
  },

  toJSON(message: PublishedData): unknown {
    const obj: any = {};
    if (message.metadataUri !== "") {
      obj.metadataUri = message.metadataUri;
    }
    if (message.parityShardCount !== 0) {
      obj.parityShardCount = Math.round(message.parityShardCount);
    }
    if (message.shardDoubleHashes?.length) {
      obj.shardDoubleHashes = message.shardDoubleHashes.map((e) => base64FromBytes(e));
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.publisher !== "") {
      obj.publisher = message.publisher;
    }
    if (message.challenger !== "") {
      obj.challenger = message.challenger;
    }
    if (message.collateral?.length) {
      obj.collateral = message.collateral.map((e) => Coin.toJSON(e));
    }
    if (message.challengeTimestamp !== undefined) {
      obj.challengeTimestamp = message.challengeTimestamp.toISOString();
    }
    if (message.dataSourceInfo !== "") {
      obj.dataSourceInfo = message.dataSourceInfo;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PublishedData>, I>>(base?: I): PublishedData {
    return PublishedData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PublishedData>, I>>(object: I): PublishedData {
    const message = createBasePublishedData();
    message.metadataUri = object.metadataUri ?? "";
    message.parityShardCount = object.parityShardCount ?? 0;
    message.shardDoubleHashes = object.shardDoubleHashes?.map((e) => e) || [];
    message.timestamp = object.timestamp ?? undefined;
    message.status = object.status ?? "";
    message.publisher = object.publisher ?? "";
    message.challenger = object.challenger ?? "";
    message.collateral = object.collateral?.map((e) => Coin.fromPartial(e)) || [];
    message.challengeTimestamp = object.challengeTimestamp ?? undefined;
    message.dataSourceInfo = object.dataSourceInfo ?? "";
    return message;
  },
};

function createBaseProof(): Proof {
  return { metadataUri: "", sender: "", indices: [], proofs: [], isValidData: false };
}

export const Proof: MessageFns<Proof> = {
  encode(message: Proof, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataUri !== "") {
      writer.uint32(10).string(message.metadataUri);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    writer.uint32(26).fork();
    for (const v of message.indices) {
      writer.int64(v);
    }
    writer.join();
    for (const v of message.proofs) {
      writer.uint32(34).bytes(v!);
    }
    if (message.isValidData !== false) {
      writer.uint32(40).bool(message.isValidData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proof {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.indices.push(longToNumber(reader.int64()));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.indices.push(longToNumber(reader.int64()));
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proofs.push(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isValidData = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proof {
    return {
      metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      indices: globalThis.Array.isArray(object?.indices) ? object.indices.map((e: any) => globalThis.Number(e)) : [],
      proofs: globalThis.Array.isArray(object?.proofs) ? object.proofs.map((e: any) => bytesFromBase64(e)) : [],
      isValidData: isSet(object.isValidData) ? globalThis.Boolean(object.isValidData) : false,
    };
  },

  toJSON(message: Proof): unknown {
    const obj: any = {};
    if (message.metadataUri !== "") {
      obj.metadataUri = message.metadataUri;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.indices?.length) {
      obj.indices = message.indices.map((e) => Math.round(e));
    }
    if (message.proofs?.length) {
      obj.proofs = message.proofs.map((e) => base64FromBytes(e));
    }
    if (message.isValidData !== false) {
      obj.isValidData = message.isValidData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Proof>, I>>(base?: I): Proof {
    return Proof.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Proof>, I>>(object: I): Proof {
    const message = createBaseProof();
    message.metadataUri = object.metadataUri ?? "";
    message.sender = object.sender ?? "";
    message.indices = object.indices?.map((e) => e) || [];
    message.proofs = object.proofs?.map((e) => e) || [];
    message.isValidData = object.isValidData ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
