// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/swap/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Params } from "./params";
import { Route, RouteResult } from "./route";

export const protobufPackage = "sunrise.swap";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgSwapExactAmountIn {
  sender: string;
  interfaceProvider: string;
  route: Route | undefined;
  amountIn: string;
  minAmountOut: string;
}

export interface MsgSwapExactAmountInResponse {
  result: RouteResult | undefined;
  interfaceProviderFee: string;
  amountOut: string;
}

export interface MsgSwapExactAmountOut {
  sender: string;
  interfaceProvider: string;
  route: Route | undefined;
  maxAmountIn: string;
  amountOut: string;
}

export interface MsgSwapExactAmountOutResponse {
  result: RouteResult | undefined;
  interfaceProviderFee: string;
  amountOut: string;
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgSwapExactAmountIn(): MsgSwapExactAmountIn {
  return { sender: "", interfaceProvider: "", route: undefined, amountIn: "", minAmountOut: "" };
}

export const MsgSwapExactAmountIn: MessageFns<MsgSwapExactAmountIn> = {
  encode(message: MsgSwapExactAmountIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.interfaceProvider !== "") {
      writer.uint32(18).string(message.interfaceProvider);
    }
    if (message.route !== undefined) {
      Route.encode(message.route, writer.uint32(26).fork()).join();
    }
    if (message.amountIn !== "") {
      writer.uint32(34).string(message.amountIn);
    }
    if (message.minAmountOut !== "") {
      writer.uint32(42).string(message.minAmountOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactAmountIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactAmountIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interfaceProvider = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.route = Route.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountIn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minAmountOut = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactAmountIn {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      interfaceProvider: isSet(object.interfaceProvider) ? globalThis.String(object.interfaceProvider) : "",
      route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
      amountIn: isSet(object.amountIn) ? globalThis.String(object.amountIn) : "",
      minAmountOut: isSet(object.minAmountOut) ? globalThis.String(object.minAmountOut) : "",
    };
  },

  toJSON(message: MsgSwapExactAmountIn): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.interfaceProvider !== "") {
      obj.interfaceProvider = message.interfaceProvider;
    }
    if (message.route !== undefined) {
      obj.route = Route.toJSON(message.route);
    }
    if (message.amountIn !== "") {
      obj.amountIn = message.amountIn;
    }
    if (message.minAmountOut !== "") {
      obj.minAmountOut = message.minAmountOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwapExactAmountIn>, I>>(base?: I): MsgSwapExactAmountIn {
    return MsgSwapExactAmountIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwapExactAmountIn>, I>>(object: I): MsgSwapExactAmountIn {
    const message = createBaseMsgSwapExactAmountIn();
    message.sender = object.sender ?? "";
    message.interfaceProvider = object.interfaceProvider ?? "";
    message.route = (object.route !== undefined && object.route !== null) ? Route.fromPartial(object.route) : undefined;
    message.amountIn = object.amountIn ?? "";
    message.minAmountOut = object.minAmountOut ?? "";
    return message;
  },
};

function createBaseMsgSwapExactAmountInResponse(): MsgSwapExactAmountInResponse {
  return { result: undefined, interfaceProviderFee: "", amountOut: "" };
}

export const MsgSwapExactAmountInResponse: MessageFns<MsgSwapExactAmountInResponse> = {
  encode(message: MsgSwapExactAmountInResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      RouteResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    if (message.interfaceProviderFee !== "") {
      writer.uint32(18).string(message.interfaceProviderFee);
    }
    if (message.amountOut !== "") {
      writer.uint32(26).string(message.amountOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactAmountInResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactAmountInResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = RouteResult.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interfaceProviderFee = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactAmountInResponse {
    return {
      result: isSet(object.result) ? RouteResult.fromJSON(object.result) : undefined,
      interfaceProviderFee: isSet(object.interfaceProviderFee) ? globalThis.String(object.interfaceProviderFee) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
    };
  },

  toJSON(message: MsgSwapExactAmountInResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = RouteResult.toJSON(message.result);
    }
    if (message.interfaceProviderFee !== "") {
      obj.interfaceProviderFee = message.interfaceProviderFee;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwapExactAmountInResponse>, I>>(base?: I): MsgSwapExactAmountInResponse {
    return MsgSwapExactAmountInResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwapExactAmountInResponse>, I>>(object: I): MsgSwapExactAmountInResponse {
    const message = createBaseMsgSwapExactAmountInResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? RouteResult.fromPartial(object.result)
      : undefined;
    message.interfaceProviderFee = object.interfaceProviderFee ?? "";
    message.amountOut = object.amountOut ?? "";
    return message;
  },
};

function createBaseMsgSwapExactAmountOut(): MsgSwapExactAmountOut {
  return { sender: "", interfaceProvider: "", route: undefined, maxAmountIn: "", amountOut: "" };
}

export const MsgSwapExactAmountOut: MessageFns<MsgSwapExactAmountOut> = {
  encode(message: MsgSwapExactAmountOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.interfaceProvider !== "") {
      writer.uint32(18).string(message.interfaceProvider);
    }
    if (message.route !== undefined) {
      Route.encode(message.route, writer.uint32(26).fork()).join();
    }
    if (message.maxAmountIn !== "") {
      writer.uint32(34).string(message.maxAmountIn);
    }
    if (message.amountOut !== "") {
      writer.uint32(42).string(message.amountOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactAmountOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactAmountOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interfaceProvider = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.route = Route.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.maxAmountIn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactAmountOut {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      interfaceProvider: isSet(object.interfaceProvider) ? globalThis.String(object.interfaceProvider) : "",
      route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
      maxAmountIn: isSet(object.maxAmountIn) ? globalThis.String(object.maxAmountIn) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
    };
  },

  toJSON(message: MsgSwapExactAmountOut): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.interfaceProvider !== "") {
      obj.interfaceProvider = message.interfaceProvider;
    }
    if (message.route !== undefined) {
      obj.route = Route.toJSON(message.route);
    }
    if (message.maxAmountIn !== "") {
      obj.maxAmountIn = message.maxAmountIn;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwapExactAmountOut>, I>>(base?: I): MsgSwapExactAmountOut {
    return MsgSwapExactAmountOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwapExactAmountOut>, I>>(object: I): MsgSwapExactAmountOut {
    const message = createBaseMsgSwapExactAmountOut();
    message.sender = object.sender ?? "";
    message.interfaceProvider = object.interfaceProvider ?? "";
    message.route = (object.route !== undefined && object.route !== null) ? Route.fromPartial(object.route) : undefined;
    message.maxAmountIn = object.maxAmountIn ?? "";
    message.amountOut = object.amountOut ?? "";
    return message;
  },
};

function createBaseMsgSwapExactAmountOutResponse(): MsgSwapExactAmountOutResponse {
  return { result: undefined, interfaceProviderFee: "", amountOut: "" };
}

export const MsgSwapExactAmountOutResponse: MessageFns<MsgSwapExactAmountOutResponse> = {
  encode(message: MsgSwapExactAmountOutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      RouteResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    if (message.interfaceProviderFee !== "") {
      writer.uint32(18).string(message.interfaceProviderFee);
    }
    if (message.amountOut !== "") {
      writer.uint32(26).string(message.amountOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactAmountOutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactAmountOutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = RouteResult.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interfaceProviderFee = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactAmountOutResponse {
    return {
      result: isSet(object.result) ? RouteResult.fromJSON(object.result) : undefined,
      interfaceProviderFee: isSet(object.interfaceProviderFee) ? globalThis.String(object.interfaceProviderFee) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
    };
  },

  toJSON(message: MsgSwapExactAmountOutResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = RouteResult.toJSON(message.result);
    }
    if (message.interfaceProviderFee !== "") {
      obj.interfaceProviderFee = message.interfaceProviderFee;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSwapExactAmountOutResponse>, I>>(base?: I): MsgSwapExactAmountOutResponse {
    return MsgSwapExactAmountOutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSwapExactAmountOutResponse>, I>>(
    object: I,
  ): MsgSwapExactAmountOutResponse {
    const message = createBaseMsgSwapExactAmountOutResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? RouteResult.fromPartial(object.result)
      : undefined;
    message.interfaceProviderFee = object.interfaceProviderFee ?? "";
    message.amountOut = object.amountOut ?? "";
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  SwapExactAmountIn(request: MsgSwapExactAmountIn): Promise<MsgSwapExactAmountInResponse>;
  SwapExactAmountOut(request: MsgSwapExactAmountOut): Promise<MsgSwapExactAmountOutResponse>;
}

export const MsgServiceName = "sunrise.swap.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.SwapExactAmountIn = this.SwapExactAmountIn.bind(this);
    this.SwapExactAmountOut = this.SwapExactAmountOut.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  SwapExactAmountIn(request: MsgSwapExactAmountIn): Promise<MsgSwapExactAmountInResponse> {
    const data = MsgSwapExactAmountIn.encode(request).finish();
    const promise = this.rpc.request(this.service, "SwapExactAmountIn", data);
    return promise.then((data) => MsgSwapExactAmountInResponse.decode(new BinaryReader(data)));
  }

  SwapExactAmountOut(request: MsgSwapExactAmountOut): Promise<MsgSwapExactAmountOutResponse> {
    const data = MsgSwapExactAmountOut.encode(request).finish();
    const promise = this.rpc.request(this.service, "SwapExactAmountOut", data);
    return promise.then((data) => MsgSwapExactAmountOutResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
