// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/da/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sunrise.da";

export interface Metadata {
  recoveredDataHash: Uint8Array;
  recoveredDataSize: number;
  shardSize: number;
  parityShardCount: number;
  shardUris: string[];
}

function createBaseMetadata(): Metadata {
  return {
    recoveredDataHash: new Uint8Array(0),
    recoveredDataSize: 0,
    shardSize: 0,
    parityShardCount: 0,
    shardUris: [],
  };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recoveredDataHash.length !== 0) {
      writer.uint32(10).bytes(message.recoveredDataHash);
    }
    if (message.recoveredDataSize !== 0) {
      writer.uint32(16).uint64(message.recoveredDataSize);
    }
    if (message.shardSize !== 0) {
      writer.uint32(24).uint64(message.shardSize);
    }
    if (message.parityShardCount !== 0) {
      writer.uint32(32).uint64(message.parityShardCount);
    }
    for (const v of message.shardUris) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recoveredDataHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.recoveredDataSize = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.shardSize = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.parityShardCount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shardUris.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      recoveredDataHash: isSet(object.recoveredDataHash)
        ? bytesFromBase64(object.recoveredDataHash)
        : new Uint8Array(0),
      recoveredDataSize: isSet(object.recoveredDataSize) ? globalThis.Number(object.recoveredDataSize) : 0,
      shardSize: isSet(object.shardSize) ? globalThis.Number(object.shardSize) : 0,
      parityShardCount: isSet(object.parityShardCount) ? globalThis.Number(object.parityShardCount) : 0,
      shardUris: globalThis.Array.isArray(object?.shardUris)
        ? object.shardUris.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.recoveredDataHash.length !== 0) {
      obj.recoveredDataHash = base64FromBytes(message.recoveredDataHash);
    }
    if (message.recoveredDataSize !== 0) {
      obj.recoveredDataSize = Math.round(message.recoveredDataSize);
    }
    if (message.shardSize !== 0) {
      obj.shardSize = Math.round(message.shardSize);
    }
    if (message.parityShardCount !== 0) {
      obj.parityShardCount = Math.round(message.parityShardCount);
    }
    if (message.shardUris?.length) {
      obj.shardUris = message.shardUris;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.recoveredDataHash = object.recoveredDataHash ?? new Uint8Array(0);
    message.recoveredDataSize = object.recoveredDataSize ?? 0;
    message.shardSize = object.shardSize ?? 0;
    message.parityShardCount = object.parityShardCount ?? 0;
    message.shardUris = object.shardUris?.map((e) => e) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
