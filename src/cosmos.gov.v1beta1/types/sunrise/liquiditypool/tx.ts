// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Params } from "./params";

export const protobufPackage = "sunrise.liquiditypool";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreatePool {
  authority: string;
  denomBase: string;
  denomQuote: string;
  feeRate: string;
  /** Basically 1.0001 */
  priceRatio: string;
  /** basically 0 and (-1,0]. In the 1:1 stable pair, -0.5 would work */
  baseOffset: string;
}

export interface MsgCreatePoolResponse {
  id: number;
}

export interface MsgCreatePosition {
  sender: string;
  poolId: number;
  lowerTick: number;
  upperTick: number;
  tokenBase: Coin | undefined;
  tokenQuote: Coin | undefined;
  minAmountBase: string;
  minAmountQuote: string;
}

export interface MsgCreatePositionResponse {
  id: number;
  amountBase: string;
  amountQuote: string;
  liquidity: string;
}

export interface MsgIncreaseLiquidity {
  sender: string;
  id: number;
  amountBase: string;
  amountQuote: string;
  minAmountBase: string;
  minAmountQuote: string;
}

export interface MsgIncreaseLiquidityResponse {
  positionId: number;
  amountBase: string;
  amountQuote: string;
}

export interface MsgDecreaseLiquidity {
  sender: string;
  id: number;
  liquidity: string;
}

export interface MsgDecreaseLiquidityResponse {
  amountBase: string;
  amountQuote: string;
}

export interface MsgClaimRewards {
  sender: string;
  positionIds: number[];
}

export interface MsgClaimRewardsResponse {
  collectedFees: Coin[];
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreatePool(): MsgCreatePool {
  return { authority: "", denomBase: "", denomQuote: "", feeRate: "", priceRatio: "", baseOffset: "" };
}

export const MsgCreatePool: MessageFns<MsgCreatePool> = {
  encode(message: MsgCreatePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denomBase !== "") {
      writer.uint32(18).string(message.denomBase);
    }
    if (message.denomQuote !== "") {
      writer.uint32(26).string(message.denomQuote);
    }
    if (message.feeRate !== "") {
      writer.uint32(34).string(message.feeRate);
    }
    if (message.priceRatio !== "") {
      writer.uint32(42).string(message.priceRatio);
    }
    if (message.baseOffset !== "") {
      writer.uint32(50).string(message.baseOffset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denomBase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denomQuote = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.priceRatio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.baseOffset = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePool {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      denomBase: isSet(object.denomBase) ? globalThis.String(object.denomBase) : "",
      denomQuote: isSet(object.denomQuote) ? globalThis.String(object.denomQuote) : "",
      feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "",
      priceRatio: isSet(object.priceRatio) ? globalThis.String(object.priceRatio) : "",
      baseOffset: isSet(object.baseOffset) ? globalThis.String(object.baseOffset) : "",
    };
  },

  toJSON(message: MsgCreatePool): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denomBase !== "") {
      obj.denomBase = message.denomBase;
    }
    if (message.denomQuote !== "") {
      obj.denomQuote = message.denomQuote;
    }
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    if (message.priceRatio !== "") {
      obj.priceRatio = message.priceRatio;
    }
    if (message.baseOffset !== "") {
      obj.baseOffset = message.baseOffset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePool>, I>>(base?: I): MsgCreatePool {
    return MsgCreatePool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePool>, I>>(object: I): MsgCreatePool {
    const message = createBaseMsgCreatePool();
    message.authority = object.authority ?? "";
    message.denomBase = object.denomBase ?? "";
    message.denomQuote = object.denomQuote ?? "";
    message.feeRate = object.feeRate ?? "";
    message.priceRatio = object.priceRatio ?? "";
    message.baseOffset = object.baseOffset ?? "";
    return message;
  },
};

function createBaseMsgCreatePoolResponse(): MsgCreatePoolResponse {
  return { id: 0 };
}

export const MsgCreatePoolResponse: MessageFns<MsgCreatePoolResponse> = {
  encode(message: MsgCreatePoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePoolResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: MsgCreatePoolResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePoolResponse>, I>>(base?: I): MsgCreatePoolResponse {
    return MsgCreatePoolResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePoolResponse>, I>>(object: I): MsgCreatePoolResponse {
    const message = createBaseMsgCreatePoolResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseMsgCreatePosition(): MsgCreatePosition {
  return {
    sender: "",
    poolId: 0,
    lowerTick: 0,
    upperTick: 0,
    tokenBase: undefined,
    tokenQuote: undefined,
    minAmountBase: "",
    minAmountQuote: "",
  };
}

export const MsgCreatePosition: MessageFns<MsgCreatePosition> = {
  encode(message: MsgCreatePosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint64(message.poolId);
    }
    if (message.lowerTick !== 0) {
      writer.uint32(24).int64(message.lowerTick);
    }
    if (message.upperTick !== 0) {
      writer.uint32(32).int64(message.upperTick);
    }
    if (message.tokenBase !== undefined) {
      Coin.encode(message.tokenBase, writer.uint32(42).fork()).join();
    }
    if (message.tokenQuote !== undefined) {
      Coin.encode(message.tokenQuote, writer.uint32(50).fork()).join();
    }
    if (message.minAmountBase !== "") {
      writer.uint32(58).string(message.minAmountBase);
    }
    if (message.minAmountQuote !== "") {
      writer.uint32(66).string(message.minAmountQuote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lowerTick = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.upperTick = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokenBase = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenQuote = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.minAmountBase = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.minAmountQuote = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePosition {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      lowerTick: isSet(object.lowerTick) ? globalThis.Number(object.lowerTick) : 0,
      upperTick: isSet(object.upperTick) ? globalThis.Number(object.upperTick) : 0,
      tokenBase: isSet(object.tokenBase) ? Coin.fromJSON(object.tokenBase) : undefined,
      tokenQuote: isSet(object.tokenQuote) ? Coin.fromJSON(object.tokenQuote) : undefined,
      minAmountBase: isSet(object.minAmountBase) ? globalThis.String(object.minAmountBase) : "",
      minAmountQuote: isSet(object.minAmountQuote) ? globalThis.String(object.minAmountQuote) : "",
    };
  },

  toJSON(message: MsgCreatePosition): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.lowerTick !== 0) {
      obj.lowerTick = Math.round(message.lowerTick);
    }
    if (message.upperTick !== 0) {
      obj.upperTick = Math.round(message.upperTick);
    }
    if (message.tokenBase !== undefined) {
      obj.tokenBase = Coin.toJSON(message.tokenBase);
    }
    if (message.tokenQuote !== undefined) {
      obj.tokenQuote = Coin.toJSON(message.tokenQuote);
    }
    if (message.minAmountBase !== "") {
      obj.minAmountBase = message.minAmountBase;
    }
    if (message.minAmountQuote !== "") {
      obj.minAmountQuote = message.minAmountQuote;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePosition>, I>>(base?: I): MsgCreatePosition {
    return MsgCreatePosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePosition>, I>>(object: I): MsgCreatePosition {
    const message = createBaseMsgCreatePosition();
    message.sender = object.sender ?? "";
    message.poolId = object.poolId ?? 0;
    message.lowerTick = object.lowerTick ?? 0;
    message.upperTick = object.upperTick ?? 0;
    message.tokenBase = (object.tokenBase !== undefined && object.tokenBase !== null)
      ? Coin.fromPartial(object.tokenBase)
      : undefined;
    message.tokenQuote = (object.tokenQuote !== undefined && object.tokenQuote !== null)
      ? Coin.fromPartial(object.tokenQuote)
      : undefined;
    message.minAmountBase = object.minAmountBase ?? "";
    message.minAmountQuote = object.minAmountQuote ?? "";
    return message;
  },
};

function createBaseMsgCreatePositionResponse(): MsgCreatePositionResponse {
  return { id: 0, amountBase: "", amountQuote: "", liquidity: "" };
}

export const MsgCreatePositionResponse: MessageFns<MsgCreatePositionResponse> = {
  encode(message: MsgCreatePositionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.amountBase !== "") {
      writer.uint32(18).string(message.amountBase);
    }
    if (message.amountQuote !== "") {
      writer.uint32(26).string(message.amountQuote);
    }
    if (message.liquidity !== "") {
      writer.uint32(34).string(message.liquidity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreatePositionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreatePositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amountBase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountQuote = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.liquidity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreatePositionResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      amountBase: isSet(object.amountBase) ? globalThis.String(object.amountBase) : "",
      amountQuote: isSet(object.amountQuote) ? globalThis.String(object.amountQuote) : "",
      liquidity: isSet(object.liquidity) ? globalThis.String(object.liquidity) : "",
    };
  },

  toJSON(message: MsgCreatePositionResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.amountBase !== "") {
      obj.amountBase = message.amountBase;
    }
    if (message.amountQuote !== "") {
      obj.amountQuote = message.amountQuote;
    }
    if (message.liquidity !== "") {
      obj.liquidity = message.liquidity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreatePositionResponse>, I>>(base?: I): MsgCreatePositionResponse {
    return MsgCreatePositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreatePositionResponse>, I>>(object: I): MsgCreatePositionResponse {
    const message = createBaseMsgCreatePositionResponse();
    message.id = object.id ?? 0;
    message.amountBase = object.amountBase ?? "";
    message.amountQuote = object.amountQuote ?? "";
    message.liquidity = object.liquidity ?? "";
    return message;
  },
};

function createBaseMsgIncreaseLiquidity(): MsgIncreaseLiquidity {
  return { sender: "", id: 0, amountBase: "", amountQuote: "", minAmountBase: "", minAmountQuote: "" };
}

export const MsgIncreaseLiquidity: MessageFns<MsgIncreaseLiquidity> = {
  encode(message: MsgIncreaseLiquidity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.amountBase !== "") {
      writer.uint32(26).string(message.amountBase);
    }
    if (message.amountQuote !== "") {
      writer.uint32(34).string(message.amountQuote);
    }
    if (message.minAmountBase !== "") {
      writer.uint32(42).string(message.minAmountBase);
    }
    if (message.minAmountQuote !== "") {
      writer.uint32(50).string(message.minAmountQuote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgIncreaseLiquidity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseLiquidity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountBase = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountQuote = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minAmountBase = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.minAmountQuote = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIncreaseLiquidity {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      amountBase: isSet(object.amountBase) ? globalThis.String(object.amountBase) : "",
      amountQuote: isSet(object.amountQuote) ? globalThis.String(object.amountQuote) : "",
      minAmountBase: isSet(object.minAmountBase) ? globalThis.String(object.minAmountBase) : "",
      minAmountQuote: isSet(object.minAmountQuote) ? globalThis.String(object.minAmountQuote) : "",
    };
  },

  toJSON(message: MsgIncreaseLiquidity): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.amountBase !== "") {
      obj.amountBase = message.amountBase;
    }
    if (message.amountQuote !== "") {
      obj.amountQuote = message.amountQuote;
    }
    if (message.minAmountBase !== "") {
      obj.minAmountBase = message.minAmountBase;
    }
    if (message.minAmountQuote !== "") {
      obj.minAmountQuote = message.minAmountQuote;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgIncreaseLiquidity>, I>>(base?: I): MsgIncreaseLiquidity {
    return MsgIncreaseLiquidity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidity>, I>>(object: I): MsgIncreaseLiquidity {
    const message = createBaseMsgIncreaseLiquidity();
    message.sender = object.sender ?? "";
    message.id = object.id ?? 0;
    message.amountBase = object.amountBase ?? "";
    message.amountQuote = object.amountQuote ?? "";
    message.minAmountBase = object.minAmountBase ?? "";
    message.minAmountQuote = object.minAmountQuote ?? "";
    return message;
  },
};

function createBaseMsgIncreaseLiquidityResponse(): MsgIncreaseLiquidityResponse {
  return { positionId: 0, amountBase: "", amountQuote: "" };
}

export const MsgIncreaseLiquidityResponse: MessageFns<MsgIncreaseLiquidityResponse> = {
  encode(message: MsgIncreaseLiquidityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).uint64(message.positionId);
    }
    if (message.amountBase !== "") {
      writer.uint32(18).string(message.amountBase);
    }
    if (message.amountQuote !== "") {
      writer.uint32(26).string(message.amountQuote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgIncreaseLiquidityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseLiquidityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.positionId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amountBase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountQuote = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIncreaseLiquidityResponse {
    return {
      positionId: isSet(object.positionId) ? globalThis.Number(object.positionId) : 0,
      amountBase: isSet(object.amountBase) ? globalThis.String(object.amountBase) : "",
      amountQuote: isSet(object.amountQuote) ? globalThis.String(object.amountQuote) : "",
    };
  },

  toJSON(message: MsgIncreaseLiquidityResponse): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.amountBase !== "") {
      obj.amountBase = message.amountBase;
    }
    if (message.amountQuote !== "") {
      obj.amountQuote = message.amountQuote;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgIncreaseLiquidityResponse>, I>>(base?: I): MsgIncreaseLiquidityResponse {
    return MsgIncreaseLiquidityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgIncreaseLiquidityResponse>, I>>(object: I): MsgIncreaseLiquidityResponse {
    const message = createBaseMsgIncreaseLiquidityResponse();
    message.positionId = object.positionId ?? 0;
    message.amountBase = object.amountBase ?? "";
    message.amountQuote = object.amountQuote ?? "";
    return message;
  },
};

function createBaseMsgDecreaseLiquidity(): MsgDecreaseLiquidity {
  return { sender: "", id: 0, liquidity: "" };
}

export const MsgDecreaseLiquidity: MessageFns<MsgDecreaseLiquidity> = {
  encode(message: MsgDecreaseLiquidity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.liquidity !== "") {
      writer.uint32(26).string(message.liquidity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDecreaseLiquidity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDecreaseLiquidity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.liquidity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDecreaseLiquidity {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      liquidity: isSet(object.liquidity) ? globalThis.String(object.liquidity) : "",
    };
  },

  toJSON(message: MsgDecreaseLiquidity): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.liquidity !== "") {
      obj.liquidity = message.liquidity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDecreaseLiquidity>, I>>(base?: I): MsgDecreaseLiquidity {
    return MsgDecreaseLiquidity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidity>, I>>(object: I): MsgDecreaseLiquidity {
    const message = createBaseMsgDecreaseLiquidity();
    message.sender = object.sender ?? "";
    message.id = object.id ?? 0;
    message.liquidity = object.liquidity ?? "";
    return message;
  },
};

function createBaseMsgDecreaseLiquidityResponse(): MsgDecreaseLiquidityResponse {
  return { amountBase: "", amountQuote: "" };
}

export const MsgDecreaseLiquidityResponse: MessageFns<MsgDecreaseLiquidityResponse> = {
  encode(message: MsgDecreaseLiquidityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amountBase !== "") {
      writer.uint32(10).string(message.amountBase);
    }
    if (message.amountQuote !== "") {
      writer.uint32(18).string(message.amountQuote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDecreaseLiquidityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDecreaseLiquidityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amountBase = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amountQuote = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDecreaseLiquidityResponse {
    return {
      amountBase: isSet(object.amountBase) ? globalThis.String(object.amountBase) : "",
      amountQuote: isSet(object.amountQuote) ? globalThis.String(object.amountQuote) : "",
    };
  },

  toJSON(message: MsgDecreaseLiquidityResponse): unknown {
    const obj: any = {};
    if (message.amountBase !== "") {
      obj.amountBase = message.amountBase;
    }
    if (message.amountQuote !== "") {
      obj.amountQuote = message.amountQuote;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgDecreaseLiquidityResponse>, I>>(base?: I): MsgDecreaseLiquidityResponse {
    return MsgDecreaseLiquidityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgDecreaseLiquidityResponse>, I>>(object: I): MsgDecreaseLiquidityResponse {
    const message = createBaseMsgDecreaseLiquidityResponse();
    message.amountBase = object.amountBase ?? "";
    message.amountQuote = object.amountQuote ?? "";
    return message;
  },
};

function createBaseMsgClaimRewards(): MsgClaimRewards {
  return { sender: "", positionIds: [] };
}

export const MsgClaimRewards: MessageFns<MsgClaimRewards> = {
  encode(message: MsgClaimRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    writer.uint32(18).fork();
    for (const v of message.positionIds) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.positionIds.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.positionIds.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaimRewards {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      positionIds: globalThis.Array.isArray(object?.positionIds)
        ? object.positionIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: MsgClaimRewards): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.positionIds?.length) {
      obj.positionIds = message.positionIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimRewards>, I>>(base?: I): MsgClaimRewards {
    return MsgClaimRewards.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimRewards>, I>>(object: I): MsgClaimRewards {
    const message = createBaseMsgClaimRewards();
    message.sender = object.sender ?? "";
    message.positionIds = object.positionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgClaimRewardsResponse(): MsgClaimRewardsResponse {
  return { collectedFees: [] };
}

export const MsgClaimRewardsResponse: MessageFns<MsgClaimRewardsResponse> = {
  encode(message: MsgClaimRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collectedFees) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectedFees.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaimRewardsResponse {
    return {
      collectedFees: globalThis.Array.isArray(object?.collectedFees)
        ? object.collectedFees.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgClaimRewardsResponse): unknown {
    const obj: any = {};
    if (message.collectedFees?.length) {
      obj.collectedFees = message.collectedFees.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimRewardsResponse>, I>>(base?: I): MsgClaimRewardsResponse {
    return MsgClaimRewardsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimRewardsResponse>, I>>(object: I): MsgClaimRewardsResponse {
    const message = createBaseMsgClaimRewardsResponse();
    message.collectedFees = object.collectedFees?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreatePool(request: MsgCreatePool): Promise<MsgCreatePoolResponse>;
  CreatePosition(request: MsgCreatePosition): Promise<MsgCreatePositionResponse>;
  IncreaseLiquidity(request: MsgIncreaseLiquidity): Promise<MsgIncreaseLiquidityResponse>;
  DecreaseLiquidity(request: MsgDecreaseLiquidity): Promise<MsgDecreaseLiquidityResponse>;
  ClaimRewards(request: MsgClaimRewards): Promise<MsgClaimRewardsResponse>;
}

export const MsgServiceName = "sunrise.liquiditypool.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreatePool = this.CreatePool.bind(this);
    this.CreatePosition = this.CreatePosition.bind(this);
    this.IncreaseLiquidity = this.IncreaseLiquidity.bind(this);
    this.DecreaseLiquidity = this.DecreaseLiquidity.bind(this);
    this.ClaimRewards = this.ClaimRewards.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreatePool(request: MsgCreatePool): Promise<MsgCreatePoolResponse> {
    const data = MsgCreatePool.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePool", data);
    return promise.then((data) => MsgCreatePoolResponse.decode(new BinaryReader(data)));
  }

  CreatePosition(request: MsgCreatePosition): Promise<MsgCreatePositionResponse> {
    const data = MsgCreatePosition.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePosition", data);
    return promise.then((data) => MsgCreatePositionResponse.decode(new BinaryReader(data)));
  }

  IncreaseLiquidity(request: MsgIncreaseLiquidity): Promise<MsgIncreaseLiquidityResponse> {
    const data = MsgIncreaseLiquidity.encode(request).finish();
    const promise = this.rpc.request(this.service, "IncreaseLiquidity", data);
    return promise.then((data) => MsgIncreaseLiquidityResponse.decode(new BinaryReader(data)));
  }

  DecreaseLiquidity(request: MsgDecreaseLiquidity): Promise<MsgDecreaseLiquidityResponse> {
    const data = MsgDecreaseLiquidity.encode(request).finish();
    const promise = this.rpc.request(this.service, "DecreaseLiquidity", data);
    return promise.then((data) => MsgDecreaseLiquidityResponse.decode(new BinaryReader(data)));
  }

  ClaimRewards(request: MsgClaimRewards): Promise<MsgClaimRewardsResponse> {
    const data = MsgClaimRewards.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClaimRewards", data);
    return promise.then((data) => MsgClaimRewardsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
