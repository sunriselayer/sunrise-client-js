// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/pool.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sunrise.liquiditypool";

export interface Pool {
  id: number;
  denomBase: string;
  denomQuote: string;
  feeRate: string;
  tickParams: TickParams | undefined;
  currentTick: number;
  currentTickLiquidity: string;
  currentSqrtPrice: string;
}

/** PriceRatio^(Tick - BaseOffSet) */
export interface TickParams {
  /** Basically 1.0001 */
  priceRatio: string;
  /** basically 0 and (-1,0]. In the 1:1 stable pair, -0.5 would work */
  baseOffset: string;
}

function createBasePool(): Pool {
  return {
    id: 0,
    denomBase: "",
    denomQuote: "",
    feeRate: "",
    tickParams: undefined,
    currentTick: 0,
    currentTickLiquidity: "",
    currentSqrtPrice: "",
  };
}

export const Pool: MessageFns<Pool> = {
  encode(message: Pool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.denomBase !== "") {
      writer.uint32(18).string(message.denomBase);
    }
    if (message.denomQuote !== "") {
      writer.uint32(26).string(message.denomQuote);
    }
    if (message.feeRate !== "") {
      writer.uint32(34).string(message.feeRate);
    }
    if (message.tickParams !== undefined) {
      TickParams.encode(message.tickParams, writer.uint32(42).fork()).join();
    }
    if (message.currentTick !== 0) {
      writer.uint32(48).int64(message.currentTick);
    }
    if (message.currentTickLiquidity !== "") {
      writer.uint32(58).string(message.currentTickLiquidity);
    }
    if (message.currentSqrtPrice !== "") {
      writer.uint32(66).string(message.currentSqrtPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denomBase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denomQuote = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tickParams = TickParams.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.currentTick = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.currentTickLiquidity = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.currentSqrtPrice = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pool {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      denomBase: isSet(object.denomBase) ? globalThis.String(object.denomBase) : "",
      denomQuote: isSet(object.denomQuote) ? globalThis.String(object.denomQuote) : "",
      feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "",
      tickParams: isSet(object.tickParams) ? TickParams.fromJSON(object.tickParams) : undefined,
      currentTick: isSet(object.currentTick) ? globalThis.Number(object.currentTick) : 0,
      currentTickLiquidity: isSet(object.currentTickLiquidity) ? globalThis.String(object.currentTickLiquidity) : "",
      currentSqrtPrice: isSet(object.currentSqrtPrice) ? globalThis.String(object.currentSqrtPrice) : "",
    };
  },

  toJSON(message: Pool): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.denomBase !== "") {
      obj.denomBase = message.denomBase;
    }
    if (message.denomQuote !== "") {
      obj.denomQuote = message.denomQuote;
    }
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    if (message.tickParams !== undefined) {
      obj.tickParams = TickParams.toJSON(message.tickParams);
    }
    if (message.currentTick !== 0) {
      obj.currentTick = Math.round(message.currentTick);
    }
    if (message.currentTickLiquidity !== "") {
      obj.currentTickLiquidity = message.currentTickLiquidity;
    }
    if (message.currentSqrtPrice !== "") {
      obj.currentSqrtPrice = message.currentSqrtPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pool>, I>>(base?: I): Pool {
    return Pool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pool>, I>>(object: I): Pool {
    const message = createBasePool();
    message.id = object.id ?? 0;
    message.denomBase = object.denomBase ?? "";
    message.denomQuote = object.denomQuote ?? "";
    message.feeRate = object.feeRate ?? "";
    message.tickParams = (object.tickParams !== undefined && object.tickParams !== null)
      ? TickParams.fromPartial(object.tickParams)
      : undefined;
    message.currentTick = object.currentTick ?? 0;
    message.currentTickLiquidity = object.currentTickLiquidity ?? "";
    message.currentSqrtPrice = object.currentSqrtPrice ?? "";
    return message;
  },
};

function createBaseTickParams(): TickParams {
  return { priceRatio: "", baseOffset: "" };
}

export const TickParams: MessageFns<TickParams> = {
  encode(message: TickParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.priceRatio !== "") {
      writer.uint32(10).string(message.priceRatio);
    }
    if (message.baseOffset !== "") {
      writer.uint32(18).string(message.baseOffset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TickParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTickParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.priceRatio = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseOffset = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TickParams {
    return {
      priceRatio: isSet(object.priceRatio) ? globalThis.String(object.priceRatio) : "",
      baseOffset: isSet(object.baseOffset) ? globalThis.String(object.baseOffset) : "",
    };
  },

  toJSON(message: TickParams): unknown {
    const obj: any = {};
    if (message.priceRatio !== "") {
      obj.priceRatio = message.priceRatio;
    }
    if (message.baseOffset !== "") {
      obj.baseOffset = message.baseOffset;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TickParams>, I>>(base?: I): TickParams {
    return TickParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TickParams>, I>>(object: I): TickParams {
    const message = createBaseTickParams();
    message.priceRatio = object.priceRatio ?? "";
    message.baseOffset = object.baseOffset ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
