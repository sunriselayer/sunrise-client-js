// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/accumulator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "sunrise.liquiditypool";

export interface AccumulatorObject {
  name: string;
  accumValue: DecCoin[];
  totalShares: string;
}

export interface AccumulatorPosition {
  name: string;
  index: string;
  numShares: string;
  accumValuePerShare: DecCoin[];
  unclaimedRewardsTotal: DecCoin[];
}

function createBaseAccumulatorObject(): AccumulatorObject {
  return { name: "", accumValue: [], totalShares: "" };
}

export const AccumulatorObject: MessageFns<AccumulatorObject> = {
  encode(message: AccumulatorObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.accumValue) {
      DecCoin.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.totalShares !== "") {
      writer.uint32(26).string(message.totalShares);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccumulatorObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulatorObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accumValue.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalShares = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccumulatorObject {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      accumValue: globalThis.Array.isArray(object?.accumValue)
        ? object.accumValue.map((e: any) => DecCoin.fromJSON(e))
        : [],
      totalShares: isSet(object.totalShares) ? globalThis.String(object.totalShares) : "",
    };
  },

  toJSON(message: AccumulatorObject): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.accumValue?.length) {
      obj.accumValue = message.accumValue.map((e) => DecCoin.toJSON(e));
    }
    if (message.totalShares !== "") {
      obj.totalShares = message.totalShares;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccumulatorObject>, I>>(base?: I): AccumulatorObject {
    return AccumulatorObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccumulatorObject>, I>>(object: I): AccumulatorObject {
    const message = createBaseAccumulatorObject();
    message.name = object.name ?? "";
    message.accumValue = object.accumValue?.map((e) => DecCoin.fromPartial(e)) || [];
    message.totalShares = object.totalShares ?? "";
    return message;
  },
};

function createBaseAccumulatorPosition(): AccumulatorPosition {
  return { name: "", index: "", numShares: "", accumValuePerShare: [], unclaimedRewardsTotal: [] };
}

export const AccumulatorPosition: MessageFns<AccumulatorPosition> = {
  encode(message: AccumulatorPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.index !== "") {
      writer.uint32(18).string(message.index);
    }
    if (message.numShares !== "") {
      writer.uint32(26).string(message.numShares);
    }
    for (const v of message.accumValuePerShare) {
      DecCoin.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.unclaimedRewardsTotal) {
      DecCoin.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccumulatorPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulatorPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.index = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.numShares = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accumValuePerShare.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unclaimedRewardsTotal.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccumulatorPosition {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      index: isSet(object.index) ? globalThis.String(object.index) : "",
      numShares: isSet(object.numShares) ? globalThis.String(object.numShares) : "",
      accumValuePerShare: globalThis.Array.isArray(object?.accumValuePerShare)
        ? object.accumValuePerShare.map((e: any) => DecCoin.fromJSON(e))
        : [],
      unclaimedRewardsTotal: globalThis.Array.isArray(object?.unclaimedRewardsTotal)
        ? object.unclaimedRewardsTotal.map((e: any) => DecCoin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AccumulatorPosition): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.index !== "") {
      obj.index = message.index;
    }
    if (message.numShares !== "") {
      obj.numShares = message.numShares;
    }
    if (message.accumValuePerShare?.length) {
      obj.accumValuePerShare = message.accumValuePerShare.map((e) => DecCoin.toJSON(e));
    }
    if (message.unclaimedRewardsTotal?.length) {
      obj.unclaimedRewardsTotal = message.unclaimedRewardsTotal.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccumulatorPosition>, I>>(base?: I): AccumulatorPosition {
    return AccumulatorPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccumulatorPosition>, I>>(object: I): AccumulatorPosition {
    const message = createBaseAccumulatorPosition();
    message.name = object.name ?? "";
    message.index = object.index ?? "";
    message.numShares = object.numShares ?? "";
    message.accumValuePerShare = object.accumValuePerShare?.map((e) => DecCoin.fromPartial(e)) || [];
    message.unclaimedRewardsTotal = object.unclaimedRewardsTotal?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
