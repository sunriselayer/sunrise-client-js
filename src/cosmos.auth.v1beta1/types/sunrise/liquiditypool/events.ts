// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "sunrise.liquiditypool";

export interface EventSetPool {
  poolId: number;
  denomBase: string;
  denomQuote: string;
  feeRate: string;
  priceRatio: string;
  baseOffset: string;
  currentTick: number;
  currentTickLiquidity: string;
  currentSqrtPrice: string;
}

export interface EventRemovePool {
  poolId: number;
}

export interface EventSetPosition {
  positionId: number;
  address: string;
  poolId: number;
  lowerTick: number;
  upperTick: number;
  liquidity: string;
}

export interface EventRemovePosition {
  positionId: number;
}

export interface EventCollectFees {
  address: string;
  positionId: number;
  collectedFees: Coin[];
}

export interface EventSwapExactAmountIn {
  address: string;
  poolId: number;
  denomIn: string;
  amountIn: string;
  denomOut: string;
  amountOut: string;
  feeEnabled: boolean;
}

export interface EventSwapExactAmountOut {
  address: string;
  poolId: number;
  denomOut: string;
  amountOut: string;
  denomIn: string;
  amountIn: string;
  feeEnabled: boolean;
}

function createBaseEventSetPool(): EventSetPool {
  return {
    poolId: 0,
    denomBase: "",
    denomQuote: "",
    feeRate: "",
    priceRatio: "",
    baseOffset: "",
    currentTick: 0,
    currentTickLiquidity: "",
    currentSqrtPrice: "",
  };
}

export const EventSetPool: MessageFns<EventSetPool> = {
  encode(message: EventSetPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.denomBase !== "") {
      writer.uint32(18).string(message.denomBase);
    }
    if (message.denomQuote !== "") {
      writer.uint32(26).string(message.denomQuote);
    }
    if (message.feeRate !== "") {
      writer.uint32(34).string(message.feeRate);
    }
    if (message.priceRatio !== "") {
      writer.uint32(42).string(message.priceRatio);
    }
    if (message.baseOffset !== "") {
      writer.uint32(50).string(message.baseOffset);
    }
    if (message.currentTick !== 0) {
      writer.uint32(56).int64(message.currentTick);
    }
    if (message.currentTickLiquidity !== "") {
      writer.uint32(66).string(message.currentTickLiquidity);
    }
    if (message.currentSqrtPrice !== "") {
      writer.uint32(74).string(message.currentSqrtPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSetPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denomBase = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denomQuote = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feeRate = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.priceRatio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.baseOffset = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.currentTick = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.currentTickLiquidity = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.currentSqrtPrice = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSetPool {
    return {
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      denomBase: isSet(object.denomBase) ? globalThis.String(object.denomBase) : "",
      denomQuote: isSet(object.denomQuote) ? globalThis.String(object.denomQuote) : "",
      feeRate: isSet(object.feeRate) ? globalThis.String(object.feeRate) : "",
      priceRatio: isSet(object.priceRatio) ? globalThis.String(object.priceRatio) : "",
      baseOffset: isSet(object.baseOffset) ? globalThis.String(object.baseOffset) : "",
      currentTick: isSet(object.currentTick) ? globalThis.Number(object.currentTick) : 0,
      currentTickLiquidity: isSet(object.currentTickLiquidity) ? globalThis.String(object.currentTickLiquidity) : "",
      currentSqrtPrice: isSet(object.currentSqrtPrice) ? globalThis.String(object.currentSqrtPrice) : "",
    };
  },

  toJSON(message: EventSetPool): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.denomBase !== "") {
      obj.denomBase = message.denomBase;
    }
    if (message.denomQuote !== "") {
      obj.denomQuote = message.denomQuote;
    }
    if (message.feeRate !== "") {
      obj.feeRate = message.feeRate;
    }
    if (message.priceRatio !== "") {
      obj.priceRatio = message.priceRatio;
    }
    if (message.baseOffset !== "") {
      obj.baseOffset = message.baseOffset;
    }
    if (message.currentTick !== 0) {
      obj.currentTick = Math.round(message.currentTick);
    }
    if (message.currentTickLiquidity !== "") {
      obj.currentTickLiquidity = message.currentTickLiquidity;
    }
    if (message.currentSqrtPrice !== "") {
      obj.currentSqrtPrice = message.currentSqrtPrice;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSetPool>, I>>(base?: I): EventSetPool {
    return EventSetPool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSetPool>, I>>(object: I): EventSetPool {
    const message = createBaseEventSetPool();
    message.poolId = object.poolId ?? 0;
    message.denomBase = object.denomBase ?? "";
    message.denomQuote = object.denomQuote ?? "";
    message.feeRate = object.feeRate ?? "";
    message.priceRatio = object.priceRatio ?? "";
    message.baseOffset = object.baseOffset ?? "";
    message.currentTick = object.currentTick ?? 0;
    message.currentTickLiquidity = object.currentTickLiquidity ?? "";
    message.currentSqrtPrice = object.currentSqrtPrice ?? "";
    return message;
  },
};

function createBaseEventRemovePool(): EventRemovePool {
  return { poolId: 0 };
}

export const EventRemovePool: MessageFns<EventRemovePool> = {
  encode(message: EventRemovePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint64(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRemovePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRemovePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRemovePool {
    return { poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0 };
  },

  toJSON(message: EventRemovePool): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRemovePool>, I>>(base?: I): EventRemovePool {
    return EventRemovePool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRemovePool>, I>>(object: I): EventRemovePool {
    const message = createBaseEventRemovePool();
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseEventSetPosition(): EventSetPosition {
  return { positionId: 0, address: "", poolId: 0, lowerTick: 0, upperTick: 0, liquidity: "" };
}

export const EventSetPosition: MessageFns<EventSetPosition> = {
  encode(message: EventSetPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).uint64(message.positionId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.poolId !== 0) {
      writer.uint32(24).uint64(message.poolId);
    }
    if (message.lowerTick !== 0) {
      writer.uint32(32).int64(message.lowerTick);
    }
    if (message.upperTick !== 0) {
      writer.uint32(40).int64(message.upperTick);
    }
    if (message.liquidity !== "") {
      writer.uint32(50).string(message.liquidity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSetPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.positionId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lowerTick = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.upperTick = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.liquidity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSetPosition {
    return {
      positionId: isSet(object.positionId) ? globalThis.Number(object.positionId) : 0,
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      lowerTick: isSet(object.lowerTick) ? globalThis.Number(object.lowerTick) : 0,
      upperTick: isSet(object.upperTick) ? globalThis.Number(object.upperTick) : 0,
      liquidity: isSet(object.liquidity) ? globalThis.String(object.liquidity) : "",
    };
  },

  toJSON(message: EventSetPosition): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.lowerTick !== 0) {
      obj.lowerTick = Math.round(message.lowerTick);
    }
    if (message.upperTick !== 0) {
      obj.upperTick = Math.round(message.upperTick);
    }
    if (message.liquidity !== "") {
      obj.liquidity = message.liquidity;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSetPosition>, I>>(base?: I): EventSetPosition {
    return EventSetPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSetPosition>, I>>(object: I): EventSetPosition {
    const message = createBaseEventSetPosition();
    message.positionId = object.positionId ?? 0;
    message.address = object.address ?? "";
    message.poolId = object.poolId ?? 0;
    message.lowerTick = object.lowerTick ?? 0;
    message.upperTick = object.upperTick ?? 0;
    message.liquidity = object.liquidity ?? "";
    return message;
  },
};

function createBaseEventRemovePosition(): EventRemovePosition {
  return { positionId: 0 };
}

export const EventRemovePosition: MessageFns<EventRemovePosition> = {
  encode(message: EventRemovePosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).uint64(message.positionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventRemovePosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventRemovePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.positionId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventRemovePosition {
    return { positionId: isSet(object.positionId) ? globalThis.Number(object.positionId) : 0 };
  },

  toJSON(message: EventRemovePosition): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventRemovePosition>, I>>(base?: I): EventRemovePosition {
    return EventRemovePosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventRemovePosition>, I>>(object: I): EventRemovePosition {
    const message = createBaseEventRemovePosition();
    message.positionId = object.positionId ?? 0;
    return message;
  },
};

function createBaseEventCollectFees(): EventCollectFees {
  return { address: "", positionId: 0, collectedFees: [] };
}

export const EventCollectFees: MessageFns<EventCollectFees> = {
  encode(message: EventCollectFees, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.positionId !== 0) {
      writer.uint32(16).uint64(message.positionId);
    }
    for (const v of message.collectedFees) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventCollectFees {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventCollectFees();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.positionId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.collectedFees.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventCollectFees {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      positionId: isSet(object.positionId) ? globalThis.Number(object.positionId) : 0,
      collectedFees: globalThis.Array.isArray(object?.collectedFees)
        ? object.collectedFees.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EventCollectFees): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.collectedFees?.length) {
      obj.collectedFees = message.collectedFees.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventCollectFees>, I>>(base?: I): EventCollectFees {
    return EventCollectFees.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventCollectFees>, I>>(object: I): EventCollectFees {
    const message = createBaseEventCollectFees();
    message.address = object.address ?? "";
    message.positionId = object.positionId ?? 0;
    message.collectedFees = object.collectedFees?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEventSwapExactAmountIn(): EventSwapExactAmountIn {
  return { address: "", poolId: 0, denomIn: "", amountIn: "", denomOut: "", amountOut: "", feeEnabled: false };
}

export const EventSwapExactAmountIn: MessageFns<EventSwapExactAmountIn> = {
  encode(message: EventSwapExactAmountIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint64(message.poolId);
    }
    if (message.denomIn !== "") {
      writer.uint32(26).string(message.denomIn);
    }
    if (message.amountIn !== "") {
      writer.uint32(34).string(message.amountIn);
    }
    if (message.denomOut !== "") {
      writer.uint32(42).string(message.denomOut);
    }
    if (message.amountOut !== "") {
      writer.uint32(50).string(message.amountOut);
    }
    if (message.feeEnabled !== false) {
      writer.uint32(56).bool(message.feeEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSwapExactAmountIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSwapExactAmountIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denomIn = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountIn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.denomOut = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.feeEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSwapExactAmountIn {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      denomIn: isSet(object.denomIn) ? globalThis.String(object.denomIn) : "",
      amountIn: isSet(object.amountIn) ? globalThis.String(object.amountIn) : "",
      denomOut: isSet(object.denomOut) ? globalThis.String(object.denomOut) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
      feeEnabled: isSet(object.feeEnabled) ? globalThis.Boolean(object.feeEnabled) : false,
    };
  },

  toJSON(message: EventSwapExactAmountIn): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.denomIn !== "") {
      obj.denomIn = message.denomIn;
    }
    if (message.amountIn !== "") {
      obj.amountIn = message.amountIn;
    }
    if (message.denomOut !== "") {
      obj.denomOut = message.denomOut;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    if (message.feeEnabled !== false) {
      obj.feeEnabled = message.feeEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSwapExactAmountIn>, I>>(base?: I): EventSwapExactAmountIn {
    return EventSwapExactAmountIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSwapExactAmountIn>, I>>(object: I): EventSwapExactAmountIn {
    const message = createBaseEventSwapExactAmountIn();
    message.address = object.address ?? "";
    message.poolId = object.poolId ?? 0;
    message.denomIn = object.denomIn ?? "";
    message.amountIn = object.amountIn ?? "";
    message.denomOut = object.denomOut ?? "";
    message.amountOut = object.amountOut ?? "";
    message.feeEnabled = object.feeEnabled ?? false;
    return message;
  },
};

function createBaseEventSwapExactAmountOut(): EventSwapExactAmountOut {
  return { address: "", poolId: 0, denomOut: "", amountOut: "", denomIn: "", amountIn: "", feeEnabled: false };
}

export const EventSwapExactAmountOut: MessageFns<EventSwapExactAmountOut> = {
  encode(message: EventSwapExactAmountOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint64(message.poolId);
    }
    if (message.denomOut !== "") {
      writer.uint32(26).string(message.denomOut);
    }
    if (message.amountOut !== "") {
      writer.uint32(34).string(message.amountOut);
    }
    if (message.denomIn !== "") {
      writer.uint32(42).string(message.denomIn);
    }
    if (message.amountIn !== "") {
      writer.uint32(50).string(message.amountIn);
    }
    if (message.feeEnabled !== false) {
      writer.uint32(56).bool(message.feeEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSwapExactAmountOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSwapExactAmountOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denomOut = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.denomIn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.amountIn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.feeEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSwapExactAmountOut {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      denomOut: isSet(object.denomOut) ? globalThis.String(object.denomOut) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
      denomIn: isSet(object.denomIn) ? globalThis.String(object.denomIn) : "",
      amountIn: isSet(object.amountIn) ? globalThis.String(object.amountIn) : "",
      feeEnabled: isSet(object.feeEnabled) ? globalThis.Boolean(object.feeEnabled) : false,
    };
  },

  toJSON(message: EventSwapExactAmountOut): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.denomOut !== "") {
      obj.denomOut = message.denomOut;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    if (message.denomIn !== "") {
      obj.denomIn = message.denomIn;
    }
    if (message.amountIn !== "") {
      obj.amountIn = message.amountIn;
    }
    if (message.feeEnabled !== false) {
      obj.feeEnabled = message.feeEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSwapExactAmountOut>, I>>(base?: I): EventSwapExactAmountOut {
    return EventSwapExactAmountOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSwapExactAmountOut>, I>>(object: I): EventSwapExactAmountOut {
    const message = createBaseEventSwapExactAmountOut();
    message.address = object.address ?? "";
    message.poolId = object.poolId ?? 0;
    message.denomOut = object.denomOut ?? "";
    message.amountOut = object.amountOut ?? "";
    message.denomIn = object.denomIn ?? "";
    message.amountIn = object.amountIn ?? "";
    message.feeEnabled = object.feeEnabled ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
