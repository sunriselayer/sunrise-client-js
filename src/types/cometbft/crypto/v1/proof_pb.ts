// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file cometbft/crypto/v1/proof.proto (package cometbft.crypto.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cometbft/crypto/v1/proof.proto.
 */
export const file_cometbft_crypto_v1_proof: GenFile = /*@__PURE__*/
  fileDesc("Ch5jb21ldGJmdC9jcnlwdG8vdjEvcHJvb2YucHJvdG8SEmNvbWV0YmZ0LmNyeXB0by52MSJHCgVQcm9vZhINCgV0b3RhbBgBIAEoAxINCgVpbmRleBgCIAEoAxIRCglsZWFmX2hhc2gYAyABKAwSDQoFYXVudHMYBCADKAwiQAoHVmFsdWVPcBILCgNrZXkYASABKAwSKAoFcHJvb2YYAiABKAsyGS5jb21ldGJmdC5jcnlwdG8udjEuUHJvb2YiNgoIRG9taW5vT3ASCwoDa2V5GAEgASgJEg0KBWlucHV0GAIgASgJEg4KBm91dHB1dBgDIAEoCSIyCgdQcm9vZk9wEgwKBHR5cGUYASABKAkSCwoDa2V5GAIgASgMEgwKBGRhdGEYAyABKAwiOgoIUHJvb2ZPcHMSLgoDb3BzGAEgAygLMhsuY29tZXRiZnQuY3J5cHRvLnYxLlByb29mT3BCBMjeHwBCwwEKFmNvbS5jb21ldGJmdC5jcnlwdG8udjFCClByb29mUHJvdG9QAVozZ2l0aHViLmNvbS9jb21ldGJmdC9jb21ldGJmdC9hcGkvY29tZXRiZnQvY3J5cHRvL3YxogIDQ0NYqgISQ29tZXRiZnQuQ3J5cHRvLlYxygISQ29tZXRiZnRcQ3J5cHRvXFYx4gIeQ29tZXRiZnRcQ3J5cHRvXFYxXEdQQk1ldGFkYXRh6gIUQ29tZXRiZnQ6OkNyeXB0bzo6VjFiBnByb3RvMw", [file_gogoproto_gogo]);

/**
 * Proof is a Merkle proof.
 *
 * @generated from message cometbft.crypto.v1.Proof
 */
export type Proof = Message<"cometbft.crypto.v1.Proof"> & {
  /**
   * @generated from field: int64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: int64 index = 2;
   */
  index: bigint;

  /**
   * @generated from field: bytes leaf_hash = 3;
   */
  leafHash: Uint8Array;

  /**
   * @generated from field: repeated bytes aunts = 4;
   */
  aunts: Uint8Array[];
};

/**
 * Describes the message cometbft.crypto.v1.Proof.
 * Use `create(ProofSchema)` to create a new message.
 */
export const ProofSchema: GenMessage<Proof> = /*@__PURE__*/
  messageDesc(file_cometbft_crypto_v1_proof, 0);

/**
 * ValueOp is a Merkle proof for a single key.
 *
 * @generated from message cometbft.crypto.v1.ValueOp
 */
export type ValueOp = Message<"cometbft.crypto.v1.ValueOp"> & {
  /**
   * Encoded in ProofOp.Key.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;

  /**
   * To encode in ProofOp.Data
   *
   * @generated from field: cometbft.crypto.v1.Proof proof = 2;
   */
  proof?: Proof;
};

/**
 * Describes the message cometbft.crypto.v1.ValueOp.
 * Use `create(ValueOpSchema)` to create a new message.
 */
export const ValueOpSchema: GenMessage<ValueOp> = /*@__PURE__*/
  messageDesc(file_cometbft_crypto_v1_proof, 1);

/**
 * DominoOp always returns the given output.
 *
 * @generated from message cometbft.crypto.v1.DominoOp
 */
export type DominoOp = Message<"cometbft.crypto.v1.DominoOp"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string input = 2;
   */
  input: string;

  /**
   * @generated from field: string output = 3;
   */
  output: string;
};

/**
 * Describes the message cometbft.crypto.v1.DominoOp.
 * Use `create(DominoOpSchema)` to create a new message.
 */
export const DominoOpSchema: GenMessage<DominoOp> = /*@__PURE__*/
  messageDesc(file_cometbft_crypto_v1_proof, 2);

/**
 * ProofOp defines an operation used for calculating Merkle root
 * The data could be arbitrary format, providing necessary data
 * for example neighbouring node hash
 *
 * @generated from message cometbft.crypto.v1.ProofOp
 */
export type ProofOp = Message<"cometbft.crypto.v1.ProofOp"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: bytes key = 2;
   */
  key: Uint8Array;

  /**
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * Describes the message cometbft.crypto.v1.ProofOp.
 * Use `create(ProofOpSchema)` to create a new message.
 */
export const ProofOpSchema: GenMessage<ProofOp> = /*@__PURE__*/
  messageDesc(file_cometbft_crypto_v1_proof, 3);

/**
 * ProofOps is Merkle proof defined by the list of ProofOps
 *
 * @generated from message cometbft.crypto.v1.ProofOps
 */
export type ProofOps = Message<"cometbft.crypto.v1.ProofOps"> & {
  /**
   * @generated from field: repeated cometbft.crypto.v1.ProofOp ops = 1;
   */
  ops: ProofOp[];
};

/**
 * Describes the message cometbft.crypto.v1.ProofOps.
 * Use `create(ProofOpsSchema)` to create a new message.
 */
export const ProofOpsSchema: GenMessage<ProofOps> = /*@__PURE__*/
  messageDesc(file_cometbft_crypto_v1_proof, 4);

