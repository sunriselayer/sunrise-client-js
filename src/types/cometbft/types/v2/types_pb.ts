// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file cometbft/types/v2/types.proto (package cometbft.types.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Proof } from "../../crypto/v1/proof_pb";
import { file_cometbft_crypto_v1_proof } from "../../crypto/v1/proof_pb";
import type { BlockIDFlag, ValidatorSet } from "./validator_pb";
import { file_cometbft_types_v2_validator } from "./validator_pb";
import type { Consensus } from "../../version/v1/types_pb";
import { file_cometbft_version_v1_types } from "../../version/v1/types_pb";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cometbft/types/v2/types.proto.
 */
export const file_cometbft_types_v2_types: GenFile = /*@__PURE__*/
  fileDesc("Ch1jb21ldGJmdC90eXBlcy92Mi90eXBlcy5wcm90bxIRY29tZXRiZnQudHlwZXMudjIiLAoNUGFydFNldEhlYWRlchINCgV0b3RhbBgBIAEoDRIMCgRoYXNoGAIgASgMIlQKBFBhcnQSDQoFaW5kZXgYASABKA0SDQoFYnl0ZXMYAiABKAwSLgoFcHJvb2YYAyABKAsyGS5jb21ldGJmdC5jcnlwdG8udjEuUHJvb2ZCBMjeHwAiWAoHQmxvY2tJRBIMCgRoYXNoGAEgASgMEj8KD3BhcnRfc2V0X2hlYWRlchgCIAEoCzIgLmNvbWV0YmZ0LnR5cGVzLnYyLlBhcnRTZXRIZWFkZXJCBMjeHwAitQMKBkhlYWRlchI1Cgd2ZXJzaW9uGAEgASgLMh4uY29tZXRiZnQudmVyc2lvbi52MS5Db25zZW5zdXNCBMjeHwASHQoIY2hhaW5faWQYAiABKAlCC+LeHwdDaGFpbklEEg4KBmhlaWdodBgDIAEoAxIyCgR0aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIyN4fAJDfHwESNwoNbGFzdF9ibG9ja19pZBgFIAEoCzIaLmNvbWV0YmZ0LnR5cGVzLnYyLkJsb2NrSURCBMjeHwASGAoQbGFzdF9jb21taXRfaGFzaBgGIAEoDBIRCglkYXRhX2hhc2gYByABKAwSFwoPdmFsaWRhdG9yc19oYXNoGAggASgMEhwKFG5leHRfdmFsaWRhdG9yc19oYXNoGAkgASgMEhYKDmNvbnNlbnN1c19oYXNoGAogASgMEhAKCGFwcF9oYXNoGAsgASgMEhkKEWxhc3RfcmVzdWx0c19oYXNoGAwgASgMEhUKDWV2aWRlbmNlX2hhc2gYDSABKAwSGAoQcHJvcG9zZXJfYWRkcmVzcxgOIAEoDCITCgREYXRhEgsKA3R4cxgBIAMoDCKCAwoEVm90ZRIuCgR0eXBlGAEgASgOMiAuY29tZXRiZnQudHlwZXMudjIuU2lnbmVkTXNnVHlwZRIOCgZoZWlnaHQYAiABKAMSDQoFcm91bmQYAyABKAUSPQoIYmxvY2tfaWQYBCABKAsyGi5jb21ldGJmdC50eXBlcy52Mi5CbG9ja0lEQg/I3h8A4t4fB0Jsb2NrSUQSNwoJdGltZXN0YW1wGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIyN4fAJDfHwESGQoRdmFsaWRhdG9yX2FkZHJlc3MYBiABKAwSFwoPdmFsaWRhdG9yX2luZGV4GAcgASgFEhEKCXNpZ25hdHVyZRgIIAEoDBIRCglleHRlbnNpb24YCSABKAwSGwoTZXh0ZW5zaW9uX3NpZ25hdHVyZRgKIAEoDBIYChBub25fcnBfZXh0ZW5zaW9uGAsgASgMEiIKGm5vbl9ycF9leHRlbnNpb25fc2lnbmF0dXJlGAwgASgMIp4BCgZDb21taXQSDgoGaGVpZ2h0GAEgASgDEg0KBXJvdW5kGAIgASgFEj0KCGJsb2NrX2lkGAMgASgLMhouY29tZXRiZnQudHlwZXMudjIuQmxvY2tJREIPyN4fAOLeHwdCbG9ja0lEEjYKCnNpZ25hdHVyZXMYBCADKAsyHC5jb21ldGJmdC50eXBlcy52Mi5Db21taXRTaWdCBMjeHwAiqQEKCUNvbW1pdFNpZxI1Cg1ibG9ja19pZF9mbGFnGAEgASgOMh4uY29tZXRiZnQudHlwZXMudjIuQmxvY2tJREZsYWcSGQoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAwSNwoJdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIyN4fAJDfHwESEQoJc2lnbmF0dXJlGAQgASgMIrcBCg5FeHRlbmRlZENvbW1pdBIOCgZoZWlnaHQYASABKAMSDQoFcm91bmQYAiABKAUSPQoIYmxvY2tfaWQYAyABKAsyGi5jb21ldGJmdC50eXBlcy52Mi5CbG9ja0lEQg/I3h8A4t4fB0Jsb2NrSUQSRwoTZXh0ZW5kZWRfc2lnbmF0dXJlcxgEIAMoCzIkLmNvbWV0YmZ0LnR5cGVzLnYyLkV4dGVuZGVkQ29tbWl0U2lnQgTI3h8AIp8CChFFeHRlbmRlZENvbW1pdFNpZxI1Cg1ibG9ja19pZF9mbGFnGAEgASgOMh4uY29tZXRiZnQudHlwZXMudjIuQmxvY2tJREZsYWcSGQoRdmFsaWRhdG9yX2FkZHJlc3MYAiABKAwSNwoJdGltZXN0YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIyN4fAJDfHwESEQoJc2lnbmF0dXJlGAQgASgMEhEKCWV4dGVuc2lvbhgFIAEoDBIbChNleHRlbnNpb25fc2lnbmF0dXJlGAYgASgMEhgKEG5vbl9ycF9leHRlbnNpb24YByABKAwSIgoabm9uX3JwX2V4dGVuc2lvbl9zaWduYXR1cmUYCCABKAwi9wEKCFByb3Bvc2FsEi4KBHR5cGUYASABKA4yIC5jb21ldGJmdC50eXBlcy52Mi5TaWduZWRNc2dUeXBlEg4KBmhlaWdodBgCIAEoAxINCgVyb3VuZBgDIAEoBRIRCglwb2xfcm91bmQYBCABKAUSPQoIYmxvY2tfaWQYBSABKAsyGi5jb21ldGJmdC50eXBlcy52Mi5CbG9ja0lEQg/I3h8A4t4fB0Jsb2NrSUQSNwoJdGltZXN0YW1wGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIIyN4fAJDfHwESEQoJc2lnbmF0dXJlGAcgASgMImQKDFNpZ25lZEhlYWRlchIpCgZoZWFkZXIYASABKAsyGS5jb21ldGJmdC50eXBlcy52Mi5IZWFkZXISKQoGY29tbWl0GAIgASgLMhkuY29tZXRiZnQudHlwZXMudjIuQ29tbWl0InwKCkxpZ2h0QmxvY2sSNgoNc2lnbmVkX2hlYWRlchgBIAEoCzIfLmNvbWV0YmZ0LnR5cGVzLnYyLlNpZ25lZEhlYWRlchI2Cg12YWxpZGF0b3Jfc2V0GAIgASgLMh8uY29tZXRiZnQudHlwZXMudjIuVmFsaWRhdG9yU2V0IqABCglCbG9ja01ldGESPQoIYmxvY2tfaWQYASABKAsyGi5jb21ldGJmdC50eXBlcy52Mi5CbG9ja0lEQg/I3h8A4t4fB0Jsb2NrSUQSEgoKYmxvY2tfc2l6ZRgCIAEoAxIvCgZoZWFkZXIYAyABKAsyGS5jb21ldGJmdC50eXBlcy52Mi5IZWFkZXJCBMjeHwASDwoHbnVtX3R4cxgEIAEoAyJUCgdUeFByb29mEhEKCXJvb3RfaGFzaBgBIAEoDBIMCgRkYXRhGAIgASgMEigKBXByb29mGAMgASgLMhkuY29tZXRiZnQuY3J5cHRvLnYxLlByb29mKtcBCg1TaWduZWRNc2dUeXBlEiwKF1NJR05FRF9NU0dfVFlQRV9VTktOT1dOEAAaD4qdIAtVbmtub3duVHlwZRIsChdTSUdORURfTVNHX1RZUEVfUFJFVk9URRABGg+KnSALUHJldm90ZVR5cGUSMAoZU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVBACGhGKnSANUHJlY29tbWl0VHlwZRIuChhTSUdORURfTVNHX1RZUEVfUFJPUE9TQUwQIBoQip0gDFByb3Bvc2FsVHlwZRoIiKMeAKikHgFCvQEKFWNvbS5jb21ldGJmdC50eXBlcy52MkIKVHlwZXNQcm90b1ABWjJnaXRodWIuY29tL2NvbWV0YmZ0L2NvbWV0YmZ0L2FwaS9jb21ldGJmdC90eXBlcy92MqICA0NUWKoCEUNvbWV0YmZ0LlR5cGVzLlYyygIRQ29tZXRiZnRcVHlwZXNcVjLiAh1Db21ldGJmdFxUeXBlc1xWMlxHUEJNZXRhZGF0YeoCE0NvbWV0YmZ0OjpUeXBlczo6VjJiBnByb3RvMw", [file_cometbft_crypto_v1_proof, file_cometbft_types_v2_validator, file_cometbft_version_v1_types, file_gogoproto_gogo, file_google_protobuf_timestamp]);

/**
 * Header of the parts set for a block.
 *
 * @generated from message cometbft.types.v2.PartSetHeader
 */
export type PartSetHeader = Message<"cometbft.types.v2.PartSetHeader"> & {
  /**
   * @generated from field: uint32 total = 1;
   */
  total: number;

  /**
   * @generated from field: bytes hash = 2;
   */
  hash: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.PartSetHeader.
 * Use `create(PartSetHeaderSchema)` to create a new message.
 */
export const PartSetHeaderSchema: GenMessage<PartSetHeader> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 0);

/**
 * Part of the block.
 *
 * @generated from message cometbft.types.v2.Part
 */
export type Part = Message<"cometbft.types.v2.Part"> & {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: bytes bytes = 2;
   */
  bytes: Uint8Array;

  /**
   * @generated from field: cometbft.crypto.v1.Proof proof = 3;
   */
  proof?: Proof;
};

/**
 * Describes the message cometbft.types.v2.Part.
 * Use `create(PartSchema)` to create a new message.
 */
export const PartSchema: GenMessage<Part> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 1);

/**
 * BlockID defines the unique ID of a block as its hash and its `PartSetHeader`.
 *
 * @generated from message cometbft.types.v2.BlockID
 */
export type BlockID = Message<"cometbft.types.v2.BlockID"> & {
  /**
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * @generated from field: cometbft.types.v2.PartSetHeader part_set_header = 2;
   */
  partSetHeader?: PartSetHeader;
};

/**
 * Describes the message cometbft.types.v2.BlockID.
 * Use `create(BlockIDSchema)` to create a new message.
 */
export const BlockIDSchema: GenMessage<BlockID> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 2);

/**
 * Header defines the structure of a block header.
 *
 * @generated from message cometbft.types.v2.Header
 */
export type Header = Message<"cometbft.types.v2.Header"> & {
  /**
   * basic block info
   *
   * @generated from field: cometbft.version.v1.Consensus version = 1;
   */
  version?: Consensus;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId: string;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * prev block info
   *
   * @generated from field: cometbft.types.v2.BlockID last_block_id = 5;
   */
  lastBlockId?: BlockID;

  /**
   * hashes of block data
   *
   * commit from validators from the last block
   *
   * @generated from field: bytes last_commit_hash = 6;
   */
  lastCommitHash: Uint8Array;

  /**
   * transactions
   *
   * @generated from field: bytes data_hash = 7;
   */
  dataHash: Uint8Array;

  /**
   * hashes from the app output from the prev block
   *
   * validators for the current block
   *
   * @generated from field: bytes validators_hash = 8;
   */
  validatorsHash: Uint8Array;

  /**
   * validators for the next block
   *
   * @generated from field: bytes next_validators_hash = 9;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * consensus params for current block
   *
   * @generated from field: bytes consensus_hash = 10;
   */
  consensusHash: Uint8Array;

  /**
   * state after txs from the previous block
   *
   * @generated from field: bytes app_hash = 11;
   */
  appHash: Uint8Array;

  /**
   * root hash of all results from the txs from the previous block
   *
   * @generated from field: bytes last_results_hash = 12;
   */
  lastResultsHash: Uint8Array;

  /**
   * consensus info
   *
   * evidence included in the block
   *
   * @generated from field: bytes evidence_hash = 13;
   */
  evidenceHash: Uint8Array;

  /**
   * original proposer of the block
   *
   * @generated from field: bytes proposer_address = 14;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.Header.
 * Use `create(HeaderSchema)` to create a new message.
 */
export const HeaderSchema: GenMessage<Header> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 3);

/**
 * Data contains the set of transactions included in the block
 *
 * @generated from message cometbft.types.v2.Data
 */
export type Data = Message<"cometbft.types.v2.Data"> & {
  /**
   * Txs that will be applied by state @ block.Height+1.
   * NOTE: not all txs here are valid.  We're just agreeing on the order first.
   * This means that block.AppHash does not include these txs.
   *
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];
};

/**
 * Describes the message cometbft.types.v2.Data.
 * Use `create(DataSchema)` to create a new message.
 */
export const DataSchema: GenMessage<Data> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 4);

/**
 * Vote represents a prevote or precommit vote from validators for
 * consensus.
 * For precommit messages, the message contains vote extensions (replay-protected and non-replay-protected)
 * and their signatures.
 *
 * @generated from message cometbft.types.v2.Vote
 */
export type Vote = Message<"cometbft.types.v2.Vote"> & {
  /**
   * @generated from field: cometbft.types.v2.SignedMsgType type = 1;
   */
  type: SignedMsgType;

  /**
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * zero if vote is nil.
   *
   * @generated from field: cometbft.types.v2.BlockID block_id = 4;
   */
  blockId?: BlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 5;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes validator_address = 6;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: int32 validator_index = 7;
   */
  validatorIndex: number;

  /**
   * Vote signature by the validator if they participated in consensus for the
   * associated block.
   *
   * @generated from field: bytes signature = 8;
   */
  signature: Uint8Array;

  /**
   * Vote extension provided by the application. Only valid for precommit
   * messages.
   *
   * @generated from field: bytes extension = 9;
   */
  extension: Uint8Array;

  /**
   * Vote extension signature by the validator if they participated in
   * consensus for the associated block.
   * Only valid for precommit messages.
   *
   * @generated from field: bytes extension_signature = 10;
   */
  extensionSignature: Uint8Array;

  /**
   * Non-Replay-Protected (NRP) vote extension provided by the application.
   * Only valid for precommit messages.
   *
   * @generated from field: bytes non_rp_extension = 11;
   */
  nonRpExtension: Uint8Array;

  /**
   * Non-Replay-Protected (NRP) vote extension signature by the validator if
   * they participated in consensus for the associated block.
   * Only valid for precommit messages.
   *
   * @generated from field: bytes non_rp_extension_signature = 12;
   */
  nonRpExtensionSignature: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.Vote.
 * Use `create(VoteSchema)` to create a new message.
 */
export const VoteSchema: GenMessage<Vote> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 5);

/**
 * Commit contains the evidence that a block was committed by a set of validators.
 *
 * @generated from message cometbft.types.v2.Commit
 */
export type Commit = Message<"cometbft.types.v2.Commit"> & {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: cometbft.types.v2.BlockID block_id = 3;
   */
  blockId?: BlockID;

  /**
   * @generated from field: repeated cometbft.types.v2.CommitSig signatures = 4;
   */
  signatures: CommitSig[];
};

/**
 * Describes the message cometbft.types.v2.Commit.
 * Use `create(CommitSchema)` to create a new message.
 */
export const CommitSchema: GenMessage<Commit> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 6);

/**
 * CommitSig is a part of the Vote included in a Commit.
 *
 * @generated from message cometbft.types.v2.CommitSig
 */
export type CommitSig = Message<"cometbft.types.v2.CommitSig"> & {
  /**
   * @generated from field: cometbft.types.v2.BlockIDFlag block_id_flag = 1;
   */
  blockIdFlag: BlockIDFlag;

  /**
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes signature = 4;
   */
  signature: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.CommitSig.
 * Use `create(CommitSigSchema)` to create a new message.
 */
export const CommitSigSchema: GenMessage<CommitSig> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 7);

/**
 * ExtendedCommit is a Commit with ExtendedCommitSig.
 *
 * @generated from message cometbft.types.v2.ExtendedCommit
 */
export type ExtendedCommit = Message<"cometbft.types.v2.ExtendedCommit"> & {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: cometbft.types.v2.BlockID block_id = 3;
   */
  blockId?: BlockID;

  /**
   * @generated from field: repeated cometbft.types.v2.ExtendedCommitSig extended_signatures = 4;
   */
  extendedSignatures: ExtendedCommitSig[];
};

/**
 * Describes the message cometbft.types.v2.ExtendedCommit.
 * Use `create(ExtendedCommitSchema)` to create a new message.
 */
export const ExtendedCommitSchema: GenMessage<ExtendedCommit> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 8);

/**
 * ExtendedCommitSig retains all the same fields as CommitSig but adds vote
 * extension-related fields, where:
 * 'extension' and 'extension_signature' are used for replay-protected vote extensions.
 * 'non_rp_extension' and 'non_rp_extension_signature' are used for non-replay-protected vote extensions.
 * We use two signatures to ensure backwards compatibility.
 * That is the digest of the original signature is still the same in prior versions
 *
 * @generated from message cometbft.types.v2.ExtendedCommitSig
 */
export type ExtendedCommitSig = Message<"cometbft.types.v2.ExtendedCommitSig"> & {
  /**
   * @generated from field: cometbft.types.v2.BlockIDFlag block_id_flag = 1;
   */
  blockIdFlag: BlockIDFlag;

  /**
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes signature = 4;
   */
  signature: Uint8Array;

  /**
   * Vote extension data
   *
   * @generated from field: bytes extension = 5;
   */
  extension: Uint8Array;

  /**
   * Vote extension signature
   *
   * @generated from field: bytes extension_signature = 6;
   */
  extensionSignature: Uint8Array;

  /**
   * Non-Replay-Protected vote extension data
   *
   * @generated from field: bytes non_rp_extension = 7;
   */
  nonRpExtension: Uint8Array;

  /**
   * Non-Replay-Protected vote extension signature
   *
   * @generated from field: bytes non_rp_extension_signature = 8;
   */
  nonRpExtensionSignature: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.ExtendedCommitSig.
 * Use `create(ExtendedCommitSigSchema)` to create a new message.
 */
export const ExtendedCommitSigSchema: GenMessage<ExtendedCommitSig> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 9);

/**
 * Block proposal.
 *
 * @generated from message cometbft.types.v2.Proposal
 */
export type Proposal = Message<"cometbft.types.v2.Proposal"> & {
  /**
   * @generated from field: cometbft.types.v2.SignedMsgType type = 1;
   */
  type: SignedMsgType;

  /**
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 3;
   */
  round: number;

  /**
   * @generated from field: int32 pol_round = 4;
   */
  polRound: number;

  /**
   * @generated from field: cometbft.types.v2.BlockID block_id = 5;
   */
  blockId?: BlockID;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 6;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: bytes signature = 7;
   */
  signature: Uint8Array;
};

/**
 * Describes the message cometbft.types.v2.Proposal.
 * Use `create(ProposalSchema)` to create a new message.
 */
export const ProposalSchema: GenMessage<Proposal> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 10);

/**
 * SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it.
 *
 * @generated from message cometbft.types.v2.SignedHeader
 */
export type SignedHeader = Message<"cometbft.types.v2.SignedHeader"> & {
  /**
   * @generated from field: cometbft.types.v2.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: cometbft.types.v2.Commit commit = 2;
   */
  commit?: Commit;
};

/**
 * Describes the message cometbft.types.v2.SignedHeader.
 * Use `create(SignedHeaderSchema)` to create a new message.
 */
export const SignedHeaderSchema: GenMessage<SignedHeader> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 11);

/**
 * LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients.
 *
 * @generated from message cometbft.types.v2.LightBlock
 */
export type LightBlock = Message<"cometbft.types.v2.LightBlock"> & {
  /**
   * @generated from field: cometbft.types.v2.SignedHeader signed_header = 1;
   */
  signedHeader?: SignedHeader;

  /**
   * @generated from field: cometbft.types.v2.ValidatorSet validator_set = 2;
   */
  validatorSet?: ValidatorSet;
};

/**
 * Describes the message cometbft.types.v2.LightBlock.
 * Use `create(LightBlockSchema)` to create a new message.
 */
export const LightBlockSchema: GenMessage<LightBlock> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 12);

/**
 * BlockMeta contains meta information about a block.
 *
 * @generated from message cometbft.types.v2.BlockMeta
 */
export type BlockMeta = Message<"cometbft.types.v2.BlockMeta"> & {
  /**
   * @generated from field: cometbft.types.v2.BlockID block_id = 1;
   */
  blockId?: BlockID;

  /**
   * @generated from field: int64 block_size = 2;
   */
  blockSize: bigint;

  /**
   * @generated from field: cometbft.types.v2.Header header = 3;
   */
  header?: Header;

  /**
   * @generated from field: int64 num_txs = 4;
   */
  numTxs: bigint;
};

/**
 * Describes the message cometbft.types.v2.BlockMeta.
 * Use `create(BlockMetaSchema)` to create a new message.
 */
export const BlockMetaSchema: GenMessage<BlockMeta> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 13);

/**
 * TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
 *
 * @generated from message cometbft.types.v2.TxProof
 */
export type TxProof = Message<"cometbft.types.v2.TxProof"> & {
  /**
   * @generated from field: bytes root_hash = 1;
   */
  rootHash: Uint8Array;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * @generated from field: cometbft.crypto.v1.Proof proof = 3;
   */
  proof?: Proof;
};

/**
 * Describes the message cometbft.types.v2.TxProof.
 * Use `create(TxProofSchema)` to create a new message.
 */
export const TxProofSchema: GenMessage<TxProof> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_types, 14);

/**
 * SignedMsgType is a type of signed message in the consensus.
 *
 * @generated from enum cometbft.types.v2.SignedMsgType
 */
export enum SignedMsgType {
  /**
   * Unknown
   *
   * @generated from enum value: SIGNED_MSG_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Prevote
   *
   * @generated from enum value: SIGNED_MSG_TYPE_PREVOTE = 1;
   */
  PREVOTE = 1,

  /**
   * Precommit
   *
   * @generated from enum value: SIGNED_MSG_TYPE_PRECOMMIT = 2;
   */
  PRECOMMIT = 2,

  /**
   * Proposal
   *
   * @generated from enum value: SIGNED_MSG_TYPE_PROPOSAL = 32;
   */
  PROPOSAL = 32,
}

/**
 * Describes the enum cometbft.types.v2.SignedMsgType.
 */
export const SignedMsgTypeSchema: GenEnum<SignedMsgType> = /*@__PURE__*/
  enumDesc(file_cometbft_types_v2_types, 0);

