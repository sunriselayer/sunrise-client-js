// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file cometbft/types/v2/params.proto (package cometbft.types.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cometbft/types/v2/params.proto.
 */
export const file_cometbft_types_v2_params: GenFile = /*@__PURE__*/
  fileDesc("Ch5jb21ldGJmdC90eXBlcy92Mi9wYXJhbXMucHJvdG8SEWNvbWV0YmZ0LnR5cGVzLnYyIvoCCg9Db25zZW5zdXNQYXJhbXMSLQoFYmxvY2sYASABKAsyHi5jb21ldGJmdC50eXBlcy52Mi5CbG9ja1BhcmFtcxIzCghldmlkZW5jZRgCIAEoCzIhLmNvbWV0YmZ0LnR5cGVzLnYyLkV2aWRlbmNlUGFyYW1zEjUKCXZhbGlkYXRvchgDIAEoCzIiLmNvbWV0YmZ0LnR5cGVzLnYyLlZhbGlkYXRvclBhcmFtcxIxCgd2ZXJzaW9uGAQgASgLMiAuY29tZXRiZnQudHlwZXMudjIuVmVyc2lvblBhcmFtcxIvCgRhYmNpGAUgASgLMh0uY29tZXRiZnQudHlwZXMudjIuQUJDSVBhcmFtc0ICGAESNQoJc3luY2hyb255GAYgASgLMiIuY29tZXRiZnQudHlwZXMudjIuU3luY2hyb255UGFyYW1zEjEKB2ZlYXR1cmUYByABKAsyIC5jb21ldGJmdC50eXBlcy52Mi5GZWF0dXJlUGFyYW1zIjcKC0Jsb2NrUGFyYW1zEhEKCW1heF9ieXRlcxgBIAEoAxIPCgdtYXhfZ2FzGAIgASgDSgQIAxAEIn4KDkV2aWRlbmNlUGFyYW1zEhoKEm1heF9hZ2VfbnVtX2Jsb2NrcxgBIAEoAxI9ChBtYXhfYWdlX2R1cmF0aW9uGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgjI3h8AmN8fARIRCgltYXhfYnl0ZXMYAyABKAMiMgoPVmFsaWRhdG9yUGFyYW1zEhUKDXB1Yl9rZXlfdHlwZXMYASADKAk6CLigHwHooB8BIiYKDVZlcnNpb25QYXJhbXMSCwoDYXBwGAEgASgEOgi4oB8B6KAfASI+CgxIYXNoZWRQYXJhbXMSFwoPYmxvY2tfbWF4X2J5dGVzGAEgASgDEhUKDWJsb2NrX21heF9nYXMYAiABKAMifQoPU3luY2hyb255UGFyYW1zEjIKCXByZWNpc2lvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIEmN8fARI2Cg1tZXNzYWdlX2RlbGF5GAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgSY3x8BIpgBCg1GZWF0dXJlUGFyYW1zEkgKHXZvdGVfZXh0ZW5zaW9uc19lbmFibGVfaGVpZ2h0GAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCBMjeHwESPQoScGJ0c19lbmFibGVfaGVpZ2h0GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCBMjeHwEiNwoKQUJDSVBhcmFtcxIlCh12b3RlX2V4dGVuc2lvbnNfZW5hYmxlX2hlaWdodBgBIAEoAzoCGAFCwgEKFWNvbS5jb21ldGJmdC50eXBlcy52MkILUGFyYW1zUHJvdG9QAVoyZ2l0aHViLmNvbS9jb21ldGJmdC9jb21ldGJmdC9hcGkvY29tZXRiZnQvdHlwZXMvdjKiAgNDVFiqAhFDb21ldGJmdC5UeXBlcy5WMsoCEUNvbWV0YmZ0XFR5cGVzXFYy4gIdQ29tZXRiZnRcVHlwZXNcVjJcR1BCTWV0YWRhdGHqAhNDb21ldGJmdDo6VHlwZXM6OlYyqOIeAWIGcHJvdG8z", [file_gogoproto_gogo, file_google_protobuf_duration, file_google_protobuf_wrappers]);

/**
 * ConsensusParams contains consensus critical parameters that determine the
 * validity of blocks.
 *
 * @generated from message cometbft.types.v2.ConsensusParams
 */
export type ConsensusParams = Message<"cometbft.types.v2.ConsensusParams"> & {
  /**
   * @generated from field: cometbft.types.v2.BlockParams block = 1;
   */
  block?: BlockParams;

  /**
   * @generated from field: cometbft.types.v2.EvidenceParams evidence = 2;
   */
  evidence?: EvidenceParams;

  /**
   * @generated from field: cometbft.types.v2.ValidatorParams validator = 3;
   */
  validator?: ValidatorParams;

  /**
   * @generated from field: cometbft.types.v2.VersionParams version = 4;
   */
  version?: VersionParams;

  /**
   * Use FeatureParams.vote_extensions_enable_height instead
   *
   * @generated from field: cometbft.types.v2.ABCIParams abci = 5 [deprecated = true];
   * @deprecated
   */
  abci?: ABCIParams;

  /**
   * @generated from field: cometbft.types.v2.SynchronyParams synchrony = 6;
   */
  synchrony?: SynchronyParams;

  /**
   * @generated from field: cometbft.types.v2.FeatureParams feature = 7;
   */
  feature?: FeatureParams;
};

/**
 * Describes the message cometbft.types.v2.ConsensusParams.
 * Use `create(ConsensusParamsSchema)` to create a new message.
 */
export const ConsensusParamsSchema: GenMessage<ConsensusParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 0);

/**
 * BlockParams define limits on the block size and gas.
 *
 * @generated from message cometbft.types.v2.BlockParams
 */
export type BlockParams = Message<"cometbft.types.v2.BlockParams"> & {
  /**
   * Maximum size of a block, in bytes.
   *
   * Must be greater or equal to -1 and cannot be greater than the hard-coded
   * maximum block size, which is 100MB.
   *
   * If set to -1, the limit is the hard-coded maximum block size.
   *
   * @generated from field: int64 max_bytes = 1;
   */
  maxBytes: bigint;

  /**
   * Maximum gas wanted by transactions included in a block.
   *
   * Must be greater or equal to -1. If set to -1, no limit is enforced.
   *
   * @generated from field: int64 max_gas = 2;
   */
  maxGas: bigint;
};

/**
 * Describes the message cometbft.types.v2.BlockParams.
 * Use `create(BlockParamsSchema)` to create a new message.
 */
export const BlockParamsSchema: GenMessage<BlockParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 1);

/**
 * EvidenceParams determine the validity of evidences of Byzantine behavior.
 *
 * @generated from message cometbft.types.v2.EvidenceParams
 */
export type EvidenceParams = Message<"cometbft.types.v2.EvidenceParams"> & {
  /**
   * Maximum age of evidence, in blocks.
   *
   * The recommended formula for calculating it is max_age_duration / {average
   * block time}.
   *
   * @generated from field: int64 max_age_num_blocks = 1;
   */
  maxAgeNumBlocks: bigint;

  /**
   * Maximum age of evidence, in time.
   *
   * The recommended value of is should correspond to the application's
   * "unbonding period" or other similar mechanism for handling
   * Nothing-At-Stake attacks.
   * See:
   * https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed.
   *
   * @generated from field: google.protobuf.Duration max_age_duration = 2;
   */
  maxAgeDuration?: Duration;

  /**
   * Maximum size in bytes of evidence allowed to be included in a block.
   *
   * It should fall comfortably under the maximum size of a block.
   *
   * @generated from field: int64 max_bytes = 3;
   */
  maxBytes: bigint;
};

/**
 * Describes the message cometbft.types.v2.EvidenceParams.
 * Use `create(EvidenceParamsSchema)` to create a new message.
 */
export const EvidenceParamsSchema: GenMessage<EvidenceParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 2);

/**
 * ValidatorParams restrict the public key types validators can use.
 *
 * NOTE: uses ABCI public keys naming, not Amino names.
 *
 * @generated from message cometbft.types.v2.ValidatorParams
 */
export type ValidatorParams = Message<"cometbft.types.v2.ValidatorParams"> & {
  /**
   * @generated from field: repeated string pub_key_types = 1;
   */
  pubKeyTypes: string[];
};

/**
 * Describes the message cometbft.types.v2.ValidatorParams.
 * Use `create(ValidatorParamsSchema)` to create a new message.
 */
export const ValidatorParamsSchema: GenMessage<ValidatorParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 3);

/**
 * VersionParams contain the version of specific components of CometBFT.
 *
 * @generated from message cometbft.types.v2.VersionParams
 */
export type VersionParams = Message<"cometbft.types.v2.VersionParams"> & {
  /**
   * The ABCI application version.
   *
   * It was named app_version in CometBFT 0.34.
   *
   * @generated from field: uint64 app = 1;
   */
  app: bigint;
};

/**
 * Describes the message cometbft.types.v2.VersionParams.
 * Use `create(VersionParamsSchema)` to create a new message.
 */
export const VersionParamsSchema: GenMessage<VersionParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 4);

/**
 * HashedParams is a subset of ConsensusParams.
 *
 * It is hashed into the Header.ConsensusHash.
 *
 * @generated from message cometbft.types.v2.HashedParams
 */
export type HashedParams = Message<"cometbft.types.v2.HashedParams"> & {
  /**
   * @generated from field: int64 block_max_bytes = 1;
   */
  blockMaxBytes: bigint;

  /**
   * @generated from field: int64 block_max_gas = 2;
   */
  blockMaxGas: bigint;
};

/**
 * Describes the message cometbft.types.v2.HashedParams.
 * Use `create(HashedParamsSchema)` to create a new message.
 */
export const HashedParamsSchema: GenMessage<HashedParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 5);

/**
 * SynchronyParams determine the validity of block timestamps.
 *
 * These parameters are part of the Proposer-Based Timestamps (PBTS) algorithm.
 * For more information on the relationship of the synchrony parameters to
 * block timestamps validity, refer to the PBTS specification:
 * https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md
 *
 * @generated from message cometbft.types.v2.SynchronyParams
 */
export type SynchronyParams = Message<"cometbft.types.v2.SynchronyParams"> & {
  /**
   * Bound for how skewed a proposer's clock may be from any validator on the
   * network while still producing valid proposals.
   *
   * @generated from field: google.protobuf.Duration precision = 1;
   */
  precision?: Duration;

  /**
   * Bound for how long a proposal message may take to reach all validators on
   * a network and still be considered valid.
   *
   * @generated from field: google.protobuf.Duration message_delay = 2;
   */
  messageDelay?: Duration;
};

/**
 * Describes the message cometbft.types.v2.SynchronyParams.
 * Use `create(SynchronyParamsSchema)` to create a new message.
 */
export const SynchronyParamsSchema: GenMessage<SynchronyParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 6);

/**
 * FeatureParams configure the height from which features of CometBFT are enabled.
 *
 * @generated from message cometbft.types.v2.FeatureParams
 */
export type FeatureParams = Message<"cometbft.types.v2.FeatureParams"> & {
  /**
   * Height during which vote extensions will be enabled.
   *
   * A value of 0 means vote extensions are disabled. A value > 0 denotes
   * the height at which vote extensions will be (or have been) enabled.
   *
   * During the specified height, and for all subsequent heights, precommit
   * messages that do not contain valid extension data will be considered
   * invalid. Prior to this height, or when this height is set to 0, vote
   * extensions will not be used or accepted by validators on the network.
   *
   * Once enabled, vote extensions will be created by the application in
   * ExtendVote, validated by the application in VerifyVoteExtension, and
   * used by the application in PrepareProposal, when proposing the next block.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   *
   * @generated from field: google.protobuf.Int64Value vote_extensions_enable_height = 1;
   */
  voteExtensionsEnableHeight?: bigint;

  /**
   * Height at which Proposer-Based Timestamps (PBTS) will be enabled.
   *
   * A value of 0 means PBTS is disabled. A value > 0 denotes the height at
   * which PBTS will be (or has been) enabled.
   *
   * From the specified height, and for all subsequent heights, the PBTS
   * algorithm will be used to produce and validate block timestamps. Prior to
   * this height, or when this height is set to 0, the legacy BFT Time
   * algorithm is used to produce and validate timestamps.
   *
   * Cannot be set to heights lower or equal to the current blockchain height.
   *
   * @generated from field: google.protobuf.Int64Value pbts_enable_height = 2;
   */
  pbtsEnableHeight?: bigint;
};

/**
 * Describes the message cometbft.types.v2.FeatureParams.
 * Use `create(FeatureParamsSchema)` to create a new message.
 */
export const FeatureParamsSchema: GenMessage<FeatureParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 7);

/**
 * ABCIParams is deprecated and its contents moved to FeatureParams
 *
 * @generated from message cometbft.types.v2.ABCIParams
 * @deprecated
 */
export type ABCIParams = Message<"cometbft.types.v2.ABCIParams"> & {
  /**
   * vote_extensions_enable_height has been deprecated.
   * Instead, use FeatureParams.vote_extensions_enable_height.
   *
   * @generated from field: int64 vote_extensions_enable_height = 1;
   */
  voteExtensionsEnableHeight: bigint;
};

/**
 * Describes the message cometbft.types.v2.ABCIParams.
 * Use `create(ABCIParamsSchema)` to create a new message.
 * @deprecated
 */
export const ABCIParamsSchema: GenMessage<ABCIParams> = /*@__PURE__*/
  messageDesc(file_cometbft_types_v2_params, 8);

