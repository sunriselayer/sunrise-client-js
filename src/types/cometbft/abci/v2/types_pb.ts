// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file cometbft/abci/v2/types.proto (package cometbft.abci.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ProofOps } from "../../crypto/v1/proof_pb";
import { file_cometbft_crypto_v1_proof } from "../../crypto/v1/proof_pb";
import type { ConsensusParams } from "../../types/v2/params_pb";
import { file_cometbft_types_v2_params } from "../../types/v2/params_pb";
import type { BlockIDFlag } from "../../types/v2/validator_pb";
import { file_cometbft_types_v2_validator } from "../../types/v2/validator_pb";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cometbft/abci/v2/types.proto.
 */
export const file_cometbft_abci_v2_types: GenFile = /*@__PURE__*/
  fileDesc("", [file_cometbft_crypto_v1_proof, file_cometbft_types_v2_params, file_cometbft_types_v2_validator, file_gogoproto_gogo, file_google_protobuf_timestamp, file_google_protobuf_duration]);

/**
 * Request represents a request to the ABCI application.
 *
 * @generated from message cometbft.abci.v2.Request
 */
export type Request = Message<"cometbft.abci.v2.Request"> & {
  /**
   * Sum of all possible messages.
   *
   * @generated from oneof cometbft.abci.v2.Request.value
   */
  value: {
    /**
     * @generated from field: cometbft.abci.v2.EchoRequest echo = 1;
     */
    value: EchoRequest;
    case: "echo";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.FlushRequest flush = 2;
     */
    value: FlushRequest;
    case: "flush";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.InfoRequest info = 3;
     */
    value: InfoRequest;
    case: "info";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.InitChainRequest init_chain = 5;
     */
    value: InitChainRequest;
    case: "initChain";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.QueryRequest query = 6;
     */
    value: QueryRequest;
    case: "query";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.CheckTxRequest check_tx = 8;
     */
    value: CheckTxRequest;
    case: "checkTx";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.CommitRequest commit = 11;
     */
    value: CommitRequest;
    case: "commit";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ListSnapshotsRequest list_snapshots = 12;
     */
    value: ListSnapshotsRequest;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.OfferSnapshotRequest offer_snapshot = 13;
     */
    value: OfferSnapshotRequest;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.LoadSnapshotChunkRequest load_snapshot_chunk = 14;
     */
    value: LoadSnapshotChunkRequest;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ApplySnapshotChunkRequest apply_snapshot_chunk = 15;
     */
    value: ApplySnapshotChunkRequest;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.PrepareProposalRequest prepare_proposal = 16;
     */
    value: PrepareProposalRequest;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ProcessProposalRequest process_proposal = 17;
     */
    value: ProcessProposalRequest;
    case: "processProposal";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ExtendVoteRequest extend_vote = 18;
     */
    value: ExtendVoteRequest;
    case: "extendVote";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.VerifyVoteExtensionRequest verify_vote_extension = 19;
     */
    value: VerifyVoteExtensionRequest;
    case: "verifyVoteExtension";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.FinalizeBlockRequest finalize_block = 20;
     */
    value: FinalizeBlockRequest;
    case: "finalizeBlock";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cometbft.abci.v2.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 0);

/**
 * EchoRequest is a request to "echo" the given string.
 *
 * @generated from message cometbft.abci.v2.EchoRequest
 */
export type EchoRequest = Message<"cometbft.abci.v2.EchoRequest"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message cometbft.abci.v2.EchoRequest.
 * Use `create(EchoRequestSchema)` to create a new message.
 */
export const EchoRequestSchema: GenMessage<EchoRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 1);

/**
 * FlushRequest is a request to flush the write buffer.
 *
 * @generated from message cometbft.abci.v2.FlushRequest
 */
export type FlushRequest = Message<"cometbft.abci.v2.FlushRequest"> & {
};

/**
 * Describes the message cometbft.abci.v2.FlushRequest.
 * Use `create(FlushRequestSchema)` to create a new message.
 */
export const FlushRequestSchema: GenMessage<FlushRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 2);

/**
 * InfoRequest is a request for the ABCI application version.
 *
 * @generated from message cometbft.abci.v2.InfoRequest
 */
export type InfoRequest = Message<"cometbft.abci.v2.InfoRequest"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: uint64 block_version = 2;
   */
  blockVersion: bigint;

  /**
   * @generated from field: uint64 p2p_version = 3;
   */
  p2pVersion: bigint;

  /**
   * @generated from field: string abci_version = 4;
   */
  abciVersion: string;
};

/**
 * Describes the message cometbft.abci.v2.InfoRequest.
 * Use `create(InfoRequestSchema)` to create a new message.
 */
export const InfoRequestSchema: GenMessage<InfoRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 3);

/**
 * InitChainRequest is a request to initialize the blockchain.
 *
 * @generated from message cometbft.abci.v2.InitChainRequest
 */
export type InitChainRequest = Message<"cometbft.abci.v2.InitChainRequest"> & {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string chain_id = 2;
   */
  chainId: string;

  /**
   * @generated from field: cometbft.types.v2.ConsensusParams consensus_params = 3;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated cometbft.abci.v2.ValidatorUpdate validators = 4;
   */
  validators: ValidatorUpdate[];

  /**
   * @generated from field: bytes app_state_bytes = 5;
   */
  appStateBytes: Uint8Array;

  /**
   * @generated from field: int64 initial_height = 6;
   */
  initialHeight: bigint;
};

/**
 * Describes the message cometbft.abci.v2.InitChainRequest.
 * Use `create(InitChainRequestSchema)` to create a new message.
 */
export const InitChainRequestSchema: GenMessage<InitChainRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 4);

/**
 * QueryRequest is a request to query the application state.
 *
 * @generated from message cometbft.abci.v2.QueryRequest
 */
export type QueryRequest = Message<"cometbft.abci.v2.QueryRequest"> & {
  /**
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * @generated from field: bool prove = 4;
   */
  prove: boolean;
};

/**
 * Describes the message cometbft.abci.v2.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export const QueryRequestSchema: GenMessage<QueryRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 5);

/**
 * CheckTxRequest is a request to check that the transaction is valid.
 *
 * @generated from message cometbft.abci.v2.CheckTxRequest
 */
export type CheckTxRequest = Message<"cometbft.abci.v2.CheckTxRequest"> & {
  /**
   * @generated from field: bytes tx = 1;
   */
  tx: Uint8Array;

  /**
   * @generated from field: cometbft.abci.v2.CheckTxType type = 3;
   */
  type: CheckTxType;
};

/**
 * Describes the message cometbft.abci.v2.CheckTxRequest.
 * Use `create(CheckTxRequestSchema)` to create a new message.
 */
export const CheckTxRequestSchema: GenMessage<CheckTxRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 6);

/**
 * CommitRequest is a request to commit the pending application state.
 *
 * @generated from message cometbft.abci.v2.CommitRequest
 */
export type CommitRequest = Message<"cometbft.abci.v2.CommitRequest"> & {
};

/**
 * Describes the message cometbft.abci.v2.CommitRequest.
 * Use `create(CommitRequestSchema)` to create a new message.
 */
export const CommitRequestSchema: GenMessage<CommitRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 7);

/**
 * Request to list available snapshots.
 *
 * @generated from message cometbft.abci.v2.ListSnapshotsRequest
 */
export type ListSnapshotsRequest = Message<"cometbft.abci.v2.ListSnapshotsRequest"> & {
};

/**
 * Describes the message cometbft.abci.v2.ListSnapshotsRequest.
 * Use `create(ListSnapshotsRequestSchema)` to create a new message.
 */
export const ListSnapshotsRequestSchema: GenMessage<ListSnapshotsRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 8);

/**
 * Request offering a snapshot to the application.
 *
 * @generated from message cometbft.abci.v2.OfferSnapshotRequest
 */
export type OfferSnapshotRequest = Message<"cometbft.abci.v2.OfferSnapshotRequest"> & {
  /**
   * snapshot offered by peers
   *
   * @generated from field: cometbft.abci.v2.Snapshot snapshot = 1;
   */
  snapshot?: Snapshot;

  /**
   * light client-verified app hash for snapshot height
   *
   * @generated from field: bytes app_hash = 2;
   */
  appHash: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.OfferSnapshotRequest.
 * Use `create(OfferSnapshotRequestSchema)` to create a new message.
 */
export const OfferSnapshotRequestSchema: GenMessage<OfferSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 9);

/**
 * Request to load a snapshot chunk.
 *
 * @generated from message cometbft.abci.v2.LoadSnapshotChunkRequest
 */
export type LoadSnapshotChunkRequest = Message<"cometbft.abci.v2.LoadSnapshotChunkRequest"> & {
  /**
   * @generated from field: uint64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: uint32 format = 2;
   */
  format: number;

  /**
   * @generated from field: uint32 chunk = 3;
   */
  chunk: number;
};

/**
 * Describes the message cometbft.abci.v2.LoadSnapshotChunkRequest.
 * Use `create(LoadSnapshotChunkRequestSchema)` to create a new message.
 */
export const LoadSnapshotChunkRequestSchema: GenMessage<LoadSnapshotChunkRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 10);

/**
 * Request to apply a snapshot chunk.
 *
 * @generated from message cometbft.abci.v2.ApplySnapshotChunkRequest
 */
export type ApplySnapshotChunkRequest = Message<"cometbft.abci.v2.ApplySnapshotChunkRequest"> & {
  /**
   * @generated from field: uint32 index = 1;
   */
  index: number;

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk: Uint8Array;

  /**
   * @generated from field: string sender = 3;
   */
  sender: string;
};

/**
 * Describes the message cometbft.abci.v2.ApplySnapshotChunkRequest.
 * Use `create(ApplySnapshotChunkRequestSchema)` to create a new message.
 */
export const ApplySnapshotChunkRequestSchema: GenMessage<ApplySnapshotChunkRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 11);

/**
 * PrepareProposalRequest is a request for the ABCI application to prepare a new
 * block proposal.
 *
 * @generated from message cometbft.abci.v2.PrepareProposalRequest
 */
export type PrepareProposalRequest = Message<"cometbft.abci.v2.PrepareProposalRequest"> & {
  /**
   * the modified transactions cannot exceed this size.
   *
   * @generated from field: int64 max_tx_bytes = 1;
   */
  maxTxBytes: bigint;

  /**
   * txs is an array of transactions that will be included in a block,
   * sent to the app for possible modifications.
   *
   * @generated from field: repeated bytes txs = 2;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: cometbft.abci.v2.ExtendedCommitInfo local_last_commit = 3;
   */
  localLastCommit?: ExtendedCommitInfo;

  /**
   * @generated from field: repeated cometbft.abci.v2.Misbehavior misbehavior = 4;
   */
  misbehavior: Misbehavior[];

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the validator proposing the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.PrepareProposalRequest.
 * Use `create(PrepareProposalRequestSchema)` to create a new message.
 */
export const PrepareProposalRequestSchema: GenMessage<PrepareProposalRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 12);

/**
 * ProcessProposalRequest is a request for the ABCI application to process a proposal
 * received from another validator.
 *
 * @generated from message cometbft.abci.v2.ProcessProposalRequest
 */
export type ProcessProposalRequest = Message<"cometbft.abci.v2.ProcessProposalRequest"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: cometbft.abci.v2.CommitInfo proposed_last_commit = 2;
   */
  proposedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated cometbft.abci.v2.Misbehavior misbehavior = 3;
   */
  misbehavior: Misbehavior[];

  /**
   * Merkle root hash of the fields of the proposed block.
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.ProcessProposalRequest.
 * Use `create(ProcessProposalRequestSchema)` to create a new message.
 */
export const ProcessProposalRequestSchema: GenMessage<ProcessProposalRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 13);

/**
 * ExtendVoteRequest extends a precommit vote with application-injected data.
 *
 * @generated from message cometbft.abci.v2.ExtendVoteRequest
 */
export type ExtendVoteRequest = Message<"cometbft.abci.v2.ExtendVoteRequest"> & {
  /**
   * the hash of the block that this vote may be referring to
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * the height of the extended vote
   *
   * @generated from field: int64 height = 2;
   */
  height: bigint;

  /**
   * info of the block that this vote may be referring to
   *
   * @generated from field: google.protobuf.Timestamp time = 3;
   */
  time?: Timestamp;

  /**
   * @generated from field: repeated bytes txs = 4;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: cometbft.abci.v2.CommitInfo proposed_last_commit = 5;
   */
  proposedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated cometbft.abci.v2.Misbehavior misbehavior = 6;
   */
  misbehavior: Misbehavior[];

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.ExtendVoteRequest.
 * Use `create(ExtendVoteRequestSchema)` to create a new message.
 */
export const ExtendVoteRequestSchema: GenMessage<ExtendVoteRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 14);

/**
 * VerifyVoteExtensionRequest is a request for the application to verify a vote extension
 * produced by a different validator.
 * The request contains two vote extension fields: one that is replay-protected ('vote_extension')
 * and one that is not ('non_rp_vote_extension').
 *
 * @generated from message cometbft.abci.v2.VerifyVoteExtensionRequest
 */
export type VerifyVoteExtensionRequest = Message<"cometbft.abci.v2.VerifyVoteExtensionRequest"> & {
  /**
   * the hash of the block that this received vote corresponds to
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * the validator that signed the vote extension
   *
   * @generated from field: bytes validator_address = 2;
   */
  validatorAddress: Uint8Array;

  /**
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * replay-protected vote extension
   *
   * @generated from field: bytes vote_extension = 4;
   */
  voteExtension: Uint8Array;

  /**
   * non-replay-protected vote extension
   *
   * @generated from field: bytes non_rp_vote_extension = 5;
   */
  nonRpVoteExtension: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.VerifyVoteExtensionRequest.
 * Use `create(VerifyVoteExtensionRequestSchema)` to create a new message.
 */
export const VerifyVoteExtensionRequestSchema: GenMessage<VerifyVoteExtensionRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 15);

/**
 * FinalizeBlockRequest is a request to finalize the block.
 *
 * @generated from message cometbft.abci.v2.FinalizeBlockRequest
 */
export type FinalizeBlockRequest = Message<"cometbft.abci.v2.FinalizeBlockRequest"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];

  /**
   * @generated from field: cometbft.abci.v2.CommitInfo decided_last_commit = 2;
   */
  decidedLastCommit?: CommitInfo;

  /**
   * @generated from field: repeated cometbft.abci.v2.Misbehavior misbehavior = 3;
   */
  misbehavior: Misbehavior[];

  /**
   * Merkle root hash of the fields of the decided block.
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * @generated from field: int64 height = 5;
   */
  height: bigint;

  /**
   * @generated from field: google.protobuf.Timestamp time = 6;
   */
  time?: Timestamp;

  /**
   * @generated from field: bytes next_validators_hash = 7;
   */
  nextValidatorsHash: Uint8Array;

  /**
   * address of the public key of the original proposer of the block.
   *
   * @generated from field: bytes proposer_address = 8;
   */
  proposerAddress: Uint8Array;

  /**
   * If the node is syncing/replaying blocks - target height. If not, syncing_to == height.
   *
   * @generated from field: int64 syncing_to_height = 9;
   */
  syncingToHeight: bigint;
};

/**
 * Describes the message cometbft.abci.v2.FinalizeBlockRequest.
 * Use `create(FinalizeBlockRequestSchema)` to create a new message.
 */
export const FinalizeBlockRequestSchema: GenMessage<FinalizeBlockRequest> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 16);

/**
 * Response represents a response from the ABCI application.
 *
 * @generated from message cometbft.abci.v2.Response
 */
export type Response = Message<"cometbft.abci.v2.Response"> & {
  /**
   * Sum of all possible messages.
   *
   * @generated from oneof cometbft.abci.v2.Response.value
   */
  value: {
    /**
     * @generated from field: cometbft.abci.v2.ExceptionResponse exception = 1;
     */
    value: ExceptionResponse;
    case: "exception";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.EchoResponse echo = 2;
     */
    value: EchoResponse;
    case: "echo";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.FlushResponse flush = 3;
     */
    value: FlushResponse;
    case: "flush";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.InfoResponse info = 4;
     */
    value: InfoResponse;
    case: "info";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.InitChainResponse init_chain = 6;
     */
    value: InitChainResponse;
    case: "initChain";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.QueryResponse query = 7;
     */
    value: QueryResponse;
    case: "query";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.CheckTxResponse check_tx = 9;
     */
    value: CheckTxResponse;
    case: "checkTx";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.CommitResponse commit = 12;
     */
    value: CommitResponse;
    case: "commit";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ListSnapshotsResponse list_snapshots = 13;
     */
    value: ListSnapshotsResponse;
    case: "listSnapshots";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.OfferSnapshotResponse offer_snapshot = 14;
     */
    value: OfferSnapshotResponse;
    case: "offerSnapshot";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.LoadSnapshotChunkResponse load_snapshot_chunk = 15;
     */
    value: LoadSnapshotChunkResponse;
    case: "loadSnapshotChunk";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ApplySnapshotChunkResponse apply_snapshot_chunk = 16;
     */
    value: ApplySnapshotChunkResponse;
    case: "applySnapshotChunk";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.PrepareProposalResponse prepare_proposal = 17;
     */
    value: PrepareProposalResponse;
    case: "prepareProposal";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ProcessProposalResponse process_proposal = 18;
     */
    value: ProcessProposalResponse;
    case: "processProposal";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.ExtendVoteResponse extend_vote = 19;
     */
    value: ExtendVoteResponse;
    case: "extendVote";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.VerifyVoteExtensionResponse verify_vote_extension = 20;
     */
    value: VerifyVoteExtensionResponse;
    case: "verifyVoteExtension";
  } | {
    /**
     * @generated from field: cometbft.abci.v2.FinalizeBlockResponse finalize_block = 21;
     */
    value: FinalizeBlockResponse;
    case: "finalizeBlock";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cometbft.abci.v2.Response.
 * Use `create(ResponseSchema)` to create a new message.
 */
export const ResponseSchema: GenMessage<Response> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 17);

/**
 * nondeterministic
 *
 * @generated from message cometbft.abci.v2.ExceptionResponse
 */
export type ExceptionResponse = Message<"cometbft.abci.v2.ExceptionResponse"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message cometbft.abci.v2.ExceptionResponse.
 * Use `create(ExceptionResponseSchema)` to create a new message.
 */
export const ExceptionResponseSchema: GenMessage<ExceptionResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 18);

/**
 * EchoResponse indicates that the connection is still alive.
 *
 * @generated from message cometbft.abci.v2.EchoResponse
 */
export type EchoResponse = Message<"cometbft.abci.v2.EchoResponse"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message cometbft.abci.v2.EchoResponse.
 * Use `create(EchoResponseSchema)` to create a new message.
 */
export const EchoResponseSchema: GenMessage<EchoResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 19);

/**
 * FlushResponse indicates that the write buffer was flushed.
 *
 * @generated from message cometbft.abci.v2.FlushResponse
 */
export type FlushResponse = Message<"cometbft.abci.v2.FlushResponse"> & {
};

/**
 * Describes the message cometbft.abci.v2.FlushResponse.
 * Use `create(FlushResponseSchema)` to create a new message.
 */
export const FlushResponseSchema: GenMessage<FlushResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 20);

/**
 * InfoResponse contains the ABCI application version information.
 *
 * @generated from message cometbft.abci.v2.InfoResponse
 */
export type InfoResponse = Message<"cometbft.abci.v2.InfoResponse"> & {
  /**
   * @generated from field: string data = 1;
   */
  data: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * @generated from field: uint64 app_version = 3;
   */
  appVersion: bigint;

  /**
   * @generated from field: int64 last_block_height = 4;
   */
  lastBlockHeight: bigint;

  /**
   * @generated from field: bytes last_block_app_hash = 5;
   */
  lastBlockAppHash: Uint8Array;

  /**
   * @generated from field: map<string, uint32> lane_priorities = 6;
   */
  lanePriorities: { [key: string]: number };

  /**
   * @generated from field: string default_lane = 7;
   */
  defaultLane: string;
};

/**
 * Describes the message cometbft.abci.v2.InfoResponse.
 * Use `create(InfoResponseSchema)` to create a new message.
 */
export const InfoResponseSchema: GenMessage<InfoResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 21);

/**
 * InitChainResponse contains the ABCI application's hash and updates to the
 * validator set and/or the consensus params, if any.
 *
 * @generated from message cometbft.abci.v2.InitChainResponse
 */
export type InitChainResponse = Message<"cometbft.abci.v2.InitChainResponse"> & {
  /**
   * @generated from field: cometbft.types.v2.ConsensusParams consensus_params = 1;
   */
  consensusParams?: ConsensusParams;

  /**
   * @generated from field: repeated cometbft.abci.v2.ValidatorUpdate validators = 2;
   */
  validators: ValidatorUpdate[];

  /**
   * @generated from field: bytes app_hash = 3;
   */
  appHash: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.InitChainResponse.
 * Use `create(InitChainResponseSchema)` to create a new message.
 */
export const InitChainResponseSchema: GenMessage<InitChainResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 22);

/**
 * QueryResponse contains the ABCI application data along with a proof.
 *
 * @generated from message cometbft.abci.v2.QueryResponse
 */
export type QueryResponse = Message<"cometbft.abci.v2.QueryResponse"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * bytes data = 2; // use "value" instead.
   *
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 index = 5;
   */
  index: bigint;

  /**
   * @generated from field: bytes key = 6;
   */
  key: Uint8Array;

  /**
   * @generated from field: bytes value = 7;
   */
  value: Uint8Array;

  /**
   * @generated from field: cometbft.crypto.v1.ProofOps proof_ops = 8;
   */
  proofOps?: ProofOps;

  /**
   * @generated from field: int64 height = 9;
   */
  height: bigint;

  /**
   * @generated from field: string codespace = 10;
   */
  codespace: string;
};

/**
 * Describes the message cometbft.abci.v2.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export const QueryResponseSchema: GenMessage<QueryResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 23);

/**
 * CheckTxResponse shows if the transaction was deemed valid by the ABCI
 * application.
 *
 * @generated from message cometbft.abci.v2.CheckTxResponse
 */
export type CheckTxResponse = Message<"cometbft.abci.v2.CheckTxResponse"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted: bigint;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed: bigint;

  /**
   * nondeterministic
   *
   * @generated from field: repeated cometbft.abci.v2.Event events = 7;
   */
  events: Event[];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace: string;

  /**
   * @generated from field: string lane_id = 12;
   */
  laneId: string;
};

/**
 * Describes the message cometbft.abci.v2.CheckTxResponse.
 * Use `create(CheckTxResponseSchema)` to create a new message.
 */
export const CheckTxResponseSchema: GenMessage<CheckTxResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 24);

/**
 * CommitResponse indicates how much blocks should CometBFT retain.
 *
 * @generated from message cometbft.abci.v2.CommitResponse
 */
export type CommitResponse = Message<"cometbft.abci.v2.CommitResponse"> & {
  /**
   * @generated from field: int64 retain_height = 3;
   */
  retainHeight: bigint;
};

/**
 * Describes the message cometbft.abci.v2.CommitResponse.
 * Use `create(CommitResponseSchema)` to create a new message.
 */
export const CommitResponseSchema: GenMessage<CommitResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 25);

/**
 * ListSnapshotsResponse contains the list of snapshots.
 *
 * @generated from message cometbft.abci.v2.ListSnapshotsResponse
 */
export type ListSnapshotsResponse = Message<"cometbft.abci.v2.ListSnapshotsResponse"> & {
  /**
   * @generated from field: repeated cometbft.abci.v2.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[];
};

/**
 * Describes the message cometbft.abci.v2.ListSnapshotsResponse.
 * Use `create(ListSnapshotsResponseSchema)` to create a new message.
 */
export const ListSnapshotsResponseSchema: GenMessage<ListSnapshotsResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 26);

/**
 * OfferSnapshotResponse indicates the ABCI application decision whenever to
 * provide a snapshot to the requester or not.
 *
 * @generated from message cometbft.abci.v2.OfferSnapshotResponse
 */
export type OfferSnapshotResponse = Message<"cometbft.abci.v2.OfferSnapshotResponse"> & {
  /**
   * @generated from field: cometbft.abci.v2.OfferSnapshotResult result = 1;
   */
  result: OfferSnapshotResult;
};

/**
 * Describes the message cometbft.abci.v2.OfferSnapshotResponse.
 * Use `create(OfferSnapshotResponseSchema)` to create a new message.
 */
export const OfferSnapshotResponseSchema: GenMessage<OfferSnapshotResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 27);

/**
 * LoadSnapshotChunkResponse returns a snapshot's chunk.
 *
 * @generated from message cometbft.abci.v2.LoadSnapshotChunkResponse
 */
export type LoadSnapshotChunkResponse = Message<"cometbft.abci.v2.LoadSnapshotChunkResponse"> & {
  /**
   * @generated from field: bytes chunk = 1;
   */
  chunk: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.LoadSnapshotChunkResponse.
 * Use `create(LoadSnapshotChunkResponseSchema)` to create a new message.
 */
export const LoadSnapshotChunkResponseSchema: GenMessage<LoadSnapshotChunkResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 28);

/**
 * ApplySnapshotChunkResponse returns a result of applying the specified chunk.
 *
 * @generated from message cometbft.abci.v2.ApplySnapshotChunkResponse
 */
export type ApplySnapshotChunkResponse = Message<"cometbft.abci.v2.ApplySnapshotChunkResponse"> & {
  /**
   * @generated from field: cometbft.abci.v2.ApplySnapshotChunkResult result = 1;
   */
  result: ApplySnapshotChunkResult;

  /**
   * Chunks to refetch and reapply
   *
   * @generated from field: repeated uint32 refetch_chunks = 2;
   */
  refetchChunks: number[];

  /**
   * Chunk senders to reject and ban
   *
   * @generated from field: repeated string reject_senders = 3;
   */
  rejectSenders: string[];
};

/**
 * Describes the message cometbft.abci.v2.ApplySnapshotChunkResponse.
 * Use `create(ApplySnapshotChunkResponseSchema)` to create a new message.
 */
export const ApplySnapshotChunkResponseSchema: GenMessage<ApplySnapshotChunkResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 29);

/**
 * PrepareProposalResponse contains a list of transactions, which will form a block.
 *
 * @generated from message cometbft.abci.v2.PrepareProposalResponse
 */
export type PrepareProposalResponse = Message<"cometbft.abci.v2.PrepareProposalResponse"> & {
  /**
   * @generated from field: repeated bytes txs = 1;
   */
  txs: Uint8Array[];
};

/**
 * Describes the message cometbft.abci.v2.PrepareProposalResponse.
 * Use `create(PrepareProposalResponseSchema)` to create a new message.
 */
export const PrepareProposalResponseSchema: GenMessage<PrepareProposalResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 30);

/**
 * ProcessProposalResponse indicates the ABCI application's decision whenever
 * the given proposal should be accepted or not.
 *
 * @generated from message cometbft.abci.v2.ProcessProposalResponse
 */
export type ProcessProposalResponse = Message<"cometbft.abci.v2.ProcessProposalResponse"> & {
  /**
   * @generated from field: cometbft.abci.v2.ProcessProposalStatus status = 1;
   */
  status: ProcessProposalStatus;
};

/**
 * Describes the message cometbft.abci.v2.ProcessProposalResponse.
 * Use `create(ProcessProposalResponseSchema)` to create a new message.
 */
export const ProcessProposalResponseSchema: GenMessage<ProcessProposalResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 31);

/**
 * ExtendVoteResponse contains the vote extension that the application would like to
 * attach to its next precommit vote.
 * Information in `vote_extension` will be replay-protected.
 * Information in `non_rp_extension` will not be replay-protected.
 *
 * @generated from message cometbft.abci.v2.ExtendVoteResponse
 */
export type ExtendVoteResponse = Message<"cometbft.abci.v2.ExtendVoteResponse"> & {
  /**
   * this extension's signature is replay-protected
   *
   * @generated from field: bytes vote_extension = 1;
   */
  voteExtension: Uint8Array;

  /**
   * this extension's signature is _not_ replay-protected
   *
   * @generated from field: bytes non_rp_extension = 2;
   */
  nonRpExtension: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.ExtendVoteResponse.
 * Use `create(ExtendVoteResponseSchema)` to create a new message.
 */
export const ExtendVoteResponseSchema: GenMessage<ExtendVoteResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 32);

/**
 * VerifyVoteExtensionResponse indicates the ABCI application's decision
 * whenever the vote extension should be accepted or not.
 *
 * @generated from message cometbft.abci.v2.VerifyVoteExtensionResponse
 */
export type VerifyVoteExtensionResponse = Message<"cometbft.abci.v2.VerifyVoteExtensionResponse"> & {
  /**
   * @generated from field: cometbft.abci.v2.VerifyVoteExtensionStatus status = 1;
   */
  status: VerifyVoteExtensionStatus;
};

/**
 * Describes the message cometbft.abci.v2.VerifyVoteExtensionResponse.
 * Use `create(VerifyVoteExtensionResponseSchema)` to create a new message.
 */
export const VerifyVoteExtensionResponseSchema: GenMessage<VerifyVoteExtensionResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 33);

/**
 * FinalizeBlockResponse contains the result of executing the block.
 *
 * @generated from message cometbft.abci.v2.FinalizeBlockResponse
 */
export type FinalizeBlockResponse = Message<"cometbft.abci.v2.FinalizeBlockResponse"> & {
  /**
   * set of block events emitted as part of executing the block
   *
   * nondeterministic
   *
   * @generated from field: repeated cometbft.abci.v2.Event events = 1;
   */
  events: Event[];

  /**
   * the result of executing each transaction including the events
   * the particular transaction emitted. This should match the order
   * of the transactions delivered in the block itself
   *
   * @generated from field: repeated cometbft.abci.v2.ExecTxResult tx_results = 2;
   */
  txResults: ExecTxResult[];

  /**
   * a list of updates to the validator set. These will reflect the validator set at current height + 2.
   *
   * @generated from field: repeated cometbft.abci.v2.ValidatorUpdate validator_updates = 3;
   */
  validatorUpdates: ValidatorUpdate[];

  /**
   * updates to the consensus params, if any.
   *
   * @generated from field: cometbft.types.v2.ConsensusParams consensus_param_updates = 4;
   */
  consensusParamUpdates?: ConsensusParams;

  /**
   * app_hash is the hash of the applications' state which is used to confirm
   * that execution of the transactions was deterministic.
   * It is up to the application to decide which algorithm to use.
   *
   * @generated from field: bytes app_hash = 5;
   */
  appHash: Uint8Array;

  /**
   * delay between the time when this block is committed and the next height is started.
   * previously `timeout_commit` in config.toml
   *
   * @generated from field: google.protobuf.Duration next_block_delay = 6;
   */
  nextBlockDelay?: Duration;
};

/**
 * Describes the message cometbft.abci.v2.FinalizeBlockResponse.
 * Use `create(FinalizeBlockResponseSchema)` to create a new message.
 */
export const FinalizeBlockResponseSchema: GenMessage<FinalizeBlockResponse> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 34);

/**
 * CommitInfo contains votes for the particular round.
 *
 * @generated from message cometbft.abci.v2.CommitInfo
 */
export type CommitInfo = Message<"cometbft.abci.v2.CommitInfo"> & {
  /**
   * @generated from field: int32 round = 1;
   */
  round: number;

  /**
   * @generated from field: repeated cometbft.abci.v2.VoteInfo votes = 2;
   */
  votes: VoteInfo[];
};

/**
 * Describes the message cometbft.abci.v2.CommitInfo.
 * Use `create(CommitInfoSchema)` to create a new message.
 */
export const CommitInfoSchema: GenMessage<CommitInfo> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 35);

/**
 * ExtendedCommitInfo is similar to CommitInfo except that it is only used in
 * the PrepareProposal request such that Tendermint can provide vote extensions
 * to the application.
 *
 * @generated from message cometbft.abci.v2.ExtendedCommitInfo
 */
export type ExtendedCommitInfo = Message<"cometbft.abci.v2.ExtendedCommitInfo"> & {
  /**
   * The round at which the block proposer decided in the previous height.
   *
   * @generated from field: int32 round = 1;
   */
  round: number;

  /**
   * List of validators' addresses in the last validator set with their voting
   * information, including vote extensions.
   *
   * @generated from field: repeated cometbft.abci.v2.ExtendedVoteInfo votes = 2;
   */
  votes: ExtendedVoteInfo[];
};

/**
 * Describes the message cometbft.abci.v2.ExtendedCommitInfo.
 * Use `create(ExtendedCommitInfoSchema)` to create a new message.
 */
export const ExtendedCommitInfoSchema: GenMessage<ExtendedCommitInfo> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 36);

/**
 * Event allows application developers to attach additional information to
 * ResponseFinalizeBlock and ResponseCheckTx.
 * Up to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock,
 * and ResponseDeliverTx.
 * Later, transactions may be queried using these events.
 *
 * @generated from message cometbft.abci.v2.Event
 */
export type Event = Message<"cometbft.abci.v2.Event"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: repeated cometbft.abci.v2.EventAttribute attributes = 2;
   */
  attributes: EventAttribute[];
};

/**
 * Describes the message cometbft.abci.v2.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 37);

/**
 * EventAttribute is a single key-value pair, associated with an event.
 *
 * @generated from message cometbft.abci.v2.EventAttribute
 */
export type EventAttribute = Message<"cometbft.abci.v2.EventAttribute"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * nondeterministic
   *
   * @generated from field: bool index = 3;
   */
  index: boolean;
};

/**
 * Describes the message cometbft.abci.v2.EventAttribute.
 * Use `create(EventAttributeSchema)` to create a new message.
 */
export const EventAttributeSchema: GenMessage<EventAttribute> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 38);

/**
 * ExecTxResult contains results of executing one individual transaction.
 *
 * * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 *
 * @generated from message cometbft.abci.v2.ExecTxResult
 */
export type ExecTxResult = Message<"cometbft.abci.v2.ExecTxResult"> & {
  /**
   * @generated from field: uint32 code = 1;
   */
  code: number;

  /**
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;

  /**
   * nondeterministic
   *
   * @generated from field: string log = 3;
   */
  log: string;

  /**
   * nondeterministic
   *
   * @generated from field: string info = 4;
   */
  info: string;

  /**
   * @generated from field: int64 gas_wanted = 5 [json_name = "gas_wanted"];
   */
  gasWanted: bigint;

  /**
   * @generated from field: int64 gas_used = 6 [json_name = "gas_used"];
   */
  gasUsed: bigint;

  /**
   * nondeterministic
   *
   * @generated from field: repeated cometbft.abci.v2.Event events = 7;
   */
  events: Event[];

  /**
   * @generated from field: string codespace = 8;
   */
  codespace: string;
};

/**
 * Describes the message cometbft.abci.v2.ExecTxResult.
 * Use `create(ExecTxResultSchema)` to create a new message.
 */
export const ExecTxResultSchema: GenMessage<ExecTxResult> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 39);

/**
 * TxResult contains results of executing the transaction.
 *
 * One usage is indexing transaction results.
 *
 * @generated from message cometbft.abci.v2.TxResult
 */
export type TxResult = Message<"cometbft.abci.v2.TxResult"> & {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: uint32 index = 2;
   */
  index: number;

  /**
   * @generated from field: bytes tx = 3;
   */
  tx: Uint8Array;

  /**
   * @generated from field: cometbft.abci.v2.ExecTxResult result = 4;
   */
  result?: ExecTxResult;
};

/**
 * Describes the message cometbft.abci.v2.TxResult.
 * Use `create(TxResultSchema)` to create a new message.
 */
export const TxResultSchema: GenMessage<TxResult> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 40);

/**
 * Validator in the validator set.
 *
 * @generated from message cometbft.abci.v2.Validator
 */
export type Validator = Message<"cometbft.abci.v2.Validator"> & {
  /**
   * The first 20 bytes of SHA256(public key)
   *
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;

  /**
   * PubKey pub_key = 2 [(gogoproto.nullable)=false];
   *
   * The voting power
   *
   * @generated from field: int64 power = 3;
   */
  power: bigint;
};

/**
 * Describes the message cometbft.abci.v2.Validator.
 * Use `create(ValidatorSchema)` to create a new message.
 */
export const ValidatorSchema: GenMessage<Validator> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 41);

/**
 * ValidatorUpdate is a singular update to a validator set.
 *
 * @generated from message cometbft.abci.v2.ValidatorUpdate
 */
export type ValidatorUpdate = Message<"cometbft.abci.v2.ValidatorUpdate"> & {
  /**
   * @generated from field: int64 power = 2;
   */
  power: bigint;

  /**
   * @generated from field: bytes pub_key_bytes = 3;
   */
  pubKeyBytes: Uint8Array;

  /**
   * @generated from field: string pub_key_type = 4;
   */
  pubKeyType: string;
};

/**
 * Describes the message cometbft.abci.v2.ValidatorUpdate.
 * Use `create(ValidatorUpdateSchema)` to create a new message.
 */
export const ValidatorUpdateSchema: GenMessage<ValidatorUpdate> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 42);

/**
 * VoteInfo contains the information about the vote.
 *
 * @generated from message cometbft.abci.v2.VoteInfo
 */
export type VoteInfo = Message<"cometbft.abci.v2.VoteInfo"> & {
  /**
   * @generated from field: cometbft.abci.v2.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * @generated from field: cometbft.types.v2.BlockIDFlag block_id_flag = 3;
   */
  blockIdFlag: BlockIDFlag;
};

/**
 * Describes the message cometbft.abci.v2.VoteInfo.
 * Use `create(VoteInfoSchema)` to create a new message.
 */
export const VoteInfoSchema: GenMessage<VoteInfo> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 43);

/**
 * ExtendedVoteInfo extends VoteInfo with the vote extensions (non-deterministic).
 *
 * @generated from message cometbft.abci.v2.ExtendedVoteInfo
 */
export type ExtendedVoteInfo = Message<"cometbft.abci.v2.ExtendedVoteInfo"> & {
  /**
   * The validator that sent the vote.
   *
   * @generated from field: cometbft.abci.v2.Validator validator = 1;
   */
  validator?: Validator;

  /**
   * Non-deterministic extension provided by the sending validator's application.
   *
   * @generated from field: bytes vote_extension = 3;
   */
  voteExtension: Uint8Array;

  /**
   * Vote extension signature created by CometBFT
   *
   * @generated from field: bytes extension_signature = 4;
   */
  extensionSignature: Uint8Array;

  /**
   * block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all
   *
   * @generated from field: cometbft.types.v2.BlockIDFlag block_id_flag = 5;
   */
  blockIdFlag: BlockIDFlag;

  /**
   * Non-deterministic non-replay-protected extension provided by the sending validator's application.
   *
   * @generated from field: bytes non_rp_vote_extension = 6;
   */
  nonRpVoteExtension: Uint8Array;

  /**
   * Signature on non-replay-protected extension created by CometBFT
   *
   * @generated from field: bytes non_rp_extension_signature = 7;
   */
  nonRpExtensionSignature: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.ExtendedVoteInfo.
 * Use `create(ExtendedVoteInfoSchema)` to create a new message.
 */
export const ExtendedVoteInfoSchema: GenMessage<ExtendedVoteInfo> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 44);

/**
 * Misbehavior is a type of misbehavior committed by a validator.
 *
 * @generated from message cometbft.abci.v2.Misbehavior
 */
export type Misbehavior = Message<"cometbft.abci.v2.Misbehavior"> & {
  /**
   * @generated from field: cometbft.abci.v2.MisbehaviorType type = 1;
   */
  type: MisbehaviorType;

  /**
   * The offending validator
   *
   * @generated from field: cometbft.abci.v2.Validator validator = 2;
   */
  validator?: Validator;

  /**
   * The height when the offense occurred
   *
   * @generated from field: int64 height = 3;
   */
  height: bigint;

  /**
   * The corresponding time where the offense occurred
   *
   * @generated from field: google.protobuf.Timestamp time = 4;
   */
  time?: Timestamp;

  /**
   * Total voting power of the validator set in case the ABCI application does
   * not store historical validators.
   * https://github.com/tendermint/tendermint/issues/4581
   *
   * @generated from field: int64 total_voting_power = 5;
   */
  totalVotingPower: bigint;
};

/**
 * Describes the message cometbft.abci.v2.Misbehavior.
 * Use `create(MisbehaviorSchema)` to create a new message.
 */
export const MisbehaviorSchema: GenMessage<Misbehavior> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 45);

/**
 * Snapshot of the ABCI application state.
 *
 * @generated from message cometbft.abci.v2.Snapshot
 */
export type Snapshot = Message<"cometbft.abci.v2.Snapshot"> & {
  /**
   * The height at which the snapshot was taken
   *
   * @generated from field: uint64 height = 1;
   */
  height: bigint;

  /**
   * The application-specific snapshot format
   *
   * @generated from field: uint32 format = 2;
   */
  format: number;

  /**
   * Number of chunks in the snapshot
   *
   * @generated from field: uint32 chunks = 3;
   */
  chunks: number;

  /**
   * Arbitrary snapshot hash, equal only if identical
   *
   * @generated from field: bytes hash = 4;
   */
  hash: Uint8Array;

  /**
   * Arbitrary application metadata
   *
   * @generated from field: bytes metadata = 5;
   */
  metadata: Uint8Array;
};

/**
 * Describes the message cometbft.abci.v2.Snapshot.
 * Use `create(SnapshotSchema)` to create a new message.
 */
export const SnapshotSchema: GenMessage<Snapshot> = /*@__PURE__*/
  messageDesc(file_cometbft_abci_v2_types, 46);

/**
 * Type of the transaction check request.
 *
 * This enumeration is incompatible with the CheckTxType definition in
 * cometbft.abci.v1beta1 and therefore shall not be used in encoding with the same
 * field number.
 *
 * @generated from enum cometbft.abci.v2.CheckTxType
 */
export enum CheckTxType {
  /**
   * Unknown
   *
   * @generated from enum value: CHECK_TX_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Recheck (2nd, 3rd, etc.)
   *
   * @generated from enum value: CHECK_TX_TYPE_RECHECK = 1;
   */
  RECHECK = 1,

  /**
   * Check (1st time)
   *
   * @generated from enum value: CHECK_TX_TYPE_CHECK = 2;
   */
  CHECK = 2,
}

/**
 * Describes the enum cometbft.abci.v2.CheckTxType.
 */
export const CheckTxTypeSchema: GenEnum<CheckTxType> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 0);

/**
 * The result of offering a snapshot.
 *
 * @generated from enum cometbft.abci.v2.OfferSnapshotResult
 */
export enum OfferSnapshotResult {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Snapshot accepted, apply chunks
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_ABORT = 2;
   */
  ABORT = 2,

  /**
   * Reject this specific snapshot, try others
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_REJECT = 3;
   */
  REJECT = 3,

  /**
   * Reject all snapshots of this format, try others
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_REJECT_FORMAT = 4;
   */
  REJECT_FORMAT = 4,

  /**
   * Reject all snapshots from the sender(s), try others
   *
   * @generated from enum value: OFFER_SNAPSHOT_RESULT_REJECT_SENDER = 5;
   */
  REJECT_SENDER = 5,
}

/**
 * Describes the enum cometbft.abci.v2.OfferSnapshotResult.
 */
export const OfferSnapshotResultSchema: GenEnum<OfferSnapshotResult> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 1);

/**
 * The result of applying a snapshot chunk.
 *
 * @generated from enum cometbft.abci.v2.ApplySnapshotChunkResult
 */
export enum ApplySnapshotChunkResult {
  /**
   * Unknown result, abort all snapshot restoration
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Chunk successfully accepted
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Abort all snapshot restoration
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_ABORT = 2;
   */
  ABORT = 2,

  /**
   * Retry chunk (combine with refetch and reject)
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_RETRY = 3;
   */
  RETRY = 3,

  /**
   * Retry snapshot (combine with refetch and reject)
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_RETRY_SNAPSHOT = 4;
   */
  RETRY_SNAPSHOT = 4,

  /**
   * Reject this snapshot, try others
   *
   * @generated from enum value: APPLY_SNAPSHOT_CHUNK_RESULT_REJECT_SNAPSHOT = 5;
   */
  REJECT_SNAPSHOT = 5,
}

/**
 * Describes the enum cometbft.abci.v2.ApplySnapshotChunkResult.
 */
export const ApplySnapshotChunkResultSchema: GenEnum<ApplySnapshotChunkResult> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 2);

/**
 * ProcessProposalStatus is the status of the proposal processing.
 *
 * @generated from enum cometbft.abci.v2.ProcessProposalStatus
 */
export enum ProcessProposalStatus {
  /**
   * Unknown
   *
   * @generated from enum value: PROCESS_PROPOSAL_STATUS_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Accepted
   *
   * @generated from enum value: PROCESS_PROPOSAL_STATUS_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Rejected
   *
   * @generated from enum value: PROCESS_PROPOSAL_STATUS_REJECT = 2;
   */
  REJECT = 2,
}

/**
 * Describes the enum cometbft.abci.v2.ProcessProposalStatus.
 */
export const ProcessProposalStatusSchema: GenEnum<ProcessProposalStatus> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 3);

/**
 * VerifyVoteExtensionStatus is the status of the vote extension verification.
 *
 * @generated from enum cometbft.abci.v2.VerifyVoteExtensionStatus
 */
export enum VerifyVoteExtensionStatus {
  /**
   * Unknown
   *
   * @generated from enum value: VERIFY_VOTE_EXTENSION_STATUS_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Accepted
   *
   * @generated from enum value: VERIFY_VOTE_EXTENSION_STATUS_ACCEPT = 1;
   */
  ACCEPT = 1,

  /**
   * Rejecting the vote extension will reject the entire precommit by the sender.
   * Incorrectly implementing this thus has liveness implications as it may affect
   * CometBFT's ability to receive 2/3+ valid votes to finalize the block.
   * Honest nodes should never be rejected.
   *
   * @generated from enum value: VERIFY_VOTE_EXTENSION_STATUS_REJECT = 2;
   */
  REJECT = 2,
}

/**
 * Describes the enum cometbft.abci.v2.VerifyVoteExtensionStatus.
 */
export const VerifyVoteExtensionStatusSchema: GenEnum<VerifyVoteExtensionStatus> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 4);

/**
 * The type of misbehavior committed by a validator.
 *
 * @generated from enum cometbft.abci.v2.MisbehaviorType
 */
export enum MisbehaviorType {
  /**
   * Unknown
   *
   * @generated from enum value: MISBEHAVIOR_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Duplicate vote
   *
   * @generated from enum value: MISBEHAVIOR_TYPE_DUPLICATE_VOTE = 1;
   */
  DUPLICATE_VOTE = 1,

  /**
   * Light client attack
   *
   * @generated from enum value: MISBEHAVIOR_TYPE_LIGHT_CLIENT_ATTACK = 2;
   */
  LIGHT_CLIENT_ATTACK = 2,
}

/**
 * Describes the enum cometbft.abci.v2.MisbehaviorType.
 */
export const MisbehaviorTypeSchema: GenEnum<MisbehaviorType> = /*@__PURE__*/
  enumDesc(file_cometbft_abci_v2_types, 5);

