// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file cosmos/accounts/v1/tx.proto (package cosmos.accounts.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import { file_cosmos_msg_v1_msg } from "../../msg/v1/msg_pb";
import type { Coin } from "../../base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../base/v1beta1/coin_pb";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cosmos/accounts/v1/tx.proto.
 */
export const file_cosmos_accounts_v1_tx: GenFile = /*@__PURE__*/
  fileDesc("Chtjb3Ntb3MvYWNjb3VudHMvdjEvdHgucHJvdG8SEmNvc21vcy5hY2NvdW50cy52MSLVAQoHTXNnSW5pdBIOCgZzZW5kZXIYASABKAkSFAoMYWNjb3VudF90eXBlGAIgASgJEiUKB21lc3NhZ2UYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55EloKBWZ1bmRzGAQgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjDI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnMSFAoMYWRkcmVzc19zZWVkGAUgASgMOguC57AqBnNlbmRlciJSCg9Nc2dJbml0UmVzcG9uc2USFwoPYWNjb3VudF9hZGRyZXNzGAEgASgJEiYKCHJlc3BvbnNlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSK8AQoKTXNnRXhlY3V0ZRIOCgZzZW5kZXIYASABKAkSDgoGdGFyZ2V0GAIgASgJEiUKB21lc3NhZ2UYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55EloKBWZ1bmRzGAQgAygLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQjDI3h8Aqt8fKGdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuQ29pbnM6C4LnsCoGc2VuZGVyIjwKEk1zZ0V4ZWN1dGVSZXNwb25zZRImCghyZXNwb25zZRgBIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkiPgoQTXNnRXhlY3V0ZUJ1bmRsZRIPCgdidW5kbGVyGAEgASgJEgsKA3R4cxgCIAMoDDoMguewKgdidW5kbGVyIu0BChFCdW5kbGVkVHhSZXNwb25zZRIfChdhdXRoZW50aWNhdGlvbl9nYXNfdXNlZBgBIAEoBBIgChhidW5kbGVyX3BheW1lbnRfZ2FzX3VzZWQYAiABKAQSNwoZYnVuZGxlcl9wYXltZW50X3Jlc3BvbnNlcxgDIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSGgoSZXhlY3V0aW9uX2dhc191c2VkGAQgASgEEjEKE2V4ZWN1dGlvbl9yZXNwb25zZXMYBSADKAsyFC5nb29nbGUucHJvdG9idWYuQW55Eg0KBWVycm9yGAYgASgJIlQKGE1zZ0V4ZWN1dGVCdW5kbGVSZXNwb25zZRI4CglyZXNwb25zZXMYASADKAsyJS5jb3Ntb3MuYWNjb3VudHMudjEuQnVuZGxlZFR4UmVzcG9uc2UyjgIKA01zZxJICgRJbml0EhsuY29zbW9zLmFjY291bnRzLnYxLk1zZ0luaXQaIy5jb3Ntb3MuYWNjb3VudHMudjEuTXNnSW5pdFJlc3BvbnNlElEKB0V4ZWN1dGUSHi5jb3Ntb3MuYWNjb3VudHMudjEuTXNnRXhlY3V0ZRomLmNvc21vcy5hY2NvdW50cy52MS5Nc2dFeGVjdXRlUmVzcG9uc2USYwoNRXhlY3V0ZUJ1bmRsZRIkLmNvc21vcy5hY2NvdW50cy52MS5Nc2dFeGVjdXRlQnVuZGxlGiwuY29zbW9zLmFjY291bnRzLnYxLk1zZ0V4ZWN1dGVCdW5kbGVSZXNwb25zZRoFgOewKgFCpwEKFmNvbS5jb3Ntb3MuYWNjb3VudHMudjFCB1R4UHJvdG9QAVoaY29zbW9zc2RrLmlvL3gvYWNjb3VudHMvdjGiAgNDQViqAhJDb3Ntb3MuQWNjb3VudHMuVjHKAhJDb3Ntb3NcQWNjb3VudHNcVjHiAh5Db3Ntb3NcQWNjb3VudHNcVjFcR1BCTWV0YWRhdGHqAhRDb3Ntb3M6OkFjY291bnRzOjpWMWIGcHJvdG8z", [file_google_protobuf_any, file_cosmos_msg_v1_msg, file_cosmos_base_v1beta1_coin, file_gogoproto_gogo]);

/**
 * MsgInit defines the Create request type for the Msg/Create RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgInit
 */
export type MsgInit = Message<"cosmos.accounts.v1.MsgInit"> & {
  /**
   * sender is the address of the sender of this message.
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * account_type is the type of the account to be created.
   *
   * @generated from field: string account_type = 2;
   */
  accountType: string;

  /**
   * message is the message to be sent to the account.
   *
   * @generated from field: google.protobuf.Any message = 3;
   */
  message?: Any;

  /**
   * funds contains the coins that the account wants to
   * send alongside the request.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 4;
   */
  funds: Coin[];

  /**
   * address_seed can be used to deterministically create the address of the account.
   * If not present the address will be generated based on its associated account number.
   *
   * @generated from field: bytes address_seed = 5;
   */
  addressSeed: Uint8Array;
};

/**
 * Describes the message cosmos.accounts.v1.MsgInit.
 * Use `create(MsgInitSchema)` to create a new message.
 */
export const MsgInitSchema: GenMessage<MsgInit> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 0);

/**
 * MsgInitResponse defines the Create response type for the Msg/Create RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgInitResponse
 */
export type MsgInitResponse = Message<"cosmos.accounts.v1.MsgInitResponse"> & {
  /**
   * account_address is the address of the newly created account.
   *
   * @generated from field: string account_address = 1;
   */
  accountAddress: string;

  /**
   * response is the response returned by the account implementation.
   *
   * @generated from field: google.protobuf.Any response = 2;
   */
  response?: Any;
};

/**
 * Describes the message cosmos.accounts.v1.MsgInitResponse.
 * Use `create(MsgInitResponseSchema)` to create a new message.
 */
export const MsgInitResponseSchema: GenMessage<MsgInitResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 1);

/**
 * MsgExecute defines the Execute request type for the Msg/Execute RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecute
 */
export type MsgExecute = Message<"cosmos.accounts.v1.MsgExecute"> & {
  /**
   * sender is the address of the sender of this message.
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * target is the address of the account to be executed.
   *
   * @generated from field: string target = 2;
   */
  target: string;

  /**
   * message is the message to be sent to the account.
   *
   * @generated from field: google.protobuf.Any message = 3;
   */
  message?: Any;

  /**
   * funds contains the coins that the account wants to
   * send alongside the request.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin funds = 4;
   */
  funds: Coin[];
};

/**
 * Describes the message cosmos.accounts.v1.MsgExecute.
 * Use `create(MsgExecuteSchema)` to create a new message.
 */
export const MsgExecuteSchema: GenMessage<MsgExecute> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 2);

/**
 * MsgExecuteResponse defines the Execute response type for the Msg/Execute RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteResponse
 */
export type MsgExecuteResponse = Message<"cosmos.accounts.v1.MsgExecuteResponse"> & {
  /**
   * response is the response returned by the account implementation.
   *
   * @generated from field: google.protobuf.Any response = 1;
   */
  response?: Any;
};

/**
 * Describes the message cosmos.accounts.v1.MsgExecuteResponse.
 * Use `create(MsgExecuteResponseSchema)` to create a new message.
 */
export const MsgExecuteResponseSchema: GenMessage<MsgExecuteResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 3);

/**
 * MsgExecuteBundle defines the ExecuteBundle request type for the Msg/ExecuteBundle RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteBundle
 */
export type MsgExecuteBundle = Message<"cosmos.accounts.v1.MsgExecuteBundle"> & {
  /**
   * bundler defines the entity going through the standard TX flow
   * to execute one or multiple UserOperations on behalf of others.
   *
   * @generated from field: string bundler = 1;
   */
  bundler: string;

  /**
   * txs defines the txs to execute on behalf of other users.
   *
   * @generated from field: repeated bytes txs = 2;
   */
  txs: Uint8Array[];
};

/**
 * Describes the message cosmos.accounts.v1.MsgExecuteBundle.
 * Use `create(MsgExecuteBundleSchema)` to create a new message.
 */
export const MsgExecuteBundleSchema: GenMessage<MsgExecuteBundle> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 4);

/**
 * BundledTxResponse defines the response of a bundled tx.
 * If the operation fails the error field will be populated, the used gas fields will also be
 * populated depending on when the execution stopped. Bundler payment responses will be populated
 * if the execution fails.
 *
 * @generated from message cosmos.accounts.v1.BundledTxResponse
 */
export type BundledTxResponse = Message<"cosmos.accounts.v1.BundledTxResponse"> & {
  /**
   * authentication_gas_used defines the gas used for the authentication part of the UserOperation.
   *
   * @generated from field: uint64 authentication_gas_used = 1;
   */
  authenticationGasUsed: bigint;

  /**
   * bundler_payment_gas_used defines the gas used for the bundler payment part of the UserOperation.
   *
   * @generated from field: uint64 bundler_payment_gas_used = 2;
   */
  bundlerPaymentGasUsed: bigint;

  /**
   * bundler_payment_responses defines the responses of the bundler payment messages.
   * It can be empty if the bundler does not need any form of payment.
   *
   * @generated from field: repeated google.protobuf.Any bundler_payment_responses = 3;
   */
  bundlerPaymentResponses: Any[];

  /**
   * execution_gas_used defines the gas used for the execution part of the UserOperation.
   *
   * @generated from field: uint64 execution_gas_used = 4;
   */
  executionGasUsed: bigint;

  /**
   * execution_responses defines the responses of the execution messages.
   *
   * @generated from field: repeated google.protobuf.Any execution_responses = 5;
   */
  executionResponses: Any[];

  /**
   * error defines the error that occurred during the execution of the UserOperation.
   * If the error is not empty, the UserOperation failed.
   * Other fields might be populated even if the error is not empty, for example
   * if the operation fails after the authentication step, the authentication_gas_used
   * field will be populated.
   *
   * @generated from field: string error = 6;
   */
  error: string;
};

/**
 * Describes the message cosmos.accounts.v1.BundledTxResponse.
 * Use `create(BundledTxResponseSchema)` to create a new message.
 */
export const BundledTxResponseSchema: GenMessage<BundledTxResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 5);

/**
 * MsgExecuteBundleResponse defines the ExecuteBundle response type for the Msg/ExecuteBundle RPC method.
 *
 * @generated from message cosmos.accounts.v1.MsgExecuteBundleResponse
 */
export type MsgExecuteBundleResponse = Message<"cosmos.accounts.v1.MsgExecuteBundleResponse"> & {
  /**
   * responses is the list of responses from the bundle txs.
   *
   * @generated from field: repeated cosmos.accounts.v1.BundledTxResponse responses = 1;
   */
  responses: BundledTxResponse[];
};

/**
 * Describes the message cosmos.accounts.v1.MsgExecuteBundleResponse.
 * Use `create(MsgExecuteBundleResponseSchema)` to create a new message.
 */
export const MsgExecuteBundleResponseSchema: GenMessage<MsgExecuteBundleResponse> = /*@__PURE__*/
  messageDesc(file_cosmos_accounts_v1_tx, 6);

/**
 * Msg defines the Msg service for the x/accounts module.
 *
 * @generated from service cosmos.accounts.v1.Msg
 */
export const Msg: GenService<{
  /**
   * Init creates a new account in the chain.
   *
   * @generated from rpc cosmos.accounts.v1.Msg.Init
   */
  init: {
    methodKind: "unary";
    input: typeof MsgInitSchema;
    output: typeof MsgInitResponseSchema;
  },
  /**
   * Execute executes a message to the target account.
   *
   * @generated from rpc cosmos.accounts.v1.Msg.Execute
   */
  execute: {
    methodKind: "unary";
    input: typeof MsgExecuteSchema;
    output: typeof MsgExecuteResponseSchema;
  },
  /**
   * ExecuteBundle pertains account abstraction, it is used by the bundler
   * to execute multiple UserOperations in a single transaction message.
   *
   * @generated from rpc cosmos.accounts.v1.Msg.ExecuteBundle
   */
  executeBundle: {
    methodKind: "unary";
    input: typeof MsgExecuteBundleSchema;
    output: typeof MsgExecuteBundleResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_cosmos_accounts_v1_tx, 0);

