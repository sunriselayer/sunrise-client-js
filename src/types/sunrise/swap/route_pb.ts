// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file sunrise/swap/route.proto (package sunrise.swap, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Coin } from "../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_proto_cosmos } from "../../cosmos_proto/cosmos_pb";
import { file_gogoproto_gogo } from "../../gogoproto/gogo_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sunrise/swap/route.proto.
 */
export const file_sunrise_swap_route: GenFile = /*@__PURE__*/
  fileDesc("ChhzdW5yaXNlL3N3YXAvcm91dGUucHJvdG8SDHN1bnJpc2Uuc3dhcCIcCglSb3V0ZVBvb2wSDwoHcG9vbF9pZBgBIAEoBCI4CgtSb3V0ZVNlcmllcxIpCgZyb3V0ZXMYASADKAsyEy5zdW5yaXNlLnN3YXAuUm91dGVCBMjeHwAifgoNUm91dGVQYXJhbGxlbBIpCgZyb3V0ZXMYASADKAsyEy5zdW5yaXNlLnN3YXAuUm91dGVCBMjeHwASQgoHd2VpZ2h0cxgCIAMoCUIxyN4fANreHxtjb3Ntb3NzZGsuaW8vbWF0aC5MZWdhY3lEZWPStC0KY29zbW9zLkRlYyK/AQoFUm91dGUSEAoIZGVub21faW4YASABKAkSEQoJZGVub21fb3V0GAIgASgJEicKBHBvb2wYAyABKAsyFy5zdW5yaXNlLnN3YXAuUm91dGVQb29sSAASKwoGc2VyaWVzGAQgASgLMhkuc3VucmlzZS5zd2FwLlJvdXRlU2VyaWVzSAASLwoIcGFyYWxsZWwYBSABKAsyGy5zdW5yaXNlLnN3YXAuUm91dGVQYXJhbGxlbEgAQgoKCHN0cmF0ZWd5IiIKD1JvdXRlUmVzdWx0UG9vbBIPCgdwb29sX2lkGAEgASgEIksKEVJvdXRlUmVzdWx0U2VyaWVzEjYKDXJvdXRlX3Jlc3VsdHMYASADKAsyGS5zdW5yaXNlLnN3YXAuUm91dGVSZXN1bHRCBMjeHwAiTQoTUm91dGVSZXN1bHRQYXJhbGxlbBI2Cg1yb3V0ZV9yZXN1bHRzGAEgAygLMhkuc3VucmlzZS5zd2FwLlJvdXRlUmVzdWx0QgTI3h8AIpkCCgtSb3V0ZVJlc3VsdBIxCgh0b2tlbl9pbhgBIAEoCzIZLmNvc21vcy5iYXNlLnYxYmV0YTEuQ29pbkIEyN4fABIyCgl0b2tlbl9vdXQYAiABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CBMjeHwASLQoEcG9vbBgDIAEoCzIdLnN1bnJpc2Uuc3dhcC5Sb3V0ZVJlc3VsdFBvb2xIABIxCgZzZXJpZXMYBCABKAsyHy5zdW5yaXNlLnN3YXAuUm91dGVSZXN1bHRTZXJpZXNIABI1CghwYXJhbGxlbBgFIAEoCzIhLnN1bnJpc2Uuc3dhcC5Sb3V0ZVJlc3VsdFBhcmFsbGVsSABCCgoIc3RyYXRlZ3lCnQEKEGNvbS5zdW5yaXNlLnN3YXBCClJvdXRlUHJvdG9QAVosZ2l0aHViLmNvbS9zdW5yaXNlbGF5ZXIvc3VucmlzZS94L3N3YXAvdHlwZXOiAgNTU1iqAgxTdW5yaXNlLlN3YXDKAgxTdW5yaXNlXFN3YXDiAhhTdW5yaXNlXFN3YXBcR1BCTWV0YWRhdGHqAg1TdW5yaXNlOjpTd2FwYgZwcm90bzM", [file_cosmos_base_v1beta1_coin, file_cosmos_proto_cosmos, file_gogoproto_gogo]);

/**
 * RoutePool
 *
 * @generated from message sunrise.swap.RoutePool
 */
export type RoutePool = Message<"sunrise.swap.RoutePool"> & {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId: bigint;
};

/**
 * Describes the message sunrise.swap.RoutePool.
 * Use `create(RoutePoolSchema)` to create a new message.
 */
export const RoutePoolSchema: GenMessage<RoutePool> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 0);

/**
 * RouteSeries
 *
 * @generated from message sunrise.swap.RouteSeries
 */
export type RouteSeries = Message<"sunrise.swap.RouteSeries"> & {
  /**
   * @generated from field: repeated sunrise.swap.Route routes = 1;
   */
  routes: Route[];
};

/**
 * Describes the message sunrise.swap.RouteSeries.
 * Use `create(RouteSeriesSchema)` to create a new message.
 */
export const RouteSeriesSchema: GenMessage<RouteSeries> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 1);

/**
 * RouteParallel
 *
 * @generated from message sunrise.swap.RouteParallel
 */
export type RouteParallel = Message<"sunrise.swap.RouteParallel"> & {
  /**
   * @generated from field: repeated sunrise.swap.Route routes = 1;
   */
  routes: Route[];

  /**
   * @generated from field: repeated string weights = 2;
   */
  weights: string[];
};

/**
 * Describes the message sunrise.swap.RouteParallel.
 * Use `create(RouteParallelSchema)` to create a new message.
 */
export const RouteParallelSchema: GenMessage<RouteParallel> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 2);

/**
 * Route
 *
 * @generated from message sunrise.swap.Route
 */
export type Route = Message<"sunrise.swap.Route"> & {
  /**
   * @generated from field: string denom_in = 1;
   */
  denomIn: string;

  /**
   * @generated from field: string denom_out = 2;
   */
  denomOut: string;

  /**
   * strategy
   *
   * @generated from oneof sunrise.swap.Route.strategy
   */
  strategy: {
    /**
     * @generated from field: sunrise.swap.RoutePool pool = 3;
     */
    value: RoutePool;
    case: "pool";
  } | {
    /**
     * @generated from field: sunrise.swap.RouteSeries series = 4;
     */
    value: RouteSeries;
    case: "series";
  } | {
    /**
     * @generated from field: sunrise.swap.RouteParallel parallel = 5;
     */
    value: RouteParallel;
    case: "parallel";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sunrise.swap.Route.
 * Use `create(RouteSchema)` to create a new message.
 */
export const RouteSchema: GenMessage<Route> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 3);

/**
 * RouteResultPool
 *
 * @generated from message sunrise.swap.RouteResultPool
 */
export type RouteResultPool = Message<"sunrise.swap.RouteResultPool"> & {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId: bigint;
};

/**
 * Describes the message sunrise.swap.RouteResultPool.
 * Use `create(RouteResultPoolSchema)` to create a new message.
 */
export const RouteResultPoolSchema: GenMessage<RouteResultPool> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 4);

/**
 * RouteResultSeries
 *
 * @generated from message sunrise.swap.RouteResultSeries
 */
export type RouteResultSeries = Message<"sunrise.swap.RouteResultSeries"> & {
  /**
   * @generated from field: repeated sunrise.swap.RouteResult route_results = 1;
   */
  routeResults: RouteResult[];
};

/**
 * Describes the message sunrise.swap.RouteResultSeries.
 * Use `create(RouteResultSeriesSchema)` to create a new message.
 */
export const RouteResultSeriesSchema: GenMessage<RouteResultSeries> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 5);

/**
 * RouteResultParallel
 *
 * @generated from message sunrise.swap.RouteResultParallel
 */
export type RouteResultParallel = Message<"sunrise.swap.RouteResultParallel"> & {
  /**
   * @generated from field: repeated sunrise.swap.RouteResult route_results = 1;
   */
  routeResults: RouteResult[];
};

/**
 * Describes the message sunrise.swap.RouteResultParallel.
 * Use `create(RouteResultParallelSchema)` to create a new message.
 */
export const RouteResultParallelSchema: GenMessage<RouteResultParallel> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 6);

/**
 * RouteResult
 *
 * @generated from message sunrise.swap.RouteResult
 */
export type RouteResult = Message<"sunrise.swap.RouteResult"> & {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 1;
   */
  tokenIn?: Coin;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 2;
   */
  tokenOut?: Coin;

  /**
   * strategy
   *
   * @generated from oneof sunrise.swap.RouteResult.strategy
   */
  strategy: {
    /**
     * @generated from field: sunrise.swap.RouteResultPool pool = 3;
     */
    value: RouteResultPool;
    case: "pool";
  } | {
    /**
     * @generated from field: sunrise.swap.RouteResultSeries series = 4;
     */
    value: RouteResultSeries;
    case: "series";
  } | {
    /**
     * @generated from field: sunrise.swap.RouteResultParallel parallel = 5;
     */
    value: RouteResultParallel;
    case: "parallel";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message sunrise.swap.RouteResult.
 * Use `create(RouteResultSchema)` to create a new message.
 */
export const RouteResultSchema: GenMessage<RouteResult> = /*@__PURE__*/
  messageDesc(file_sunrise_swap_route, 7);

