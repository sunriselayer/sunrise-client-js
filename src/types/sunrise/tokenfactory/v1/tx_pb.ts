// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file sunrise/tokenfactory/v1/tx.proto (package sunrise.tokenfactory.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_amino_amino } from "../../../amino/amino_pb";
import { file_cosmos_msg_v1_msg } from "../../../cosmos/msg/v1/msg_pb";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import type { Coin } from "../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../../cosmos/base/v1beta1/coin_pb";
import type { Metadata } from "../../../cosmos/bank/v1beta1/bank_pb";
import { file_cosmos_bank_v1beta1_bank } from "../../../cosmos/bank/v1beta1/bank_pb";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Params } from "./params_pb";
import { file_sunrise_tokenfactory_v1_params } from "./params_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sunrise/tokenfactory/v1/tx.proto.
 */
export const file_sunrise_tokenfactory_v1_tx: GenFile = /*@__PURE__*/
  fileDesc("CiBzdW5yaXNlL3Rva2VuZmFjdG9yeS92MS90eC5wcm90bxIXc3VucmlzZS50b2tlbmZhY3RvcnkudjEirgEKD01zZ1VwZGF0ZVBhcmFtcxIrCglhdXRob3JpdHkYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxI6CgZwYXJhbXMYAiABKAsyHy5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5QYXJhbXNCCcjeHwCo57AqAToyguewKglhdXRob3JpdHmK57AqH3N1bnJpc2UvZmFjdG9yeS9Nc2dVcGRhdGVQYXJhbXMiGQoXTXNnVXBkYXRlUGFyYW1zUmVzcG9uc2UiigEKDk1zZ0NyZWF0ZURlbm9tEiEKBnNlbmRlchgBIAEoCUIR8t4fDXlhbWw6InNlbmRlciISJQoIc3ViZGVub20YAiABKAlCE/LeHw95YW1sOiJzdWJkZW5vbSI6LoLnsCoGc2VuZGVyiuewKh5zdW5yaXNlL2ZhY3RvcnkvTXNnQ3JlYXRlRGVub20iTQoWTXNnQ3JlYXRlRGVub21SZXNwb25zZRIzCg9uZXdfdG9rZW5fZGVub20YASABKAlCGvLeHxZ5YW1sOiJuZXdfdG9rZW5fZGVub20iItEBCgdNc2dNaW50EiEKBnNlbmRlchgBIAEoCUIR8t4fDXlhbWw6InNlbmRlciISQAoGYW1vdW50GAIgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQhXI3h8A8t4fDXlhbWw6ImFtb3VudCISOAoPbWludF90b19hZGRyZXNzGAMgASgJQh/y3h8WeWFtbDoibWludF90b19hZGRyZXNzIqjnsCoBOieC57AqBnNlbmRlcornsCoXc3VucmlzZS9mYWN0b3J5L01zZ01pbnQiEQoPTXNnTWludFJlc3BvbnNlItUBCgdNc2dCdXJuEiEKBnNlbmRlchgBIAEoCUIR8t4fDXlhbWw6InNlbmRlciISQAoGYW1vdW50GAIgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQhXI3h8A8t4fDXlhbWw6ImFtb3VudCISPAoRYnVybl9mcm9tX2FkZHJlc3MYAyABKAlCIfLeHxh5YW1sOiJidXJuX2Zyb21fYWRkcmVzcyKo57AqATonguewKgZzZW5kZXKK57AqF3N1bnJpc2UvZmFjdG9yeS9Nc2dCdXJuIhEKD01zZ0J1cm5SZXNwb25zZSKtAQoOTXNnQ2hhbmdlQWRtaW4SIQoGc2VuZGVyGAEgASgJQhHy3h8NeWFtbDoic2VuZGVyIhIfCgVkZW5vbRgCIAEoCUIQ8t4fDHlhbWw6ImRlbm9tIhInCgluZXdfYWRtaW4YAyABKAlCFPLeHxB5YW1sOiJuZXdfYWRtaW4iOi6C57AqBnNlbmRlcornsCoec3VucmlzZS9mYWN0b3J5L01zZ0NoYW5nZUFkbWluIhgKFk1zZ0NoYW5nZUFkbWluUmVzcG9uc2UizAEKFE1zZ1NldEJlZm9yZVNlbmRIb29rEiEKBnNlbmRlchgBIAEoCUIR8t4fDXlhbWw6InNlbmRlciISHwoFZGVub20YAiABKAlCEPLeHwx5YW1sOiJkZW5vbSISOgoQY29zbXdhc21fYWRkcmVzcxgDIAEoCUIg8t4fF3lhbWw6ImNvc213YXNtX2FkZHJlc3MiqOewKgE6NILnsCoGc2VuZGVyiuewKiRzdW5yaXNlL2ZhY3RvcnkvTXNnU2V0QmVmb3JlU2VuZEhvb2siHgocTXNnU2V0QmVmb3JlU2VuZEhvb2tSZXNwb25zZSK3AQoTTXNnU2V0RGVub21NZXRhZGF0YRIhCgZzZW5kZXIYASABKAlCEfLeHw15YW1sOiJzZW5kZXIiEkgKCG1ldGFkYXRhGAIgASgLMh0uY29zbW9zLmJhbmsudjFiZXRhMS5NZXRhZGF0YUIXyN4fAPLeHw95YW1sOiJtZXRhZGF0YSI6M4LnsCoGc2VuZGVyiuewKiNzdW5yaXNlL2ZhY3RvcnkvTXNnU2V0RGVub21NZXRhZGF0YSIdChtNc2dTZXREZW5vbU1ldGFkYXRhUmVzcG9uc2UipwIKEE1zZ0ZvcmNlVHJhbnNmZXISIQoGc2VuZGVyGAEgASgJQhHy3h8NeWFtbDoic2VuZGVyIhJACgZhbW91bnQYAiABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CFcjeHwDy3h8NeWFtbDoiYW1vdW50IhI/ChV0cmFuc2Zlcl9mcm9tX2FkZHJlc3MYAyABKAlCIPLeHxx5YW1sOiJ0cmFuc2Zlcl9mcm9tX2FkZHJlc3MiEjsKE3RyYW5zZmVyX3RvX2FkZHJlc3MYBCABKAlCHvLeHxp5YW1sOiJ0cmFuc2Zlcl90b19hZGRyZXNzIjowguewKgZzZW5kZXKK57AqIHN1bnJpc2UvZmFjdG9yeS9Nc2dGb3JjZVRyYW5zZmVyIhoKGE1zZ0ZvcmNlVHJhbnNmZXJSZXNwb25zZTLZBQoDTXNnEmoKDFVwZGF0ZVBhcmFtcxIoLnN1bnJpc2UudG9rZW5mYWN0b3J5LnYxLk1zZ1VwZGF0ZVBhcmFtcxowLnN1bnJpc2UudG9rZW5mYWN0b3J5LnYxLk1zZ1VwZGF0ZVBhcmFtc1Jlc3BvbnNlEmcKC0NyZWF0ZURlbm9tEicuc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnQ3JlYXRlRGVub20aLy5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dDcmVhdGVEZW5vbVJlc3BvbnNlElIKBE1pbnQSIC5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dNaW50Giguc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnTWludFJlc3BvbnNlElIKBEJ1cm4SIC5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dCdXJuGiguc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnQnVyblJlc3BvbnNlEmcKC0NoYW5nZUFkbWluEicuc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnQ2hhbmdlQWRtaW4aLy5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dDaGFuZ2VBZG1pblJlc3BvbnNlEnYKEFNldERlbm9tTWV0YWRhdGESLC5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dTZXREZW5vbU1ldGFkYXRhGjQuc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnU2V0RGVub21NZXRhZGF0YVJlc3BvbnNlEm0KDUZvcmNlVHJhbnNmZXISKS5zdW5yaXNlLnRva2VuZmFjdG9yeS52MS5Nc2dGb3JjZVRyYW5zZmVyGjEuc3VucmlzZS50b2tlbmZhY3RvcnkudjEuTXNnRm9yY2VUcmFuc2ZlclJlc3BvbnNlGgWA57AqAULaAQobY29tLnN1bnJpc2UudG9rZW5mYWN0b3J5LnYxQgdUeFByb3RvUAFaNGdpdGh1Yi5jb20vc3VucmlzZWxheWVyL3N1bnJpc2UveC90b2tlbmZhY3RvcnkvdHlwZXOiAgNTVFiqAhdTdW5yaXNlLlRva2VuZmFjdG9yeS5WMcoCF1N1bnJpc2VcVG9rZW5mYWN0b3J5XFYx4gIjU3VucmlzZVxUb2tlbmZhY3RvcnlcVjFcR1BCTWV0YWRhdGHqAhlTdW5yaXNlOjpUb2tlbmZhY3Rvcnk6OlYxYgZwcm90bzM", [file_amino_amino, file_cosmos_msg_v1_msg, file_cosmos_proto_cosmos, file_cosmos_base_v1beta1_coin, file_cosmos_bank_v1beta1_bank, file_gogoproto_gogo, file_sunrise_tokenfactory_v1_params]);

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgUpdateParams
 */
export type MsgUpdateParams = Message<"sunrise.tokenfactory.v1.MsgUpdateParams"> & {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.tokenfactory.v1.Params params = 2;
   */
  params?: Params;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgUpdateParams.
 * Use `create(MsgUpdateParamsSchema)` to create a new message.
 */
export const MsgUpdateParamsSchema: GenMessage<MsgUpdateParams> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 0);

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgUpdateParamsResponse
 */
export type MsgUpdateParamsResponse = Message<"sunrise.tokenfactory.v1.MsgUpdateParamsResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgUpdateParamsResponse.
 * Use `create(MsgUpdateParamsResponseSchema)` to create a new message.
 */
export const MsgUpdateParamsResponseSchema: GenMessage<MsgUpdateParamsResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 1);

/**
 * MsgCreateDenom defines the message structure for the CreateDenom gRPC service
 * method. It allows an account to create a new denom. It requires a sender
 * address and a sub denomination. The (sender_address, sub_denomination) tuple
 * must be unique and cannot be reused.
 *
 * The resulting denom created is defined as
 * <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
 * originally set to be the creator, but this can be changed later. The token
 * denom does not indicate the current admin.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgCreateDenom
 */
export type MsgCreateDenom = Message<"sunrise.tokenfactory.v1.MsgCreateDenom"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * subdenom can be up to 44 "alphanumeric" characters long.
   *
   * @generated from field: string subdenom = 2;
   */
  subdenom: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgCreateDenom.
 * Use `create(MsgCreateDenomSchema)` to create a new message.
 */
export const MsgCreateDenomSchema: GenMessage<MsgCreateDenom> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 2);

/**
 * MsgCreateDenomResponse is the return value of MsgCreateDenom
 * It returns the full string of the newly created denom
 *
 * @generated from message sunrise.tokenfactory.v1.MsgCreateDenomResponse
 */
export type MsgCreateDenomResponse = Message<"sunrise.tokenfactory.v1.MsgCreateDenomResponse"> & {
  /**
   * @generated from field: string new_token_denom = 1;
   */
  newTokenDenom: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgCreateDenomResponse.
 * Use `create(MsgCreateDenomResponseSchema)` to create a new message.
 */
export const MsgCreateDenomResponseSchema: GenMessage<MsgCreateDenomResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 3);

/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.
 * Only the admin of the token factory denom has permission to mint unless
 * the denom does not have any admin.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgMint
 */
export type MsgMint = Message<"sunrise.tokenfactory.v1.MsgMint"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string mint_to_address = 3;
   */
  mintToAddress: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgMint.
 * Use `create(MsgMintSchema)` to create a new message.
 */
export const MsgMintSchema: GenMessage<MsgMint> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 4);

/**
 * MsgMintResponse defines the response structure for an executed
 * MsgMint message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgMintResponse
 */
export type MsgMintResponse = Message<"sunrise.tokenfactory.v1.MsgMintResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgMintResponse.
 * Use `create(MsgMintResponseSchema)` to create a new message.
 */
export const MsgMintResponseSchema: GenMessage<MsgMintResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 5);

/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.
 * Only the admin of the token factory denom has permission to burn unless
 * the denom does not have any admin.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgBurn
 */
export type MsgBurn = Message<"sunrise.tokenfactory.v1.MsgBurn"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string burn_from_address = 3;
   */
  burnFromAddress: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgBurn.
 * Use `create(MsgBurnSchema)` to create a new message.
 */
export const MsgBurnSchema: GenMessage<MsgBurn> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 6);

/**
 * MsgBurnResponse defines the response structure for an executed
 * MsgBurn message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgBurnResponse
 */
export type MsgBurnResponse = Message<"sunrise.tokenfactory.v1.MsgBurnResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgBurnResponse.
 * Use `create(MsgBurnResponseSchema)` to create a new message.
 */
export const MsgBurnResponseSchema: GenMessage<MsgBurnResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 7);

/**
 * MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
 * adminship of a denom to a new account
 *
 * @generated from message sunrise.tokenfactory.v1.MsgChangeAdmin
 */
export type MsgChangeAdmin = Message<"sunrise.tokenfactory.v1.MsgChangeAdmin"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * @generated from field: string new_admin = 3;
   */
  newAdmin: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgChangeAdmin.
 * Use `create(MsgChangeAdminSchema)` to create a new message.
 */
export const MsgChangeAdminSchema: GenMessage<MsgChangeAdmin> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 8);

/**
 * MsgChangeAdminResponse defines the response structure for an executed
 * MsgChangeAdmin message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgChangeAdminResponse
 */
export type MsgChangeAdminResponse = Message<"sunrise.tokenfactory.v1.MsgChangeAdminResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgChangeAdminResponse.
 * Use `create(MsgChangeAdminResponseSchema)` to create a new message.
 */
export const MsgChangeAdminResponseSchema: GenMessage<MsgChangeAdminResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 9);

/**
 * MsgSetBeforeSendHook is the sdk.Msg type for allowing an admin account to
 * assign a CosmWasm contract to call with a BeforeSend hook
 *
 * @generated from message sunrise.tokenfactory.v1.MsgSetBeforeSendHook
 */
export type MsgSetBeforeSendHook = Message<"sunrise.tokenfactory.v1.MsgSetBeforeSendHook"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string denom = 2;
   */
  denom: string;

  /**
   * @generated from field: string cosmwasm_address = 3;
   */
  cosmwasmAddress: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgSetBeforeSendHook.
 * Use `create(MsgSetBeforeSendHookSchema)` to create a new message.
 */
export const MsgSetBeforeSendHookSchema: GenMessage<MsgSetBeforeSendHook> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 10);

/**
 * MsgSetBeforeSendHookResponse defines the response structure for an executed
 * MsgSetBeforeSendHook message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgSetBeforeSendHookResponse
 */
export type MsgSetBeforeSendHookResponse = Message<"sunrise.tokenfactory.v1.MsgSetBeforeSendHookResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgSetBeforeSendHookResponse.
 * Use `create(MsgSetBeforeSendHookResponseSchema)` to create a new message.
 */
export const MsgSetBeforeSendHookResponseSchema: GenMessage<MsgSetBeforeSendHookResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 11);

/**
 * MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
 * the denom's bank metadata
 *
 * @generated from message sunrise.tokenfactory.v1.MsgSetDenomMetadata
 */
export type MsgSetDenomMetadata = Message<"sunrise.tokenfactory.v1.MsgSetDenomMetadata"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.bank.v1beta1.Metadata metadata = 2;
   */
  metadata?: Metadata;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgSetDenomMetadata.
 * Use `create(MsgSetDenomMetadataSchema)` to create a new message.
 */
export const MsgSetDenomMetadataSchema: GenMessage<MsgSetDenomMetadata> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 12);

/**
 * MsgSetDenomMetadataResponse defines the response structure for an executed
 * MsgSetDenomMetadata message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgSetDenomMetadataResponse
 */
export type MsgSetDenomMetadataResponse = Message<"sunrise.tokenfactory.v1.MsgSetDenomMetadataResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgSetDenomMetadataResponse.
 * Use `create(MsgSetDenomMetadataResponseSchema)` to create a new message.
 */
export const MsgSetDenomMetadataResponseSchema: GenMessage<MsgSetDenomMetadataResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 13);

/**
 * MsgForceTransfer
 *
 * @generated from message sunrise.tokenfactory.v1.MsgForceTransfer
 */
export type MsgForceTransfer = Message<"sunrise.tokenfactory.v1.MsgForceTransfer"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: string transfer_from_address = 3;
   */
  transferFromAddress: string;

  /**
   * @generated from field: string transfer_to_address = 4;
   */
  transferToAddress: string;
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgForceTransfer.
 * Use `create(MsgForceTransferSchema)` to create a new message.
 */
export const MsgForceTransferSchema: GenMessage<MsgForceTransfer> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 14);

/**
 * MsgForceTransferResponse defines the response structure for an executed
 * MsgForceTransfer message.
 *
 * @generated from message sunrise.tokenfactory.v1.MsgForceTransferResponse
 */
export type MsgForceTransferResponse = Message<"sunrise.tokenfactory.v1.MsgForceTransferResponse"> & {
};

/**
 * Describes the message sunrise.tokenfactory.v1.MsgForceTransferResponse.
 * Use `create(MsgForceTransferResponseSchema)` to create a new message.
 */
export const MsgForceTransferResponseSchema: GenMessage<MsgForceTransferResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_tokenfactory_v1_tx, 15);

/**
 * Msg defines the Msg service.
 *
 * @generated from service sunrise.tokenfactory.v1.Msg
 */
export const Msg: GenService<{
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.UpdateParams
   */
  updateParams: {
    methodKind: "unary";
    input: typeof MsgUpdateParamsSchema;
    output: typeof MsgUpdateParamsResponseSchema;
  },
  /**
   * CreateDenom
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.CreateDenom
   */
  createDenom: {
    methodKind: "unary";
    input: typeof MsgCreateDenomSchema;
    output: typeof MsgCreateDenomResponseSchema;
  },
  /**
   * Mint
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.Mint
   */
  mint: {
    methodKind: "unary";
    input: typeof MsgMintSchema;
    output: typeof MsgMintResponseSchema;
  },
  /**
   * Burn
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.Burn
   */
  burn: {
    methodKind: "unary";
    input: typeof MsgBurnSchema;
    output: typeof MsgBurnResponseSchema;
  },
  /**
   * ChangeAdmin
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.ChangeAdmin
   */
  changeAdmin: {
    methodKind: "unary";
    input: typeof MsgChangeAdminSchema;
    output: typeof MsgChangeAdminResponseSchema;
  },
  /**
   * SetDenomMetadata
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.SetDenomMetadata
   */
  setDenomMetadata: {
    methodKind: "unary";
    input: typeof MsgSetDenomMetadataSchema;
    output: typeof MsgSetDenomMetadataResponseSchema;
  },
  /**
   * // SetBeforeSendHook
   * rpc SetBeforeSendHook(MsgSetBeforeSendHook)
   *     returns (MsgSetBeforeSendHookResponse);
   * ForceTransfer
   *
   * @generated from rpc sunrise.tokenfactory.v1.Msg.ForceTransfer
   */
  forceTransfer: {
    methodKind: "unary";
    input: typeof MsgForceTransferSchema;
    output: typeof MsgForceTransferResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sunrise_tokenfactory_v1_tx, 0);

