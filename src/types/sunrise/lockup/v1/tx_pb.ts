// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file sunrise/lockup/v1/tx.proto (package sunrise.lockup.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Coin } from "../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_base_v1beta1_coin } from "../../../cosmos/base/v1beta1/coin_pb";
import { file_cosmos_msg_v1_msg } from "../../../cosmos/msg/v1/msg_pb";
import { file_cosmos_proto_cosmos } from "../../../cosmos_proto/cosmos_pb";
import { file_gogoproto_gogo } from "../../../gogoproto/gogo_pb";
import type { Params } from "./params_pb";
import { file_sunrise_lockup_v1_params } from "./params_pb";
import { file_amino_amino } from "../../../amino/amino_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sunrise/lockup/v1/tx.proto.
 */
export const file_sunrise_lockup_v1_tx: GenFile = /*@__PURE__*/
  fileDesc("ChpzdW5yaXNlL2xvY2t1cC92MS90eC5wcm90bxIRc3VucmlzZS5sb2NrdXAudjEiogEKD01zZ1VwZGF0ZVBhcmFtcxIrCglhdXRob3JpdHkYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIvCgZwYXJhbXMYAiABKAsyGS5zdW5yaXNlLmxvY2t1cC52MS5QYXJhbXNCBMjeHwA6MYLnsCoJYXV0aG9yaXR5iuewKh5zdW5yaXNlL2xvY2t1cC9Nc2dVcGRhdGVQYXJhbXMiGQoXTXNnVXBkYXRlUGFyYW1zUmVzcG9uc2Ui9QEKFE1zZ0luaXRMb2NrdXBBY2NvdW50EigKBnNlbmRlchgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEicKBW93bmVyGAIgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSEgoKc3RhcnRfdGltZRgDIAEoAxIQCghlbmRfdGltZRgEIAEoAxIvCgZhbW91bnQYBSABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CBMjeHwA6M4LnsCoGc2VuZGVyiuewKiNzdW5yaXNlL2xvY2t1cC9Nc2dJbml0TG9ja3VwQWNjb3VudCIeChxNc2dJbml0TG9ja3VwQWNjb3VudFJlc3BvbnNlIv0BChRNc2dOb25Wb3RpbmdEZWxlZ2F0ZRInCgVvd25lchgBIAEoCUIY0rQtFGNvc21vcy5BZGRyZXNzU3RyaW5nEhkKEWxvY2t1cF9hY2NvdW50X2lkGAIgASgEEjwKEXZhbGlkYXRvcl9hZGRyZXNzGAMgASgJQiHStC0dY29zbW9zLlZhbGlkYXRvckFkZHJlc3NTdHJpbmcSLwoGYW1vdW50GAQgASgLMhkuY29zbW9zLmJhc2UudjFiZXRhMS5Db2luQgTI3h8AOjKC57AqBW93bmVyiuewKiNzdW5yaXNlL2xvY2t1cC9Nc2dOb25Wb3RpbmdEZWxlZ2F0ZSIeChxNc2dOb25Wb3RpbmdEZWxlZ2F0ZVJlc3BvbnNlIoECChZNc2dOb25Wb3RpbmdVbmRlbGVnYXRlEicKBW93bmVyGAEgASgJQhjStC0UY29zbW9zLkFkZHJlc3NTdHJpbmcSGQoRbG9ja3VwX2FjY291bnRfaWQYAiABKAQSPAoRdmFsaWRhdG9yX2FkZHJlc3MYAyABKAlCIdK0LR1jb3Ntb3MuVmFsaWRhdG9yQWRkcmVzc1N0cmluZxIvCgZhbW91bnQYBCABKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CBMjeHwA6NILnsCoFb3duZXKK57AqJXN1bnJpc2UvbG9ja3VwL01zZ05vblZvdGluZ1VuZGVsZWdhdGUiIAoeTXNnTm9uVm90aW5nVW5kZWxlZ2F0ZVJlc3BvbnNlIsIBCg9Nc2dDbGFpbVJld2FyZHMSJwoFb3duZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIZChFsb2NrdXBfYWNjb3VudF9pZBgCIAEoBBI8ChF2YWxpZGF0b3JfYWRkcmVzcxgDIAEoCUIh0rQtHWNvc21vcy5WYWxpZGF0b3JBZGRyZXNzU3RyaW5nOi2C57AqBW93bmVyiuewKh5zdW5yaXNlL2xvY2t1cC9Nc2dDbGFpbVJld2FyZHMiGQoXTXNnQ2xhaW1SZXdhcmRzUmVzcG9uc2Ui/gEKB01zZ1NlbmQSJwoFb3duZXIYASABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxIZChFsb2NrdXBfYWNjb3VudF9pZBgCIAEoBBIrCglyZWNpcGllbnQYAyABKAlCGNK0LRRjb3Ntb3MuQWRkcmVzc1N0cmluZxJbCgZhbW91bnQYBCADKAsyGS5jb3Ntb3MuYmFzZS52MWJldGExLkNvaW5CMMjeHwCq3x8oZ2l0aHViLmNvbS9jb3Ntb3MvY29zbW9zLXNkay90eXBlcy5Db2luczolguewKgVvd25lcornsCoWc3VucmlzZS9sb2NrdXAvTXNnU2VuZCIRCg9Nc2dTZW5kUmVzcG9uc2Uy5wQKA01zZxJeCgxVcGRhdGVQYXJhbXMSIi5zdW5yaXNlLmxvY2t1cC52MS5Nc2dVcGRhdGVQYXJhbXMaKi5zdW5yaXNlLmxvY2t1cC52MS5Nc2dVcGRhdGVQYXJhbXNSZXNwb25zZRJtChFJbml0TG9ja3VwQWNjb3VudBInLnN1bnJpc2UubG9ja3VwLnYxLk1zZ0luaXRMb2NrdXBBY2NvdW50Gi8uc3VucmlzZS5sb2NrdXAudjEuTXNnSW5pdExvY2t1cEFjY291bnRSZXNwb25zZRJtChFOb25Wb3RpbmdEZWxlZ2F0ZRInLnN1bnJpc2UubG9ja3VwLnYxLk1zZ05vblZvdGluZ0RlbGVnYXRlGi8uc3VucmlzZS5sb2NrdXAudjEuTXNnTm9uVm90aW5nRGVsZWdhdGVSZXNwb25zZRJzChNOb25Wb3RpbmdVbmRlbGVnYXRlEikuc3VucmlzZS5sb2NrdXAudjEuTXNnTm9uVm90aW5nVW5kZWxlZ2F0ZRoxLnN1bnJpc2UubG9ja3VwLnYxLk1zZ05vblZvdGluZ1VuZGVsZWdhdGVSZXNwb25zZRJeCgxDbGFpbVJld2FyZHMSIi5zdW5yaXNlLmxvY2t1cC52MS5Nc2dDbGFpbVJld2FyZHMaKi5zdW5yaXNlLmxvY2t1cC52MS5Nc2dDbGFpbVJld2FyZHNSZXNwb25zZRJGCgRTZW5kEhouc3VucmlzZS5sb2NrdXAudjEuTXNnU2VuZBoiLnN1bnJpc2UubG9ja3VwLnYxLk1zZ1NlbmRSZXNwb25zZRoFgOewKgFCtgEKFWNvbS5zdW5yaXNlLmxvY2t1cC52MUIHVHhQcm90b1ABWi5naXRodWIuY29tL3N1bnJpc2VsYXllci9zdW5yaXNlL3gvbG9ja3VwL3R5cGVzogIDU0xYqgIRU3VucmlzZS5Mb2NrdXAuVjHKAhFTdW5yaXNlXExvY2t1cFxWMeICHVN1bnJpc2VcTG9ja3VwXFYxXEdQQk1ldGFkYXRh6gITU3VucmlzZTo6TG9ja3VwOjpWMWIGcHJvdG8z", [file_cosmos_base_v1beta1_coin, file_cosmos_msg_v1_msg, file_cosmos_proto_cosmos, file_gogoproto_gogo, file_sunrise_lockup_v1_params, file_amino_amino]);

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message sunrise.lockup.v1.MsgUpdateParams
 */
export type MsgUpdateParams = Message<"sunrise.lockup.v1.MsgUpdateParams"> & {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority: string;

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: sunrise.lockup.v1.Params params = 2;
   */
  params?: Params;
};

/**
 * Describes the message sunrise.lockup.v1.MsgUpdateParams.
 * Use `create(MsgUpdateParamsSchema)` to create a new message.
 */
export const MsgUpdateParamsSchema: GenMessage<MsgUpdateParams> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 0);

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message sunrise.lockup.v1.MsgUpdateParamsResponse
 */
export type MsgUpdateParamsResponse = Message<"sunrise.lockup.v1.MsgUpdateParamsResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgUpdateParamsResponse.
 * Use `create(MsgUpdateParamsResponseSchema)` to create a new message.
 */
export const MsgUpdateParamsResponseSchema: GenMessage<MsgUpdateParamsResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 1);

/**
 * MsgInitLockupAccount
 *
 * @generated from message sunrise.lockup.v1.MsgInitLockupAccount
 */
export type MsgInitLockupAccount = Message<"sunrise.lockup.v1.MsgInitLockupAccount"> & {
  /**
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * start of lockup as unix time (in seconds).
   *
   * @generated from field: int64 start_time = 3;
   */
  startTime: bigint;

  /**
   * end of lockup as unix time (in seconds).
   *
   * @generated from field: int64 end_time = 4;
   */
  endTime: bigint;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 5;
   */
  amount?: Coin;
};

/**
 * Describes the message sunrise.lockup.v1.MsgInitLockupAccount.
 * Use `create(MsgInitLockupAccountSchema)` to create a new message.
 */
export const MsgInitLockupAccountSchema: GenMessage<MsgInitLockupAccount> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 2);

/**
 * MsgInitLockupAccountResponse
 *
 * @generated from message sunrise.lockup.v1.MsgInitLockupAccountResponse
 */
export type MsgInitLockupAccountResponse = Message<"sunrise.lockup.v1.MsgInitLockupAccountResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgInitLockupAccountResponse.
 * Use `create(MsgInitLockupAccountResponseSchema)` to create a new message.
 */
export const MsgInitLockupAccountResponseSchema: GenMessage<MsgInitLockupAccountResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 3);

/**
 * MsgNonVotingDelegate
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingDelegate
 */
export type MsgNonVotingDelegate = Message<"sunrise.lockup.v1.MsgNonVotingDelegate"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId: bigint;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;
};

/**
 * Describes the message sunrise.lockup.v1.MsgNonVotingDelegate.
 * Use `create(MsgNonVotingDelegateSchema)` to create a new message.
 */
export const MsgNonVotingDelegateSchema: GenMessage<MsgNonVotingDelegate> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 4);

/**
 * MsgNonVotingDelegateResponse
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingDelegateResponse
 */
export type MsgNonVotingDelegateResponse = Message<"sunrise.lockup.v1.MsgNonVotingDelegateResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgNonVotingDelegateResponse.
 * Use `create(MsgNonVotingDelegateResponseSchema)` to create a new message.
 */
export const MsgNonVotingDelegateResponseSchema: GenMessage<MsgNonVotingDelegateResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 5);

/**
 * MsgNonVotingUndelegate
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingUndelegate
 */
export type MsgNonVotingUndelegate = Message<"sunrise.lockup.v1.MsgNonVotingUndelegate"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId: bigint;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress: string;

  /**
   * @generated from field: cosmos.base.v1beta1.Coin amount = 4;
   */
  amount?: Coin;
};

/**
 * Describes the message sunrise.lockup.v1.MsgNonVotingUndelegate.
 * Use `create(MsgNonVotingUndelegateSchema)` to create a new message.
 */
export const MsgNonVotingUndelegateSchema: GenMessage<MsgNonVotingUndelegate> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 6);

/**
 * MsgNonVotingUndelegateResponse
 *
 * @generated from message sunrise.lockup.v1.MsgNonVotingUndelegateResponse
 */
export type MsgNonVotingUndelegateResponse = Message<"sunrise.lockup.v1.MsgNonVotingUndelegateResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgNonVotingUndelegateResponse.
 * Use `create(MsgNonVotingUndelegateResponseSchema)` to create a new message.
 */
export const MsgNonVotingUndelegateResponseSchema: GenMessage<MsgNonVotingUndelegateResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 7);

/**
 * MsgClaimRewards
 *
 * @generated from message sunrise.lockup.v1.MsgClaimRewards
 */
export type MsgClaimRewards = Message<"sunrise.lockup.v1.MsgClaimRewards"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId: bigint;

  /**
   * @generated from field: string validator_address = 3;
   */
  validatorAddress: string;
};

/**
 * Describes the message sunrise.lockup.v1.MsgClaimRewards.
 * Use `create(MsgClaimRewardsSchema)` to create a new message.
 */
export const MsgClaimRewardsSchema: GenMessage<MsgClaimRewards> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 8);

/**
 * MsgClaimRewardsResponse
 *
 * @generated from message sunrise.lockup.v1.MsgClaimRewardsResponse
 */
export type MsgClaimRewardsResponse = Message<"sunrise.lockup.v1.MsgClaimRewardsResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgClaimRewardsResponse.
 * Use `create(MsgClaimRewardsResponseSchema)` to create a new message.
 */
export const MsgClaimRewardsResponseSchema: GenMessage<MsgClaimRewardsResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 9);

/**
 * MsgSend
 *
 * @generated from message sunrise.lockup.v1.MsgSend
 */
export type MsgSend = Message<"sunrise.lockup.v1.MsgSend"> & {
  /**
   * @generated from field: string owner = 1;
   */
  owner: string;

  /**
   * @generated from field: uint64 lockup_account_id = 2;
   */
  lockupAccountId: bigint;

  /**
   * @generated from field: string recipient = 3;
   */
  recipient: string;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin amount = 4;
   */
  amount: Coin[];
};

/**
 * Describes the message sunrise.lockup.v1.MsgSend.
 * Use `create(MsgSendSchema)` to create a new message.
 */
export const MsgSendSchema: GenMessage<MsgSend> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 10);

/**
 * MsgSendResponse
 *
 * @generated from message sunrise.lockup.v1.MsgSendResponse
 */
export type MsgSendResponse = Message<"sunrise.lockup.v1.MsgSendResponse"> & {
};

/**
 * Describes the message sunrise.lockup.v1.MsgSendResponse.
 * Use `create(MsgSendResponseSchema)` to create a new message.
 */
export const MsgSendResponseSchema: GenMessage<MsgSendResponse> = /*@__PURE__*/
  messageDesc(file_sunrise_lockup_v1_tx, 11);

/**
 * Msg defines the Msg service.
 *
 * @generated from service sunrise.lockup.v1.Msg
 */
export const Msg: GenService<{
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   *
   * @generated from rpc sunrise.lockup.v1.Msg.UpdateParams
   */
  updateParams: {
    methodKind: "unary";
    input: typeof MsgUpdateParamsSchema;
    output: typeof MsgUpdateParamsResponseSchema;
  },
  /**
   * InitLockupAccount
   *
   * @generated from rpc sunrise.lockup.v1.Msg.InitLockupAccount
   */
  initLockupAccount: {
    methodKind: "unary";
    input: typeof MsgInitLockupAccountSchema;
    output: typeof MsgInitLockupAccountResponseSchema;
  },
  /**
   * NonVotingDelegate
   *
   * @generated from rpc sunrise.lockup.v1.Msg.NonVotingDelegate
   */
  nonVotingDelegate: {
    methodKind: "unary";
    input: typeof MsgNonVotingDelegateSchema;
    output: typeof MsgNonVotingDelegateResponseSchema;
  },
  /**
   * NonVotingUndelegate
   *
   * @generated from rpc sunrise.lockup.v1.Msg.NonVotingUndelegate
   */
  nonVotingUndelegate: {
    methodKind: "unary";
    input: typeof MsgNonVotingUndelegateSchema;
    output: typeof MsgNonVotingUndelegateResponseSchema;
  },
  /**
   * ClaimRewards
   *
   * @generated from rpc sunrise.lockup.v1.Msg.ClaimRewards
   */
  claimRewards: {
    methodKind: "unary";
    input: typeof MsgClaimRewardsSchema;
    output: typeof MsgClaimRewardsResponseSchema;
  },
  /**
   * Send
   *
   * @generated from rpc sunrise.lockup.v1.Msg.Send
   */
  send: {
    methodKind: "unary";
    input: typeof MsgSendSchema;
    output: typeof MsgSendResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_sunrise_lockup_v1_tx, 0);

