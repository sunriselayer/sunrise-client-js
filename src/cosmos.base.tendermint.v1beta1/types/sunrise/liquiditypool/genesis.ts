// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquiditypool/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AccumulatorObject, AccumulatorPosition } from "./accumulator";
import { Params } from "./params";
import { Pool } from "./pool";
import { Position } from "./position";

export const protobufPackage = "sunrise.liquiditypool";

/** GenesisState defines the liquiditypool module's genesis state. */
export interface GenesisState {
  /** params defines all the parameters of the module. */
  params: Params | undefined;
  pools: Pool[];
  poolCount: number;
  positions: Position[];
  positionCount: number;
  accumulators: AccumulatorObject[];
  accumulatorPositions: AccumulatorPosition[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    pools: [],
    poolCount: 0,
    positions: [],
    positionCount: 0,
    accumulators: [],
    accumulatorPositions: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.pools) {
      Pool.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.poolCount !== 0) {
      writer.uint32(24).uint64(message.poolCount);
    }
    for (const v of message.positions) {
      Position.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.positionCount !== 0) {
      writer.uint32(40).uint64(message.positionCount);
    }
    for (const v of message.accumulators) {
      AccumulatorObject.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.accumulatorPositions) {
      AccumulatorPosition.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pools.push(Pool.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.poolCount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.positions.push(Position.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.positionCount = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.accumulators.push(AccumulatorObject.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.accumulatorPositions.push(AccumulatorPosition.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      pools: globalThis.Array.isArray(object?.pools) ? object.pools.map((e: any) => Pool.fromJSON(e)) : [],
      poolCount: isSet(object.poolCount) ? globalThis.Number(object.poolCount) : 0,
      positions: globalThis.Array.isArray(object?.positions)
        ? object.positions.map((e: any) => Position.fromJSON(e))
        : [],
      positionCount: isSet(object.positionCount) ? globalThis.Number(object.positionCount) : 0,
      accumulators: globalThis.Array.isArray(object?.accumulators)
        ? object.accumulators.map((e: any) => AccumulatorObject.fromJSON(e))
        : [],
      accumulatorPositions: globalThis.Array.isArray(object?.accumulatorPositions)
        ? object.accumulatorPositions.map((e: any) => AccumulatorPosition.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => Pool.toJSON(e));
    }
    if (message.poolCount !== 0) {
      obj.poolCount = Math.round(message.poolCount);
    }
    if (message.positions?.length) {
      obj.positions = message.positions.map((e) => Position.toJSON(e));
    }
    if (message.positionCount !== 0) {
      obj.positionCount = Math.round(message.positionCount);
    }
    if (message.accumulators?.length) {
      obj.accumulators = message.accumulators.map((e) => AccumulatorObject.toJSON(e));
    }
    if (message.accumulatorPositions?.length) {
      obj.accumulatorPositions = message.accumulatorPositions.map((e) => AccumulatorPosition.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(base?: I): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(object: I): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.pools = object.pools?.map((e) => Pool.fromPartial(e)) || [];
    message.poolCount = object.poolCount ?? 0;
    message.positions = object.positions?.map((e) => Position.fromPartial(e)) || [];
    message.positionCount = object.positionCount ?? 0;
    message.accumulators = object.accumulators?.map((e) => AccumulatorObject.fromPartial(e)) || [];
    message.accumulatorPositions = object.accumulatorPositions?.map((e) => AccumulatorPosition.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
