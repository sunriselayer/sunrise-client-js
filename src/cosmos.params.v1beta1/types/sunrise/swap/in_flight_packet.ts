// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/swap/in_flight_packet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { RouteResult } from "./route";

export const protobufPackage = "sunrise.swap";

export interface PacketIndex {
  portId: string;
  channelId: string;
  sequence: number;
}

export interface IncomingInFlightPacket {
  index: PacketIndex | undefined;
  data: Uint8Array;
  srcPortId: string;
  srcChannelId: string;
  timeoutHeight: string;
  timeoutTimestamp: number;
  ack: Uint8Array;
  result: RouteResult | undefined;
  interfaceFee: string;
  outgoingIndexChange?: PacketIndex | undefined;
  ackChange?: Uint8Array | undefined;
  outgoingIndexForward?: PacketIndex | undefined;
  ackForward?: Uint8Array | undefined;
}

export interface OutgoingInFlightPacket {
  index: PacketIndex | undefined;
  ackWaitingIndex: PacketIndex | undefined;
  retriesRemaining: number;
}

function createBasePacketIndex(): PacketIndex {
  return { portId: "", channelId: "", sequence: 0 };
}

export const PacketIndex: MessageFns<PacketIndex> = {
  encode(message: PacketIndex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portId !== "") {
      writer.uint32(10).string(message.portId);
    }
    if (message.channelId !== "") {
      writer.uint32(18).string(message.channelId);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint64(message.sequence);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PacketIndex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.portId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channelId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketIndex {
    return {
      portId: isSet(object.portId) ? globalThis.String(object.portId) : "",
      channelId: isSet(object.channelId) ? globalThis.String(object.channelId) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
    };
  },

  toJSON(message: PacketIndex): unknown {
    const obj: any = {};
    if (message.portId !== "") {
      obj.portId = message.portId;
    }
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PacketIndex>, I>>(base?: I): PacketIndex {
    return PacketIndex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PacketIndex>, I>>(object: I): PacketIndex {
    const message = createBasePacketIndex();
    message.portId = object.portId ?? "";
    message.channelId = object.channelId ?? "";
    message.sequence = object.sequence ?? 0;
    return message;
  },
};

function createBaseIncomingInFlightPacket(): IncomingInFlightPacket {
  return {
    index: undefined,
    data: new Uint8Array(0),
    srcPortId: "",
    srcChannelId: "",
    timeoutHeight: "",
    timeoutTimestamp: 0,
    ack: new Uint8Array(0),
    result: undefined,
    interfaceFee: "",
    outgoingIndexChange: undefined,
    ackChange: undefined,
    outgoingIndexForward: undefined,
    ackForward: undefined,
  };
}

export const IncomingInFlightPacket: MessageFns<IncomingInFlightPacket> = {
  encode(message: IncomingInFlightPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      PacketIndex.encode(message.index, writer.uint32(10).fork()).join();
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.srcPortId !== "") {
      writer.uint32(26).string(message.srcPortId);
    }
    if (message.srcChannelId !== "") {
      writer.uint32(34).string(message.srcChannelId);
    }
    if (message.timeoutHeight !== "") {
      writer.uint32(42).string(message.timeoutHeight);
    }
    if (message.timeoutTimestamp !== 0) {
      writer.uint32(48).uint64(message.timeoutTimestamp);
    }
    if (message.ack.length !== 0) {
      writer.uint32(58).bytes(message.ack);
    }
    if (message.result !== undefined) {
      RouteResult.encode(message.result, writer.uint32(66).fork()).join();
    }
    if (message.interfaceFee !== "") {
      writer.uint32(74).string(message.interfaceFee);
    }
    if (message.outgoingIndexChange !== undefined) {
      PacketIndex.encode(message.outgoingIndexChange, writer.uint32(82).fork()).join();
    }
    if (message.ackChange !== undefined) {
      writer.uint32(90).bytes(message.ackChange);
    }
    if (message.outgoingIndexForward !== undefined) {
      PacketIndex.encode(message.outgoingIndexForward, writer.uint32(98).fork()).join();
    }
    if (message.ackForward !== undefined) {
      writer.uint32(106).bytes(message.ackForward);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IncomingInFlightPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIncomingInFlightPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = PacketIndex.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.srcPortId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.srcChannelId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.timeoutHeight = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timeoutTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ack = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.result = RouteResult.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interfaceFee = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.outgoingIndexChange = PacketIndex.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.ackChange = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.outgoingIndexForward = PacketIndex.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.ackForward = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IncomingInFlightPacket {
    return {
      index: isSet(object.index) ? PacketIndex.fromJSON(object.index) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      srcPortId: isSet(object.srcPortId) ? globalThis.String(object.srcPortId) : "",
      srcChannelId: isSet(object.srcChannelId) ? globalThis.String(object.srcChannelId) : "",
      timeoutHeight: isSet(object.timeoutHeight) ? globalThis.String(object.timeoutHeight) : "",
      timeoutTimestamp: isSet(object.timeoutTimestamp) ? globalThis.Number(object.timeoutTimestamp) : 0,
      ack: isSet(object.ack) ? bytesFromBase64(object.ack) : new Uint8Array(0),
      result: isSet(object.result) ? RouteResult.fromJSON(object.result) : undefined,
      interfaceFee: isSet(object.interfaceFee) ? globalThis.String(object.interfaceFee) : "",
      outgoingIndexChange: isSet(object.outgoingIndexChange)
        ? PacketIndex.fromJSON(object.outgoingIndexChange)
        : undefined,
      ackChange: isSet(object.ackChange) ? bytesFromBase64(object.ackChange) : undefined,
      outgoingIndexForward: isSet(object.outgoingIndexForward)
        ? PacketIndex.fromJSON(object.outgoingIndexForward)
        : undefined,
      ackForward: isSet(object.ackForward) ? bytesFromBase64(object.ackForward) : undefined,
    };
  },

  toJSON(message: IncomingInFlightPacket): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = PacketIndex.toJSON(message.index);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.srcPortId !== "") {
      obj.srcPortId = message.srcPortId;
    }
    if (message.srcChannelId !== "") {
      obj.srcChannelId = message.srcChannelId;
    }
    if (message.timeoutHeight !== "") {
      obj.timeoutHeight = message.timeoutHeight;
    }
    if (message.timeoutTimestamp !== 0) {
      obj.timeoutTimestamp = Math.round(message.timeoutTimestamp);
    }
    if (message.ack.length !== 0) {
      obj.ack = base64FromBytes(message.ack);
    }
    if (message.result !== undefined) {
      obj.result = RouteResult.toJSON(message.result);
    }
    if (message.interfaceFee !== "") {
      obj.interfaceFee = message.interfaceFee;
    }
    if (message.outgoingIndexChange !== undefined) {
      obj.outgoingIndexChange = PacketIndex.toJSON(message.outgoingIndexChange);
    }
    if (message.ackChange !== undefined) {
      obj.ackChange = base64FromBytes(message.ackChange);
    }
    if (message.outgoingIndexForward !== undefined) {
      obj.outgoingIndexForward = PacketIndex.toJSON(message.outgoingIndexForward);
    }
    if (message.ackForward !== undefined) {
      obj.ackForward = base64FromBytes(message.ackForward);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IncomingInFlightPacket>, I>>(base?: I): IncomingInFlightPacket {
    return IncomingInFlightPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IncomingInFlightPacket>, I>>(object: I): IncomingInFlightPacket {
    const message = createBaseIncomingInFlightPacket();
    message.index = (object.index !== undefined && object.index !== null)
      ? PacketIndex.fromPartial(object.index)
      : undefined;
    message.data = object.data ?? new Uint8Array(0);
    message.srcPortId = object.srcPortId ?? "";
    message.srcChannelId = object.srcChannelId ?? "";
    message.timeoutHeight = object.timeoutHeight ?? "";
    message.timeoutTimestamp = object.timeoutTimestamp ?? 0;
    message.ack = object.ack ?? new Uint8Array(0);
    message.result = (object.result !== undefined && object.result !== null)
      ? RouteResult.fromPartial(object.result)
      : undefined;
    message.interfaceFee = object.interfaceFee ?? "";
    message.outgoingIndexChange = (object.outgoingIndexChange !== undefined && object.outgoingIndexChange !== null)
      ? PacketIndex.fromPartial(object.outgoingIndexChange)
      : undefined;
    message.ackChange = object.ackChange ?? undefined;
    message.outgoingIndexForward = (object.outgoingIndexForward !== undefined && object.outgoingIndexForward !== null)
      ? PacketIndex.fromPartial(object.outgoingIndexForward)
      : undefined;
    message.ackForward = object.ackForward ?? undefined;
    return message;
  },
};

function createBaseOutgoingInFlightPacket(): OutgoingInFlightPacket {
  return { index: undefined, ackWaitingIndex: undefined, retriesRemaining: 0 };
}

export const OutgoingInFlightPacket: MessageFns<OutgoingInFlightPacket> = {
  encode(message: OutgoingInFlightPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      PacketIndex.encode(message.index, writer.uint32(10).fork()).join();
    }
    if (message.ackWaitingIndex !== undefined) {
      PacketIndex.encode(message.ackWaitingIndex, writer.uint32(18).fork()).join();
    }
    if (message.retriesRemaining !== 0) {
      writer.uint32(24).int32(message.retriesRemaining);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutgoingInFlightPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutgoingInFlightPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = PacketIndex.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ackWaitingIndex = PacketIndex.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.retriesRemaining = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutgoingInFlightPacket {
    return {
      index: isSet(object.index) ? PacketIndex.fromJSON(object.index) : undefined,
      ackWaitingIndex: isSet(object.ackWaitingIndex) ? PacketIndex.fromJSON(object.ackWaitingIndex) : undefined,
      retriesRemaining: isSet(object.retriesRemaining) ? globalThis.Number(object.retriesRemaining) : 0,
    };
  },

  toJSON(message: OutgoingInFlightPacket): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = PacketIndex.toJSON(message.index);
    }
    if (message.ackWaitingIndex !== undefined) {
      obj.ackWaitingIndex = PacketIndex.toJSON(message.ackWaitingIndex);
    }
    if (message.retriesRemaining !== 0) {
      obj.retriesRemaining = Math.round(message.retriesRemaining);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutgoingInFlightPacket>, I>>(base?: I): OutgoingInFlightPacket {
    return OutgoingInFlightPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutgoingInFlightPacket>, I>>(object: I): OutgoingInFlightPacket {
    const message = createBaseOutgoingInFlightPacket();
    message.index = (object.index !== undefined && object.index !== null)
      ? PacketIndex.fromPartial(object.index)
      : undefined;
    message.ackWaitingIndex = (object.ackWaitingIndex !== undefined && object.ackWaitingIndex !== null)
      ? PacketIndex.fromPartial(object.ackWaitingIndex)
      : undefined;
    message.retriesRemaining = object.retriesRemaining ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
