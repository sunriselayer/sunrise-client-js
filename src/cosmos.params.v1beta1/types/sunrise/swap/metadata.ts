// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/swap/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../google/protobuf/duration";
import { Route } from "./route";

export const protobufPackage = "sunrise.swap";

export interface PacketMetadata {
  swap: SwapMetadata | undefined;
}

export interface ForwardMetadata {
  receiver: string;
  port: string;
  channel: string;
  timeout: Duration | undefined;
  retries: number;
  next: string;
}

export interface ExactAmountIn {
  minAmountOut: string;
}

export interface ExactAmountOut {
  amountOut: string;
  change: ForwardMetadata | undefined;
}

export interface SwapMetadata {
  interfaceProvider: string;
  route: Route | undefined;
  exactAmountIn?: ExactAmountIn | undefined;
  exactAmountOut?: ExactAmountOut | undefined;
  forward: ForwardMetadata | undefined;
}

function createBasePacketMetadata(): PacketMetadata {
  return { swap: undefined };
}

export const PacketMetadata: MessageFns<PacketMetadata> = {
  encode(message: PacketMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.swap !== undefined) {
      SwapMetadata.encode(message.swap, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PacketMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.swap = SwapMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketMetadata {
    return { swap: isSet(object.swap) ? SwapMetadata.fromJSON(object.swap) : undefined };
  },

  toJSON(message: PacketMetadata): unknown {
    const obj: any = {};
    if (message.swap !== undefined) {
      obj.swap = SwapMetadata.toJSON(message.swap);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PacketMetadata>, I>>(base?: I): PacketMetadata {
    return PacketMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PacketMetadata>, I>>(object: I): PacketMetadata {
    const message = createBasePacketMetadata();
    message.swap = (object.swap !== undefined && object.swap !== null)
      ? SwapMetadata.fromPartial(object.swap)
      : undefined;
    return message;
  },
};

function createBaseForwardMetadata(): ForwardMetadata {
  return { receiver: "", port: "", channel: "", timeout: undefined, retries: 0, next: "" };
}

export const ForwardMetadata: MessageFns<ForwardMetadata> = {
  encode(message: ForwardMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.receiver !== "") {
      writer.uint32(10).string(message.receiver);
    }
    if (message.port !== "") {
      writer.uint32(18).string(message.port);
    }
    if (message.channel !== "") {
      writer.uint32(26).string(message.channel);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).join();
    }
    if (message.retries !== 0) {
      writer.uint32(40).uint32(message.retries);
    }
    if (message.next !== "") {
      writer.uint32(50).string(message.next);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForwardMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForwardMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.port = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channel = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.retries = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.next = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForwardMetadata {
    return {
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      port: isSet(object.port) ? globalThis.String(object.port) : "",
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      retries: isSet(object.retries) ? globalThis.Number(object.retries) : 0,
      next: isSet(object.next) ? globalThis.String(object.next) : "",
    };
  },

  toJSON(message: ForwardMetadata): unknown {
    const obj: any = {};
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.port !== "") {
      obj.port = message.port;
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.retries !== 0) {
      obj.retries = Math.round(message.retries);
    }
    if (message.next !== "") {
      obj.next = message.next;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ForwardMetadata>, I>>(base?: I): ForwardMetadata {
    return ForwardMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ForwardMetadata>, I>>(object: I): ForwardMetadata {
    const message = createBaseForwardMetadata();
    message.receiver = object.receiver ?? "";
    message.port = object.port ?? "";
    message.channel = object.channel ?? "";
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.retries = object.retries ?? 0;
    message.next = object.next ?? "";
    return message;
  },
};

function createBaseExactAmountIn(): ExactAmountIn {
  return { minAmountOut: "" };
}

export const ExactAmountIn: MessageFns<ExactAmountIn> = {
  encode(message: ExactAmountIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minAmountOut !== "") {
      writer.uint32(10).string(message.minAmountOut);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExactAmountIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExactAmountIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.minAmountOut = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExactAmountIn {
    return { minAmountOut: isSet(object.minAmountOut) ? globalThis.String(object.minAmountOut) : "" };
  },

  toJSON(message: ExactAmountIn): unknown {
    const obj: any = {};
    if (message.minAmountOut !== "") {
      obj.minAmountOut = message.minAmountOut;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExactAmountIn>, I>>(base?: I): ExactAmountIn {
    return ExactAmountIn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExactAmountIn>, I>>(object: I): ExactAmountIn {
    const message = createBaseExactAmountIn();
    message.minAmountOut = object.minAmountOut ?? "";
    return message;
  },
};

function createBaseExactAmountOut(): ExactAmountOut {
  return { amountOut: "", change: undefined };
}

export const ExactAmountOut: MessageFns<ExactAmountOut> = {
  encode(message: ExactAmountOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amountOut !== "") {
      writer.uint32(10).string(message.amountOut);
    }
    if (message.change !== undefined) {
      ForwardMetadata.encode(message.change, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExactAmountOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExactAmountOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.change = ForwardMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExactAmountOut {
    return {
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
      change: isSet(object.change) ? ForwardMetadata.fromJSON(object.change) : undefined,
    };
  },

  toJSON(message: ExactAmountOut): unknown {
    const obj: any = {};
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    if (message.change !== undefined) {
      obj.change = ForwardMetadata.toJSON(message.change);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExactAmountOut>, I>>(base?: I): ExactAmountOut {
    return ExactAmountOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExactAmountOut>, I>>(object: I): ExactAmountOut {
    const message = createBaseExactAmountOut();
    message.amountOut = object.amountOut ?? "";
    message.change = (object.change !== undefined && object.change !== null)
      ? ForwardMetadata.fromPartial(object.change)
      : undefined;
    return message;
  },
};

function createBaseSwapMetadata(): SwapMetadata {
  return {
    interfaceProvider: "",
    route: undefined,
    exactAmountIn: undefined,
    exactAmountOut: undefined,
    forward: undefined,
  };
}

export const SwapMetadata: MessageFns<SwapMetadata> = {
  encode(message: SwapMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interfaceProvider !== "") {
      writer.uint32(10).string(message.interfaceProvider);
    }
    if (message.route !== undefined) {
      Route.encode(message.route, writer.uint32(18).fork()).join();
    }
    if (message.exactAmountIn !== undefined) {
      ExactAmountIn.encode(message.exactAmountIn, writer.uint32(26).fork()).join();
    }
    if (message.exactAmountOut !== undefined) {
      ExactAmountOut.encode(message.exactAmountOut, writer.uint32(34).fork()).join();
    }
    if (message.forward !== undefined) {
      ForwardMetadata.encode(message.forward, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SwapMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwapMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interfaceProvider = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route = Route.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exactAmountIn = ExactAmountIn.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.exactAmountOut = ExactAmountOut.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.forward = ForwardMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwapMetadata {
    return {
      interfaceProvider: isSet(object.interfaceProvider) ? globalThis.String(object.interfaceProvider) : "",
      route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
      exactAmountIn: isSet(object.exactAmountIn) ? ExactAmountIn.fromJSON(object.exactAmountIn) : undefined,
      exactAmountOut: isSet(object.exactAmountOut) ? ExactAmountOut.fromJSON(object.exactAmountOut) : undefined,
      forward: isSet(object.forward) ? ForwardMetadata.fromJSON(object.forward) : undefined,
    };
  },

  toJSON(message: SwapMetadata): unknown {
    const obj: any = {};
    if (message.interfaceProvider !== "") {
      obj.interfaceProvider = message.interfaceProvider;
    }
    if (message.route !== undefined) {
      obj.route = Route.toJSON(message.route);
    }
    if (message.exactAmountIn !== undefined) {
      obj.exactAmountIn = ExactAmountIn.toJSON(message.exactAmountIn);
    }
    if (message.exactAmountOut !== undefined) {
      obj.exactAmountOut = ExactAmountOut.toJSON(message.exactAmountOut);
    }
    if (message.forward !== undefined) {
      obj.forward = ForwardMetadata.toJSON(message.forward);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SwapMetadata>, I>>(base?: I): SwapMetadata {
    return SwapMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SwapMetadata>, I>>(object: I): SwapMetadata {
    const message = createBaseSwapMetadata();
    message.interfaceProvider = object.interfaceProvider ?? "";
    message.route = (object.route !== undefined && object.route !== null) ? Route.fromPartial(object.route) : undefined;
    message.exactAmountIn = (object.exactAmountIn !== undefined && object.exactAmountIn !== null)
      ? ExactAmountIn.fromPartial(object.exactAmountIn)
      : undefined;
    message.exactAmountOut = (object.exactAmountOut !== undefined && object.exactAmountOut !== null)
      ? ExactAmountOut.fromPartial(object.exactAmountOut)
      : undefined;
    message.forward = (object.forward !== undefined && object.forward !== null)
      ? ForwardMetadata.fromPartial(object.forward)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
