// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: sunrise/liquidityincentive/gauge.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "sunrise.liquidityincentive";

export interface Gauge {
  previousEpochId: number;
  poolId: number;
  ratio: string;
}

export interface PoolWeight {
  poolId: number;
  weight: string;
}

export interface Vote {
  sender: string;
  weights: PoolWeight[];
}

function createBaseGauge(): Gauge {
  return { previousEpochId: 0, poolId: 0, ratio: "" };
}

export const Gauge: MessageFns<Gauge> = {
  encode(message: Gauge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.previousEpochId !== 0) {
      writer.uint32(8).uint64(message.previousEpochId);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint64(message.poolId);
    }
    if (message.ratio !== "") {
      writer.uint32(26).string(message.ratio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gauge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGauge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.previousEpochId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ratio = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gauge {
    return {
      previousEpochId: isSet(object.previousEpochId) ? globalThis.Number(object.previousEpochId) : 0,
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      ratio: isSet(object.ratio) ? globalThis.String(object.ratio) : "",
    };
  },

  toJSON(message: Gauge): unknown {
    const obj: any = {};
    if (message.previousEpochId !== 0) {
      obj.previousEpochId = Math.round(message.previousEpochId);
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.ratio !== "") {
      obj.ratio = message.ratio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gauge>, I>>(base?: I): Gauge {
    return Gauge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gauge>, I>>(object: I): Gauge {
    const message = createBaseGauge();
    message.previousEpochId = object.previousEpochId ?? 0;
    message.poolId = object.poolId ?? 0;
    message.ratio = object.ratio ?? "";
    return message;
  },
};

function createBasePoolWeight(): PoolWeight {
  return { poolId: 0, weight: "" };
}

export const PoolWeight: MessageFns<PoolWeight> = {
  encode(message: PoolWeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint64(message.poolId);
    }
    if (message.weight !== "") {
      writer.uint32(18).string(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoolWeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weight = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PoolWeight {
    return {
      poolId: isSet(object.poolId) ? globalThis.Number(object.poolId) : 0,
      weight: isSet(object.weight) ? globalThis.String(object.weight) : "",
    };
  },

  toJSON(message: PoolWeight): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.weight !== "") {
      obj.weight = message.weight;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PoolWeight>, I>>(base?: I): PoolWeight {
    return PoolWeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PoolWeight>, I>>(object: I): PoolWeight {
    const message = createBasePoolWeight();
    message.poolId = object.poolId ?? 0;
    message.weight = object.weight ?? "";
    return message;
  },
};

function createBaseVote(): Vote {
  return { sender: "", weights: [] };
}

export const Vote: MessageFns<Vote> = {
  encode(message: Vote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.weights) {
      PoolWeight.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weights.push(PoolWeight.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vote {
    return {
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      weights: globalThis.Array.isArray(object?.weights) ? object.weights.map((e: any) => PoolWeight.fromJSON(e)) : [],
    };
  },

  toJSON(message: Vote): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.weights?.length) {
      obj.weights = message.weights.map((e) => PoolWeight.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vote>, I>>(base?: I): Vote {
    return Vote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vote>, I>>(object: I): Vote {
    const message = createBaseVote();
    message.sender = object.sender ?? "";
    message.weights = object.weights?.map((e) => PoolWeight.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
